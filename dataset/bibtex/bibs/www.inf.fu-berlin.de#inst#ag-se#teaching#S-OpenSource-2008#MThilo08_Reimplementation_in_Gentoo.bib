% This file was created with JabRef 2.3.1.
% Encoding: UTF-8

@ARTICLE{InTheNetwork,
  author = {Thomas Oesterlie},
  title = {In the network: Distributed control in Gentoo Linux},
  journal = {Proceedings of the 4th Workshop on Open Source Software Engineering},
  year = {2004},
  pages = {76-80},
  abstract = {This position paper reports on the findings of an empirical pilot
	study of Gentoo Linux. Gentoo Linux is an open source Linux distribution
	developed by a geographically distributed community of volunteers.
	The reported findings are based on the analysis of a specific episode
	using actor network theory. With basis in the analysis, it is argued
	that control in this specific episode can be interpreted as both
	distributed and local at the same time. Control here being the power
	to define a problem and make the decision about the appropriate solution
	to the problem defined. Control, it is argued, is distributed in
	that it is the function of reciprocal influence among several human
	and non-human actors.},
  url = {http://www.idi.ntnu.no/~thomasos/paper/osterlie_control.pdf}
}

@ARTICLE{ChangingGentoo,
  author = {Thomas Oesterlie and Letizia Jaccheri},
  title = {Balancing Technological and Community Interest: The Case of Changing
	a Large Open Source Software System},
  journal = {Proceedings of the 30th Information Systems Research Conference (IRIS'30)},
  year = {2007},
  pages = {66-80},
  abstract = {This paper studies the process of rewriting and replacing critical
	parts of a large open source software (OSS) system. Building upon
	the notions of installed based and transition strategies, we analyze
	how the interaction between the OSS and the context within which
	it is developed and used enables and constrains the process of rewriting
	and replacement. We show how the transition strategy emerges from
	and continuously changes in response to the way the installed base
	is cultivated. By demonstrating a mutual relationship between the
	transition strategy and the installed base, we show how the transition
	strategy in this particular case changes along three axes: the scope
	of the rewrite, the sequence to replace existing software, and the
	actors to be involved in the process. The paper is concluded with
	some implications for how to study the process of rewriting and replacing
	OSS.},
  url = {http://www.idi.ntnu.no/grupper/su/publ/thomas/osterlie_balancing.pdf}
}

@ARTICLE{RaymondCathedral,
  author = {Eric Steven Raymond},
  title = {The Cathedral and the Bazaar},
  journal = {O'Reilly},
  year = {1999},
  abstract = {I anatomize a successful open-source project, fetchmail, that was
	run as a deliberate test of some surprising theories about software
	engineering suggested by the history of Linux. I discuss these theories
	in terms of two fundamentally different development styles, the "cathedral"
	model of most of the commercial world versus the "bazaar" model of
	the Linux world. I show that these models derive from opposing assumptions
	about the nature of the software-debugging task. I then make a sustained
	argument from the Linux experience for the proposition that "Given
	enough eyeballs, all bugs are shallow", suggest productive analogies
	with other self-correcting systems of selfish agents, and conclude
	with some exploration of the implications of this insight for the
	future of software.},
  url = {http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/}
}

@ARTICLE{MaintenanceThroughReEngineering,
  author = {Manoranjan Satpathy and Nils T Siebel and Daniel Rodriguez},
  title = {Maintenance of Object Oriented Systems through Re-Engineering: A
	Case Study},
  journal = {Proceedings of the International Conference on Software Maintenance
	(ICSM'02)},
  year = {2002},
  pages = {540-549},
  abstract = {Unregulated evolution of software often leads to software ageing which
	not only makes the product difficult to maintain but also breaks
	the consistency between design and implementation. In such a case,
	it may become necessary to re-engineer the software so that it becomes
	maintainable again. In this paper, we present the case study of the
	reengineering of the People Tracking subsystem of a surveillance
	system written in C++. We discuss the problems, the challenges and
	the approaches taken, and we show how the re-engineered product is
	now better maintainable. We also discuss the generation of the relevant
	artefacts--- from requirement document through to design document.},
  doi = {http://doi.ieeecomputersociety.org/10.1109/ICSM.2002.1167815}
}

