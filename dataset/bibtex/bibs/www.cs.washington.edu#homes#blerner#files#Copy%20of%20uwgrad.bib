This file was created with JabRef 2.2.
Encoding: UTF8

@INPROCEEDINGS{Abadi1997,
  author = {Abadi},
  title = {On {SDSI}'s Linked Local Name Spaces},
  booktitle = {{PCSFW}: Proceedings of The 10th Computer Security Foundations Workshop},
  year = {1997},
  publisher = {IEEE Computer Society Press},
  abstract = {Rivest and Lampson have recently introduced SDSI, a Simple Distributed
	Security Infrastructure. One of the important innovations of SDSI
	is the use of linked local name spaces. This paper suggests a logical
	explanation of SDSI's local name spaces, as a complement to the operational
	explanation given in the SDSI definition.},
  citeseercitationcount = {0},
  citeseerurl = {http://citeseer.ist.psu.edu/2379},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Abadi1997.pdf},
  timestamp = {2006.01.09}
}

@ARTICLE{Abadi2006,
  author = {Mart\'{\i}n Abadi},
  title = {Access control in a core calculus of dependency},
  journal = {SIGPLAN Not.},
  year = {2006},
  volume = {41},
  pages = {263--273},
  number = {9},
  abstract = {The Dependency Core Calculus (DCC) is an extension of the computational
	lambda calculus that was designed in order to capture the notion
	of dependency that arises in information-flow control, partial evaluation,
	and other programming-language settings. We show that, unexpectedly,
	DCC can also be used as a calculus for access control in distributed
	systems. Initiating the study of DCC from this perspective, we explore
	some of its appealing properties.},
  address = {New York, NY, USA},
  comment = {atomic infoflow},
  doi = {http://doi.acm.org/10.1145/1160074.1159839},
  issn = {0362-1340},
  owner = {blerner},
  pdf = {Abadi2006.pdf},
  publisher = {ACM Press},
  timestamp = {2007.05.03}
}

@INPROCEEDINGS{Abadi1999,
  author = {Mart{\'\i}n Abadi and Anindya Banerjee and Nevin Heintze and Jon
	G. Riecke},
  title = {A core calculus of dependency},
  booktitle = {{POPL} '99. Proceedings of the 26th {ACM} {SIGPLAN-{SIGACT}} on Principles
	of programming languages, January 20--22, 1999, San Antonio, {TX}},
  year = {1999},
  editor = {ACM},
  pages = {147--160},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Notions of program dependency arise in many settings: security, partial
	evaluation, program slicing, and call-tracking. We argue that there
	is a central notion of dependency common to these settings that can
	be captured within a single calculus, the Dependency Core Calculus
	(DCC), a small extension of Moggi's computational lambda calculus.
	To establish this thesis, we translate typed calculi for secure information
	flow, binding-time analysis, slicing, and call-tracking into DCC.
	The translations help clarify aspects of the source calculi. We also
	define a semantic model for DCC and use it to give simple proofs
	of noninterference results for each case.},
  comment = {atomic infoflow},
  doi = {http://doi.acm.org/10.1145/292540.292555},
  isbn = {1-58113-095-3},
  location = {San Antonio, Texas, United States},
  owner = {blerner},
  pdf = {Abadi1999.pdf},
  timestamp = {2007.02.01},
  url = {citeseer.ist.psu.edu/abadi99core.html}
}

@INPROCEEDINGS{Abadi2005,
  author = {Mart\&\#237;n Abadi and Mihai Budiu and \&\#218;lfar Erlingsson and
	Jay Ligatti},
  title = {Control-flow integrity},
  booktitle = {CCS '05: Proceedings of the 12th ACM conference on Computer and communications
	security},
  year = {2005},
  pages = {340--353},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Current software attacks often build on exploits that subvert machine-code
	execution. The enforcement of a basic safety property, Control-Flow
	Integrity (CFI), can prevent such attacks from arbitrarily controlling
	program behavior. CFI enforcement is simple, and its guarantees can
	be established formally even with respect to powerful adversaries.
	Moreover, CFI enforcement is practical: it is compatible with existing
	software and can be done efficiently using software rewriting in
	commodity systems. Finally, CFI provides a useful foundation for
	enforcing further security policies, as we demonstrate with efficient
	software implementations of a protected shadow call stack and of
	access control for memory regions.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1102120.1102165},
  isbn = {1-59593-226-7},
  location = {Alexandria, VA, USA},
  owner = {blerner},
  pdf = {Abadi2005.pdf},
  timestamp = {2006.01.09}
}

@MISC{Opalach1995,
  author = {Agata Opalach,Steve Maddock},
  title = {An Overview of Implicit Surfaces},
  year = {1995},
  abstract = {This tutorial paper gives an overview of the area of implicit surfaces.
	The history of the technique is presented and various approaches
	categorised and compared. Existing problems with modelling, rendering
	and animation of implicit surfaces are discussed and available solutions
	evaluated. The paper provides a comprehensive introduction for novice
	and experienced users of implicit surfaces.},
  institution = {CiteSeer [http://cs1.ist.psu.edu/cgi-bin/oai.cgi] (United States)},
  keywords = {Agata Opalach,Steve Maddock An Overview of Implicit Surfaces},
  owner = {blerner},
  pdf = {Opalach1995.pdf},
  publisher = {unknown},
  timestamp = {2007.07.02},
  url = {http://citeseer.ist.psu.edu/70531.html}
}

@INPROCEEDINGS{Aiken1994,
  author = {Alexander Aiken and Edward L. Wimmers and T. K. Lakshman},
  title = {Soft typing with conditional types},
  booktitle = {POPL '94: Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on
	Principles of programming languages},
  year = {1994},
  pages = {163--173},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We present a simple and powerful type inference method for dynamically
	typed languages where no type information is supplied by the user.
	Type inference is reduced to the problem of solvability of a system
	of type inclusion constraints over a type language that includes
	function types, constructor types, union, intersection, and recursive
	types, and conditional types. Conditional types enable us to analyze
	control flow using type inference, thus facilitating computation
	of accurate types. We demonstrate the power and practicality of the
	method with examples and performance results from an implementation.},
  doi = {http://doi.acm.org/10.1145/174675.177847},
  isbn = {0-89791-636-0},
  location = {Portland, Oregon, United States},
  owner = {blerner},
  pdf = {Aiken1994.pdf},
  timestamp = {2005.11.12}
}

@TECHREPORT{Andersen1995,
  author = {Peter Holst Andersen},
  title = {Partial Evaluation Applied to Ray Tracing},
  institution = {University of Copenhagen},
  year = {1995},
  owner = {blerner},
  pdf = {Andersen1995.pdf},
  timestamp = {2007.07.03}
}

@MISC{Anderson2003,
  author = {Ross Anderson},
  title = {`Trusted Computing' Frequently Asked Questions},
  month = aug,
  year = {2003},
  comment = {CSE590s},
  owner = {blerner},
  timestamp = {2006.01.09},
  url = {http://www.cl.cam.ac.uk/~rja14/tcpa-faq.html}
}

@INPROCEEDINGS{Anderson2006,
  author = {Thomas Anderson and Timothy Roscoe},
  title = {Learning from PlanetLab},
  booktitle = {WORLDS},
  year = {2006},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Anderson2006.pdf},
  timestamp = {2006.10.11},
  url = {http://www.usenix.org/events/worlds06/tech/}
}

@INPROCEEDINGS{Anderson1991,
  author = {Thomas E. Anderson and Brian N. Bershad and Edward D. Lazowska and
	Henry M. Levy},
  title = {Scheduler activations: effective kernel support for the user-level
	management of parallelism},
  booktitle = {SOSP '91: Proceedings of the thirteenth ACM symposium on Operating
	systems principles},
  year = {1991},
  pages = {95--109},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {\emph{Threads} are the vehicle for concurrency in many approaches
	to parallel programming. Threads separate the notion of a sequential
	execution stream from the other aspects of traditional UNIX-like
	processes, such as address spaces and I/O descriptors. The objective
	of this separation is to make the expression and control of parallelism
	sufficiently cheap that the programmer or compiler can exploit even
	fine-grained parallelism with acceptable overhead.Threads can be
	supported either by the operating system kernel or by user-level
	library code in the application address space, but neither approach
	has been fully satisfactory. This paper addresses this dilemma. First,
	we argue that the performance of kernel threads is \emph{inherently}
	worse than that of user-level threads, rather than this being an
	artifact of existing implementations; we thus argue that managing
	parallelism at the user level is essential to high-performance parallel
	computing. Next, we argue that the lack of system integration exhibited
	by user-level threads is a consequence of the lack of kernel support
	for user-level threads provided by contemporary multiprocessor operating
	systems; we thus argue that kernel threads or processes, as currently
	conceived, are the \emph{wrong abstraction} on which to support user-level
	management of parallelism. Finally, we describe the design, implementation,
	and performance of a new kernel interface and user-level thread package
	that together provide the same functionality as kernel threads without
	compromising the performance and flexibility advantages of user-level
	management of parallelism.},
  comment = {CSE551},
  doi = {http://doi.acm.org/10.1145/121132.121151},
  isbn = {0-89791-447-3},
  location = {Pacific Grove, California, United States},
  owner = {blerner},
  pdf = {Anderson1991.pdf},
  timestamp = {2007.05.01}
}

@INPROCEEDINGS{Anderson1989,
  author = {T. E. Anderson and D. D. Lazowska and H. M. Levy},
  title = {The performance implications of thread management alternatives for
	shared-memory multiprocessors},
  booktitle = {SIGMETRICS '89: Proceedings of the 1989 ACM SIGMETRICS international
	conference on Measurement and modeling of computer systems},
  year = {1989},
  pages = {49--60},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Threads (``lightweight'' processes) have become a common element of
	new languages and operating systems. This paper examines the performance
	implications of several data structure and algorithm alternatives
	for thread management in shared-memory multiprocessors. Both experimental
	measurements and analytical model projections are presented. For
	applications with fine-grained parallelism, small differences in
	thread management are shown to have significant performance impact,
	often posing a tradeoff between throughput and latency. Per-processor
	data structures can be used to improve throughput, and in some circumstances
	to avoid locking, improving latency as well. The method used by processors
	to queue for locks is also shown to affect performance significantly.
	Normal methods of critical resource waiting can substantially degrade
	performance with moderate numbers of waiting processors. We present
	an Ethernet-style backoff algorithm that largely eliminates this
	effect.},
  comment = {CSE551},
  doi = {http://doi.acm.org/10.1145/75108.75378},
  isbn = {0-89791-315-9},
  location = {Oakland, California, United States},
  owner = {blerner},
  pdf = {Anderson1989.pdf},
  timestamp = {2007.05.01}
}

@MISC{Hadoop,
  author = {Apache},
  title = {Hadoop},
  howpublished = {http://lucene.apache.org/hadoop},
  year = {2007},
  comment = {cse551 project},
  owner = {blerner},
  timestamp = {2007.04.30},
  url = {http://lucene.apache.org/hadoop}
}

@MISC{Nutch,
  author = {Apache},
  title = {Nutch},
  howpublished = {http://lucene.apache.org/nutch},
  year = {2007},
  comment = {cse551 project},
  owner = {blerner},
  timestamp = {2007.04.30},
  url = {http://lucene.apache.org/nutch}
}

@INPROCEEDINGS{Appel2001,
  author = {Andrew W. Appel},
  title = {Foundational Proof-Carrying Code},
  booktitle = {LICS '01: Proceedings of the 16th Annual IEEE Symposium on Logic
	in Computer Science},
  year = {2001},
  pages = {247},
  address = {Washington, DC, USA},
  month = jun # { ~16--19},
  publisher = {IEEE Computer Society},
  abstract = {Proof-carrying code is a framework for the mechanical verification
	of safety properties of machine-language programs, but the problem
	arises of “quis custodiat ipsos custodes” - i.e. who verifies the
	verifier itself? Foundational proof-carrying code is verification
	from the smallest possible set of axioms, using the simplest possible
	verifier and the smallest possible runtime system. I describe many
	of the mathematical and engineering problems to be solved in the
	construction of a foundational proof-carrying code system.},
  owner = {blerner},
  pdf = {Appel2001.pdf},
  timestamp = {2005.11.12},
  url = {http://ieeexplore.ieee.org/iel5/7424/20180/00932501.pdf?isnumber=20180&prod=STD&arnumber=932501&arnumber=932501&arSt=247&ared=256&arAuthor=Appel%2C+A.W.}
}

@INPROCEEDINGS{Arvo1986,
  author = {James R. Arvo},
  title = {Backward Ray Tracing},
  booktitle = {{ACM} {SIGGRAPH} '86 Course Notes - Developments in Ray Tracing},
  year = {1986},
  volume = {12},
  owner = {blerner},
  pdf = {Arvo1986.pdf},
  timestamp = {2007.07.03},
  url = {citeseer.ist.psu.edu/arvo86backward.html}
}

@INPROCEEDINGS{Back2000,
  author = {Godmar Back and Jay Lepreau and Wilson C. Hsieh},
  title = {Processes in {KaffeOS}: Isolation, Resource Management, and Sharing
	in Java},
  booktitle = {Proceedings of the 4th Symposium on Operating Systems Design and
	Implementation},
  year = {2000},
  month = sep # {~07},
  organization = {USENIX},
  abstract = {Single-language runtime systems, in the form of Java virtual machines,
	are widely deployed platforms for executing untrusted mobile code.
	These runtimes provide some of the features that operating systems
	provide: inter-application memory protection and basic system services.
	They do not, however, provide the ability to isolate applications
	from each other, or limit their resource consumption. This paper
	describes KaffeOS, a Java runtime system that provides these features.
	The KaffeOS architecture takes many lessons from operating system
	design, such as the use of a user/kernel boundary, and employs garbage
	collection techniques, such as write barriers. The KaffeOS architecture
	supports the OS abstraction of a process in a Java virtual machine.
	Each process executes as if it were run in its own virtual machine,
	including separate garbage collection of its own heap. The difficulty
	in designing KaffeOS lay in balancing the goals of isolation and
	resource management against the goal of ...},
  citeseerurl = {http://citeseer.ist.psu.edu/361605.html},
  comment = {CS428, CSE590p},
  owner = {blerner},
  pdf = {Back2000.pdf},
  rights = {unrestricted},
  timestamp = {2005.11.12},
  url = {http://www.cs.utah.edu/flux/papers/kaffeos-osdi00-base.html}
}

@INPROCEEDINGS{Bacon2004,
  author = {David F. Bacon and Perry Cheng and V. T. Rajan},
  title = {A unified theory of garbage collection},
  booktitle = {OOPSLA '04: Proceedings of the 19th annual ACM SIGPLAN conference
	on Object-oriented programming, systems, languages, and applications},
  year = {2004},
  pages = {50--68},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Tracing and reference counting are uniformly viewed as being fundamentally
	different approaches to garbage collection that possess very distinct
	performance properties. We have implemented high-performance collectors
	of both types, and in the process observed that the more we optimized
	them, the more similarly they behaved - that they seem to share some
	deep structure.
	
	
	We present a formulation of the two algorithms that shows that they
	are in fact duals of each other. Intuitively, the difference is that
	tracing operates on live objects, or ``matter'', while reference
	counting operates on dead objects, or ``anti-matter''. For every
	operation performed by the tracing collector, there is a precisely
	corresponding anti-operation performed by the reference counting
	collector.
	
	
	Using this framework, we show that all high-performance collectors
	(for example, deferred reference counting and generational collection)
	are in fact hybrids of tracing and reference counting. We develop
	a uniform cost-model for the collectors to quantify the trade-offs
	that result from choosing different hybridizations of tracing and
	reference counting. This allows the correct scheme to be selected
	based on system performance requirements and the expected properties
	of the target application.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1028976.1028982},
  isbn = {1-58113-831-9},
  location = {Vancouver, BC, Canada},
  owner = {blerner},
  pdf = {Bacon2004.pdf},
  timestamp = {2005.11.11}
}

@INPROCEEDINGS{Bacon2001,
  author = {David F. Bacon and Perry Cheng and V. T. Rajan},
  title = {No-Longer-Foreign: Teaching an {ML} compiler to speak {C} ``natively''},
  booktitle = {BABEL'01 --- First workshop on multi-language infrastructure and
	interoperability},
  year = {2001},
  volume = {59},
  number = {1},
  abstract = {We present a new foreign-function interface for SML/NJ. It is based
	on the idea of data-level interoperability the ability of ML programs
	to inspect as well as manipulate C data structures directly. The
	core component of this work is an encoding of the almost complete
	C type system in ML types. [Variable-argument functions are the only
	feature of the C type system that we do not handle very well yet.]
	The encoding makes extensive use of a folklore typing trick, taking
	advantage of ML's polymorphism, its type constructors, its abstraction
	mechanisms, and even functors. A small low-level component which
	deals with C struct and union declarations as well as program linkage
	is hidden from the programmer's eye by a simple program-generator
	tool that translates C declarations to corresponding ML glue code.},
  comment = {CSE590p},
  journal = {Electr. Notes Theor. Comput. Sci},
  owner = {blerner},
  pdf = {Bacon2001.pdf},
  timestamp = {2005.11.11},
  url = {http://www.elsevier.nl/locate/entcs/volume59.html}
}

@INPROCEEDINGS{Bansal2006,
  author = {Sorav Bansal and Alex Aiken},
  title = {Automatic generation of peephole superoptimizers},
  booktitle = {ASPLOS-XII: Proceedings of the 12th international conference on Architectural
	support for programming languages and operating systems},
  year = {2006},
  pages = {394--403},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Peephole optimizers are typically constructed using human-written
	pattern matching rules, an approach that requires expertise and time,
	as well as being less than systematic at exploiting all opportunities
	for optimization. We explore fully automatic construction of peephole
	optimizers using brute force superoptimization. While the optimizations
	discovered by our automatic system may be less general than human-written
	counterparts, our approach has the potential to automatically learn
	a database of thousands to millions of optimizations, in contrast
	to the hundreds found in current peephole optimizers. We show experimentally
	that our optimizer is able to exploit performance opportunities not
	found by existing compilers; in particular, we show speedups from
	1.7 to a factor of 10 on some compute intensive kernels over a conventional
	optimizing compiler.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1168857.1168906},
  isbn = {1-59593-451-0},
  location = {San Jose, California, USA},
  owner = {blerner},
  pdf = {Bansal2006.pdf},
  timestamp = {2007.01.09}
}

@INPROCEEDINGS{Bardinet1994,
  author = {E. Bardinet and N. Ayache and L. D. Cohen},
  title = {Fitting of iso-surfaces using superquadrics and free-form deformations},
  booktitle = {Proceedings of the IEEE Workshop on Biomedical Image Analysis},
  year = {1994},
  pages = {184-193},
  abstract = {Recovery of 3D data with simple parametric models has been the subject
	of many studies over the last ten years. Many have used the notion
	of superquadrics introduced for graphics by Barr (1981). Different
	improvements were introduced to make the model a better representation
	of the data (Boult and Gross, 1987; Ferrie et al., 1989; Solina and
	Bajcsy 1990; Terzopoulos and Metaxas, 1991). The authors describe
	a two-steps method to fit a parametric deformable surface to 3D points.
	They suppose that a 3D image has been segmented to get a set of 3D
	points. The first step consists in their version of a superquadric
	fit with global tapering, similar to the method proposed by Boult
	and Gross (1987). The authors then make use of the technique of free-form
	deformations, as introduced by Sederberg and Parry (1986) in computer
	graphics. They present experimental results with synthetic and real
	3D medical images.},
  owner = {blerner},
  pdf = {Bardinet1994.pdf},
  timestamp = {2007.07.02}
}

@INCOLLECTION{Barendregt1992,
  author = {Henk Barendregt},
  title = {Lambda Calculi with Types},
  booktitle = {Handbook of Logic in Computer Science, volume 2: Background: Computational
	Structures},
  publisher = {Clarendon Press},
  year = {1992},
  editor = {Samson Abramsky and Dov Gabbay and T.~S.~E. Maibaum},
  volume = {2},
  chapter = {2},
  pages = {117--309},
  address = {Oxford},
  comment = {CS428},
  owner = {blerner},
  pdf = {Barendregt1992.pdf},
  timestamp = {2005.11.12},
  url = {http://www.cs.ru.nl/~henk/papers.html}
}

@INCOLLECTION{Barendregt2001,
  author = {Henk Barendregt and Herman Geuvers},
  title = {Proof-assistants using Dependent Type Systems},
  booktitle = {Handbook of Automated Reasoning},
  publisher = {Elsevier Science},
  year = {2001},
  editor = {A. Robinson and A. Voronkov},
  volume = {II},
  chapter = {18},
  pages = {1149--1238},
  comment = {CS428},
  owner = {blerner},
  pdf = {Barendregt2001.pdf},
  timestamp = {2005.11.12},
  url = {http://www.cs.ru.nl/~henk/papers.html}
}

@TECHREPORT{Barnard1995,
  author = {David T. Barnard and Gwen Clarke and Nicolas Duncan},
  title = {Tree-to-tree Correction for Document Trees},
  institution = {Department of Computing and Information Science, Queen's University,
	Kingston},
  year = {1995},
  number = {95-372},
  month = jan,
  owner = {blerner},
  pdf = {Barnard1995.pdf},
  timestamp = {2006.05.09},
  url = {http://citeseer.ist.psu.edu/47676.html}
}

@ARTICLE{Barnett2006,
  author = {Mike Barnett and K. Rustan M. Leino},
  title = {Weakest-precondition of unstructured programs},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {2006},
  volume = {31},
  pages = {82--87},
  number = {1},
  abstract = {Program verification systems typically transform a program into a
	logical expression which is then fed to a theorem prover. The logical
	expression represents the weakest precondition of the program relative
	to its specification; when (and if!) the theorem prover is able to
	prove the expression, then the program is considered correct. Computing
	such a logical expression for an imperative, structured program is
	straightforward, although there are issues having to do with loops
	and the efficiency both of the computation and of the complexity
	of the formula with respect to the theorem prover. This paper presents
	a novel approach for computing the weakest precondition of an unstructured
	program that is sound even in the presence of loops. The computation
	is efficient and the resulting logical expression provides more leeway
	for the theorem prover efficiently to attack the proof.},
  comment = {CSE599F},
  doi = {http://dx.doi.org/10.1145/1108768.1108813},
  owner = {blerner},
  pdf = {Barnett2006.pdf},
  timestamp = {2006.03.16}
}

@INPROCEEDINGS{Baudisch2004,
  author = {Patrick Baudisch and Carl Gutwin},
  title = {Multiblending: displaying overlapping windows simultaneously without
	the drawbacks of alpha blending},
  booktitle = {CHI '04: Proceedings of the SIGCHI conference on Human factors in
	computing systems},
  year = {2004},
  pages = {367--374},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Alpha blending allows the simultaneous display of overlapping windows-such
	as palette windows in visual workspaces. Although alpha blending
	has been used in some applications, such as games, it has not been
	widely adopted. One reason for the limited acceptance is that in
	many scenarios, alpha blending compromises the readability of content.
	We introduce a new blending mechanism called multiblending that uses
	a vector of blending weights, one for each class of features, rather
	than a single transparency value. Multiblending can in most cases
	be automatically optimized to preserve the most relevant features
	of both the palette and the background window. We present the results
	of a user study in which multiblended palettes provided higher recognizability
	of both the background and the palette than the best participating
	version of alpha blending.},
  doi = {http://doi.acm.org/10.1145/985692.985739},
  isbn = {1-58113-702-8},
  location = {Vienna, Austria},
  owner = {blerner},
  pdf = {Baudisch2004.pdf},
  timestamp = {2005.11.12}
}

@ARTICLE{Beaven1993,
  author = {Mike Beaven and Ryan Stansifer},
  title = {Explaining type errors in polymorphic languages},
  journal = {ACM Lett. Program. Lang. Syst.},
  year = {1993},
  volume = {2},
  pages = {17--30},
  number = {1-4},
  abstract = {Strongly-typed languages present programmers with compile-time feedback
	about the type correctness of programs. Errors during polymorphic
	type checking take the form of a unification failure for two types.
	Finding the source of the type error in the code is often difficult
	because the error may occur far from the spot where the inconsistency
	is detected. As functional languages use more and more complex type
	systems, the difficulty of interpreting and locating these errors
	will increase. To locate the source of type errors the programmer
	must unravel the long chain of deductions and type instantiations
	made during type reconstruction. This paper describes an approach
	that maintains the deductive steps of type inference and the reasons
	for type instantiations. The approach could be used in an interactive
	system to guide the programmer to the source of a type error or to
	explain why the compiler assigned a particular type to an expression.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/176454.176460},
  issn = {1057-4514},
  owner = {blerner},
  pdf = {Beaven1993.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@UNPUBLISHED{Bernstein2002,
  author = {Daniel J. Bernstein},
  title = {An Exposition of the {A}grawal-{K}ayal-{S}axena primality-proving
	theorem},
  month = {feb},
  year = {2002},
  owner = {blerner},
  pdf = {Bernstein2002.pdf},
  timestamp = {2007.07.03}
}

@TECHREPORT{Bernstein1995,
  author = {Karen Bernstein and Eugene Stark},
  title = {Debugging type errors (full version)},
  institution = {State University of New York at Stony Brook},
  year = {1995},
  owner = {blerner},
  pdf = {Bernstein1995.pdf},
  timestamp = {2006.05.29},
  url = {http://citeseer.ist.psu.edu/125636}
}

@INPROCEEDINGS{Bershad1995,
  author = {Brian N. Bershad and Stefan Savage and Przemyslaw Pardyak and Emin
	G{\"u}n Sirer and Marc E. Fiuczynski and David Becker and Craig Chambers
	and Susan J. Eggers},
  title = {Extensibility safety and performance in the {SPIN} operating system},
  booktitle = {SOSP '95: Proceedings of the fifteenth ACM symposium on Operating
	systems principles},
  year = {1995},
  pages = {267--283},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {This paper describes the motivation, architecture and performance
	of SPIN, an extensible operating system. SPIN provides an extension
	infrastructure together with a core set of extensible services that
	allow applications to safely change the operating system's interface
	and implementation. These changes can be specified with fine-granularity,
	allowing applications to achieve a desired level of performance and
	functionality from the system. Extensions are dynamically linked
	into the operating system kernel at application runtime, enabling
	them to access system services with low overhead. A capability-based
	protection model that relies on language and link-time mechanisms
	enables the system to inexpensively export fine-grained interfaces
	to system services. SPIN and its extensions are written in Modula-3
	and run on DEC Alpha workstations.},
  comment = {CS428},
  doi = {http://doi.acm.org/10.1145/224056.224077},
  isbn = {0-89791-715-4},
  location = {Copper Mountain, Colorado, United States},
  owner = {blerner},
  pdf = {Bershad1995.pdf},
  timestamp = {2005.11.12}
}

@TECHREPORT{Bille2003,
  author = {Philip Bille},
  title = {Tree Edit Distance, Alignment Distance and Inclusion},
  institution = {IT University of Copenhagen},
  year = {2003},
  month = apr # {~07},
  abstract = {We survey the problem of comparing labeled trees based on simple local
	operations of deleting, inserting and relabeling nodes. These operations
	lead to the tree edit distance, alignment distance and inclusion
	problem. For each problem we review the results available and present,
	in detail, one or more of the central algorithms for solving the
	problem.},
  annote = {Philip Bille (IT University of Copenhagen, IT University of Copenhagen;
	Glentevej 67, DK-2400 Copenhagen NV, Denmark);},
  bibsource = {OAI-PMH server at cs1.ist.psu.edu},
  citeseer-references = {oai:CiteSeerPSU:437900; oai:CiteSeerPSU:463585; oai:CiteSeerPSU:298449;
	oai:CiteSeerPSU:236246; oai:CiteSeerPSU:232239; oai:CiteSeerPSU:326876;
	oai:CiteSeerPSU:5871; oai:CiteSeerPSU:275449; oai:CiteSeerPSU:7981;
	oai:CiteSeerPSU:615043; oai:CiteSeerPSU:180288; oai:CiteSeerPSU:230053;
	oai:CiteSeerPSU:590741; oai:CiteSeerPSU:95609; oai:CiteSeerPSU:165023;
	oai:CiteSeerPSU:322939},
  citeseerurl = {http://citeseer.ist.psu.edu/677440.html},
  language = {en},
  oai = {oai:CiteSeerPSU:677440},
  owner = {blerner},
  pdf = {Bille2003.pdf},
  timestamp = {2005.11.12},
  url = {http://www.itu.dk/pub/Reports/ITU-TR-2003-23.ps}
}

@ARTICLE{Bird2006,
  author = {Richard S. Bird},
  title = {Functional Pearl: A Program to Solve {S}udoku},
  journal = {Journal of Functional Programming},
  year = {2006},
  volume = {16},
  pages = {671--679},
  number = {5},
  note = {To appear},
  owner = {blerner},
  pdf = {Bird2006.pdf},
  timestamp = {2006.10.21},
  url = {http://dx.doi.org/10.1017/S0956796806006058}
}

@INPROCEEDINGS{Blackburn2006,
  author = {Stephen M. Blackburn and Robin Garner and Chris Hoffmann and Asjad
	M. Khang and Kathryn S. McKinley and Rotem Bentzur and Amer Diwan
	and Daniel Feinberg and Daniel Frampton and Samuel Z. Guyer and Martin
	Hirzel and Antony Hosking and Maria Jump and Han Lee and J. Eliot
	and B. Moss and Aashish Phansalkar and Darko Stefanovi\&\#263; and
	Thomas VanDrunen and Daniel von Dincklage and Ben Wiedermann},
  title = {The DaCapo benchmarks: java benchmarking development and analysis},
  booktitle = {OOPSLA '06: Proceedings of the 21st annual ACM SIGPLAN conference
	on Object-oriented programming systems, languages, and applications},
  year = {2006},
  pages = {169--190},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Since benchmarks drive computer science research and industry product
	development, which ones we use and how we evaluate them are key questions
	for the community. Despite complex runtime tradeoffs due to dynamic
	compilation and garbage collection required for Java programs, many
	evaluations still use methodologies developed for C, C++, and Fortran.
	SPEC, the dominant purveyor of benchmarks, compounded this problem
	by institutionalizing these methodologies for their Java benchmark
	suite. This paper recommends benchmarking selection and evaluation
	methodologies, and introduces the DaCapo benchmarks, a set of open
	source, client-side Java benchmarks. We demonstrate that the complex
	interactions of (1) architecture, (2) compiler, (3) virtual machine,
	(4) memory management, and (5) application require more extensive
	evaluation than C, C++, and Fortran which stress (4) much less, and
	do not require (3). We use and introduce new value, time-series,
	and statistical metrics for static and dynamic properties such as
	code complexity, code size, heap composition, and pointer mutations.
	No benchmark suite is definitive, but these metrics show that DaCapo
	improves over SPEC Java in a variety of ways, including more complex
	code, richer object behaviors, and more demanding memory system requirements.
	This paper takes a step towards improving methodologies for choosing
	and evaluating benchmarks to foster innovation in system design and
	implementation for Java and other managed languages.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1167473.1167488},
  isbn = {1-59593-348-4},
  location = {Portland, Oregon, USA},
  owner = {blerner},
  pdf = {Blackburn2006.pdf},
  timestamp = {2007.01.09}
}

@ARTICLE{Blelloch1989,
  author = {G. E. Blelloch},
  title = {Scans as Primitive Parallel Operations},
  journal = {IEEE Trans. Comput.},
  year = {1989},
  volume = {38},
  pages = {1526--1538},
  number = {11},
  abstract = {A study of the effects of adding two scan primitives as unit-time
	primitives to PRAM (parallel random access machine) models is presented.
	It is shown that the primitives improve the asymptotic running time
	of many algorithms by an O(log n) factor, greatly simplifying the
	description of many algorithms, and are significantly easier to implement
	than memory references. It is argued that the algorithm designer
	should feel free to use these operations as if they were as cheap
	as a memory reference. The author describes five algorithms that
	clearly illustrate how the scan primitives can be used in algorithm
	design: a radix-sort algorithm, a quicksort algorithm, a minimum-spanning-tree
	algorithm, a line-drawing algorithm, and a merging algorithm. These
	all run on an EREW (exclusive read, exclusive write) PRAM with the
	addition of two scan primitives and are either simpler or more efficient
	than their pure PRAM counterparts. The scan primitives have been
	implemented in microcode on the Connection Machine system, are available
	in PARIS (the parallel instruction set of the machine).},
  address = {Washington, DC, USA},
  comment = {cse551 project},
  doi = {http://dx.doi.org/10.1109/12.42122},
  issn = {0018-9340},
  owner = {blerner},
  pdf = {Blelloch1989.pdf},
  publisher = {IEEE Computer Society},
  timestamp = {2007.04.30}
}

@INPROCEEDINGS{Blume2006,
  author = {Matthias Blume and Umut A. Acar and Wonseok Chae},
  title = {Extensible programming with first-class cases},
  booktitle = {ICFP '06: Proceedings of the eleventh ACM SIGPLAN international conference
	on Functional programming},
  year = {2006},
  pages = {239--250},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We present language mechanisms for polymorphic, extensible records
	and their exact dual, polymorphic sums with extensible first-class
	cases. These features make it possible to easily extend existing
	code with new cases. In fact, such extensions do not require any
	changes to code that adheres to a particular programming style. Using
	that style, individual extensions can be written independently and
	later be composed to form larger components. These language mechanisms
	provide a solution to the expression problem.We study the proposed
	mechanisms in the context of an implicitly typed, purely functional
	language PolyR. We give a type system for the language and provide
	rules for a 2-phase transformation: first into an explicitly typed
	λ-calculus with record polymorphism, and finally to efficient index-passing
	code. The first phase eliminates sums and cases by taking advantage
	of the duality with records.We implement a version of PolyR extended
	with imperative features and pattern matching - we call this language
	MLPolyR. Programs in MLPolyR require no type annotations - the implementation
	employs a reconstruction algorithm to infer all types. The compiler
	generates machine code (currently for PowerPC) and optimizes the
	representation of sums by eliminating closures generated by the dual
	construction.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1159803.1159836},
  isbn = {1-59593-309-3},
  location = {Portland, Oregon, USA},
  owner = {blerner},
  pdf = {Blume2006.pdf},
  timestamp = {2007.01.09}
}

@ARTICLE{Blume1999,
  author = {Matthias Blume and Andrew W. Appel},
  title = {Hierarchical modularity},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {1999},
  volume = {21},
  pages = {813--847},
  number = {4},
  abstract = {To cope with the complexity of very large systems, it is not sufficient
	to divide them into simple pieces because the pieces themselves will
	either be too numerous or too large. A hierarchical modular structure
	is the natural solution. In this article we explain how that approach
	can be applied to software. Our compilation manager provides a language
	for specifying where individual modules fit into a hierarchy and
	how they are related semantically. We pay particular attention to
	the structure of the global name space of program identifiers that
	are used for module linkage because any potential for name clashes
	between otherwise unrelated parts of a program can negatively affect
	modularity. We discuss the theoretical issues in building software
	hierarchically, and we describe our implementation of CM, the compilation
	manager for Standard ML of New Jersey.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/325478.325518},
  issn = {0164-0925},
  owner = {blerner},
  pdf = {Blume1999.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Boehm2005,
  author = {Hans-J. Boehm},
  title = {Threads cannot be implemented as a library},
  booktitle = {PLDI '05: Proceedings of the 2005 ACM SIGPLAN conference on Programming
	language design and implementation},
  year = {2005},
  pages = {261--268},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {In many environments, multi-threaded code is written in a language
	that was originally designed without thread support (e.g. C), to
	which a library of threading primitives was subsequently added. There
	appears to be a general understanding that this is not the right
	approach. We provide specific arguments that a pure library approach,
	in which the compiler is designed independently of threading issues,
	cannot guarantee correctness of the resulting code.We first review
	why the approach almost works, and then examine some of the surprising
	behavior it may entail. We further illustrate that there are very
	simple cases in which a pure library-based approach seems incapable
	of expressing an efficient parallel algorithm.Our discussion takes
	place in the context of C with Pthreads, since it is commonly used,
	reasonably well specified, and does not attempt to ensure type-safety,
	which would entail even stronger constraints. The issues we raise
	are not specific to that context.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1065010.1065042},
  isbn = {1-59593-056-6},
  location = {Chicago, IL, USA},
  owner = {blerner},
  pdf = {Boehm2005.pdf},
  timestamp = {2005.11.11}
}

@INPROCEEDINGS{Boehm2004,
  author = {Hans-J. Boehm},
  title = {An almost non-blocking stack},
  booktitle = {PODC '04: Proceedings of the twenty-third annual ACM symposium on
	Principles of distributed computing},
  year = {2004},
  pages = {40--49},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Non-blocking data structure implementations can be useful for performance
	and fault-tolerance reasons. And they are far easier to use correctly
	in a signal- or interrupt-handler context.We describe a weaker class
	of ``almost non-blocking'' data structures, which block only if more
	than some number N of threads attempt to simultaneously access the
	same data structure. We argue that this gives much of the benefit
	of fully non-blocking data structures, particularly for signal or
	interrupt handlers.We present an almost non-blocking linked stack
	implementation which is efficiently implementable even on hardware
	providing a single word compare-and-swap operation, while potentially
	providing the same interface as a well-known fully non-blocking solution,
	which relies on a double-width compare-and-swap instruction. By making
	a platform-dependent choice between these, we can implement a signal-handler-safe
	stack or free-list abstraction that is both portable and exhibits
	uniformly high performance with any flavor of compare-and-swap instruction.},
  doi = {http://doi.acm.org/10.1145/1011767.1011774},
  isbn = {1-58113-802-4},
  location = {St. John's, Newfoundland, Canada},
  owner = {blerner},
  pdf = {Boehm2004.pdf},
  timestamp = {2006.05.27}
}

@INPROCEEDINGS{Bono2005,
  author = {Stephen C. Bono and Matthew Green and Adam Stubblefield and Ari Juels
	and Aviel D. Rubin and Michael Szydlo},
  title = {Security Analysis of a Cryptographically-Enabled RFID Device},
  year = {2005},
  abstract = {We describe our success in defeating the security of an RFID device
	known as a Digital Signature Transponder (DST). Manufactured by Texas
	Instruments, DST (and variant) devices help secure millions of SpeedPassTM
	payment transponders and automobile ignition keys.
	
	
	Our analysis of the DST involved three phases:
	
	
	1 Reverse engineering: Starting from a rough published schematic,
	we determined the complete functional details of the cipher underpinning
	the challenge-response protocol in the DST. We accomplished this
	with only ``oracle'' or ``black-box'' access to an ordinary DST,
	that is, by experimental observation of responses output by the device.
	
	
	2 Key cracking: The key length for the DST is only 40 bits. With an
	array of of sixteen FPGAs operating in parallel, we can recover a
	DST key in under an hour using two responses to arbitrary challenges.
	
	
	3 Simulation: Given the key (and serial number) of a DST, we are able
	to simulate its RF output so as to spoof a reader. As validation
	of our results, we purchased gasoline at a service station and started
	an automobile using simulated DST devices.
	
	
	We accomplished all of these steps using inexpensive off-the-shelf
	equipment, and with minimal RF expertise. This suggests that an attacker
	with modest resources can emulate a target DST after brief short-range
	scanning or long-range eavesdropping across several authentication
	sessions. We conclude that the cryptographic protection afforded
	by the DST device is relatively weak.},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Bono2005.pdf},
  timestamp = {2006.01.09},
  url = {http://www.usenix.org/events/sec05/tech/bono/bono.pdf}
}

@MISC{Breen1994,
  author = {David E. Breen and Donald H. House and Michael J. Wozny},
  title = {A particle-based model for simulating the draping behavior of woven
	cloth},
  year = {1994},
  owner = {blerner},
  pdf = {Breen1994.pdf},
  text = {Textile Research Journal, Vol. 64, No. 11, November 1994, pp. 663-685},
  timestamp = {2007.07.02},
  url = {http://citeseer.ist.psu.edu/breen94particlebased.html}
}

@INPROCEEDINGS{Breen1994a,
  author = {David E. Breen and Donald H. House and Michael J. Wozny},
  title = {Predicting the drape of woven cloth using interacting particles},
  booktitle = {SIGGRAPH '94: Proceedings of the 21st annual conference on Computer
	graphics and interactive techniques},
  year = {1994},
  pages = {365--372},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = { We demonstrate a physically-based technique for predicting the drape
	of a wide variety of woven fabrics. The approach exploits a theoretical
	model that explicitly represents the microstructure of woven cloth
	with interacting particles, rather than utilizing a continuum approximation.
	By testing a cloth sample in a Kawabata fabric testing device, we
	obtain data that is used to tune the model's energy functions, so
	that it reproduces the draping behavior of the original material.
	Photographs, comparing the drape of actual cloth with visualizations
	of simulation results, show that we are able to reliably model the
	unique large-scale draping characteristics of distinctly different
	fabric types. },
  doi = {http://doi.acm.org/10.1145/192161.192259},
  isbn = {0-89791-667-0},
  owner = {blerner},
  pdf = {Breen1994a.pdf},
  timestamp = {2007.07.02}
}

@TECHREPORT{Bresink1997,
  author = {Marcel Bresink},
  title = {A Software Test-Bed for Global Illumination Research},
  institution = {Universit{\"a}t Koblenz-Landau},
  year = {1997},
  type = {Fachberichte Informatik},
  number = {30--97},
  address = {Universit{\"a}t Koblenz-Landau, Institut f{\"u}r Informatik, Rheinau
	1, D-56075 Koblenz},
  abstract = {This report portrays the implementation of a software test-bed architecture
	to develop and study experimental, as well as legacy algorithms for
	the image synthesis in the field of global illumination research.
	A universally adaptable, object-oriented framework for radiosity-based
	systems is developed that offers a generic environment for the exchange
	of geometric scenery data and the generation of shaded, photo-realistic
	images. Global illumination implementations can be dynamically linked
	to the framework system at runtime, which allows for flexible testing
	of modular components. The overall system architecture is presented
	briefly and the scenery file format is specified. },
  keywords = {computer graphics, image synthesis, global illumination, radiosity,
	test-bed systems},
  language = {english},
  owner = {blerner},
  pdf = {Bresnik1997.pdf},
  timestamp = {2007.07.03},
  url = {http://www.uni-koblenz.de/fb4/publikationen/gelbereihe/RR-30-97.ps.gz}
}

@ARTICLE{Brewer2001,
  author = {Eric A. Brewer},
  title = {Lessons from Giant-Scale Services},
  journal = {IEEE Internet Computing},
  year = {2001},
  volume = {5},
  pages = {46--55},
  number = {4},
  address = {Piscataway, NJ, USA},
  comment = {cse551 project},
  doi = {http://dx.doi.org/10.1109/4236.939450},
  issn = {1089-7801},
  owner = {blerner},
  pdf = {Brewer2001.pdf},
  publisher = {IEEE Educational Activities Department},
  timestamp = {2007.04.30}
}

@INPROCEEDINGS{Burch1990,
  author = {J.R. Burch and E.M. Clarke and K.L. McMillan and D.L. Dill and L.J.
	Hwang},
  title = {{S}ymbolic {M}odel {C}hecking: $10^{20}$ {S}tates and {B}eyond},
  booktitle = {Proceedings of the Fifth Annual {IEEE} Symposium on Logic in Computer
	Science},
  year = {1990},
  pages = {1--33},
  address = {Washington, D.C.},
  publisher = {IEEE Computer Society Press},
  abstract = {Many different methods have been devised for automatically verifying
	finite state systems by examining state-graph models of system behavior.
	These methods all depend on decision procedures that explicitly represent
	the state space using a list or a table that grows in proportion
	to the number of states. We describe a general method that represents
	the state space \emph{symbolically} instead of explicitly. The generality
	of our method comes from using a dialect of the Mu-Calculus as the
	primary specification language. We describe a \emph{model checking}
	algorithm for Mu-Calculus formulas that uses Bryant's \emph{Binary
	Decision Diagrams} (Bryant, R. E., 1986, \emph{IEEE Trans.\ Comput.}\
	\textbf{C-35}) to represent relations and formulas. We then show
	how our new Mu-Calculus model checking algorithm can be used to derive
	efficient decision procedures for CTL model checking, satisfiability
	of linear-time temporal logic formulas, strong and weak observational
	equivalence of finite transition systems, and language containment
	for finite $\omega$-automata. The fixed point computations for each
	decision procedure are sometimes complex, but can be concisely expressed
	in the Mu-Calculus. We illustrate the practicality of our approach
	to symbolic model checking by discussing how it can be used to verify
	a simple synchronous pipeline circuit.},
  citeseerurl = {http://citeseer.ist.psu.edu/19422.html},
  comment = {CSE599F},
  owner = {blerner},
  pdf = {Burch1990.pdf},
  timestamp = {2006.03.16}
}

@INPROCEEDINGS{Burrows2006,
  author = {Mike Burrows},
  title = {The Chubby Lock Service for Loosely-coupled Distributed Systems},
  booktitle = {OSDI},
  year = {2006},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Burrows2006.pdf},
  timestamp = {2006.10.11},
  url = {http://labs.google.com/papers/chubby.html}
}

@ARTICLE{Burrows1990,
  author = {Michael Burrows and Martin Abadi and Roger Needham},
  title = {A logic of authentication},
  journal = {ACM Trans. Comput. Syst.},
  year = {1990},
  volume = {8},
  pages = {18--36},
  number = {1},
  abstract = {Authentication protocols are the basis of security in many distributed
	systems, and it is therefore essential to ensure that these protocols
	function correctly. Unfortunately, their design has been extremely
	error prone. Most of the protocols found in the literature contain
	redundancies or security flaws. A simple logic has allowed us to
	describe the beliefs of trustworthy parties involved in authentication
	protocols and the evolution of these beliefs as a consequence of
	communication. We have been able to explain a variety of authentication
	protocols formally, to discover subtleties and errors in them, and
	to suggest improvements. In this paper we present the logic and then
	give the results of our analysis of four published protocols, chosen
	either because of their practical importance or because they serve
	to illustrate our method.},
  address = {New York, NY, USA},
  comment = {CSE590s},
  doi = {http://doi.acm.org/10.1145/77648.77649},
  issn = {0734-2071},
  owner = {blerner},
  pdf = {Burrows1990.pdf},
  publisher = {ACM Press},
  timestamp = {2006.01.09}
}

@INPROCEEDINGS{Carlstrom2006,
  author = {Brian D. Carlstrom and Austen McDonald and Hassan Chafi and JaeWoong
	Chung and Chi Cao Minh and Christos Kozyrakis and Kunle Olukotun},
  title = {The ATOMOS Transactional Programming Language},
  booktitle = {Proceedings of the Conference on Programming Language Design and
	Implementation (PLDI)},
  year = {2006},
  comment = {CSE590p},
  owner = {blerner},
  pdf = {Carlstrom2006.pdf},
  timestamp = {2006.05.02},
  url = {http://csl.stanford.edu/%7Echristos/}
}

@INPROCEEDINGS{Chang1998,
  author = {Chang, Chi-chao and Chris Hawblitzel and Deyu Hu and Grzegorz Czajkowski
	and Thorsten Von Eicken},
  title = {Implementing Multiple Protection Domains in {Java}},
  booktitle = {1998 {USENIX} Annual Technical Conference},
  year = {1998},
  pages = {259--270},
  address = {New Orleans, LA},
  citeseerurl = {http://citeseer.ist.psu.edu/52436.html},
  comment = {CS428},
  owner = {blerner},
  pdf = {Chang1998.pdf},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Chang2006,
  author = {Fay Chang and Jeffrey Dean and Sanjay Ghemawat and Wilson C. Hsieh
	and Deborah A. Wallach and Mike Burrows and Tushar Chandra and Andrew
	Fikes and Robert E. Gruber},
  title = {Bigtable: A Distributed Storage System for Structured Data},
  booktitle = {OSDI},
  year = {2006},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Chang2006.pdf},
  timestamp = {2006.10.11}
}

@INPROCEEDINGS{Chen2004,
  author = {Hao Chen and Drew Dean and David Wagner},
  title = {Model Checking One Million Lines of C Code},
  booktitle = {Proceedings of the 11th Annual Network and Distributed System Security
	Symposium (NDSS)},
  year = {2004},
  pages = {171--185},
  address = {San Diego, CA},
  month = feb # {~4--6,},
  abstract = {Implementation bugs in security-critical software are pervasive. Several
	authors have previously suggested model checking as a promising means
	to detect improper use of system interfaces and thereby detect a
	broad class of security vulnerabilities. In this paper, we report
	on our practical experience using MOPS, a tool for software model
	checking security-critical applications. As examples of security
	vulnerabilities that can be analyzed using model checking, we pick
	five important classes of vulnerabilities and show how to codify
	them as temporal safety properties, and then we describe the results
	of checking them on several significant Unix applications using MOPS.
	After analyzing over one million lines of code, we found more than
	a dozen new security weaknesses in important, widely-deployed applications.
	This demonstrates for the first time that model checking is practical
	and useful for detecting security weaknesses at large scale in real,
	legacy systems.},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Chen2004.pdf},
  timestamp = {2006.01.09},
  url = {http://www.cs.ucdavis.edu/~hchen/paper/ndss04.pdf}
}

@INPROCEEDINGS{Cherem2007,
  author = {Sigmund Cherem and Radu Rugina},
  title = {A Practical Escape and Effect Analysis for Building Lightweight Method
	Summaries},
  year = {2007},
  comment = {CSE590p},
  owner = {blerner},
  pdf = {Cherem2007.pdf},
  timestamp = {2007.01.09},
  url = {http://www.di.uminho.pt/etaps07/Programme/progCC.html}
}

@ARTICLE{Chitil2005,
  author = {Olaf Chitil},
  title = {Pretty printing with lazy dequeues},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {2005},
  volume = {27},
  pages = {163--184},
  number = {1},
  abstract = {There are several purely functional libraries for converting tree
	structured data into indented text, but they all make use of some
	backtracking. Over twenty years ago, Oppen published a more efficient
	imperative implementation of a pretty printer. This article shows
	that the same efficiency is also obtainable without destructive updates
	by developing a similar but purely functional Haskell implementation
	with the same complexity bounds. At its heart lie two lazy double
	ended queues.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1053468.1053473},
  issn = {0164-0925},
  owner = {blerner},
  pdf = {Chitil2005.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Chitil2000,
  author = {Olaf Chitil and Frank Huch and Axel Simon},
  title = {Typeview: a tool for understanding type errors},
  booktitle = {12th International Workshop on Implementation of Functional Languages},
  year = {2000},
  editor = {M. Mohnen and P. Koopman},
  series = {Aachner Informatik-Berichte},
  pages = {63--69},
  citeseerurl = {http://citeseer.ist.psu.edu/490460},
  owner = {blerner},
  pdf = {Chitil2000.pdf},
  timestamp = {2006.05.24}
}

@PHDTHESIS{Choppella2002,
  author = {Venkatesh Choppella},
  title = {Unification Source-tracking with Application to Diagnosis of Type
	Inference},
  school = {Indiana University},
  year = {2002},
  month = {August},
  note = {IUCS Tech Report TR566},
  abstract = {Prior diagnoses in unification-based type reconstruction systems have
	either missed information that is relevant, presented irrelevant
	details, or both. 
	
	We use a framework based on the Unification Logics of Le~Chenadec
	to define, derive and simplify proof-based source-tracking for term
	unification. The objects of source-tracking are proofs in this deduction
	system, and correspond to path expressions over a unification graph
	whose labels form a semi-Dyck language of balanced parentheses. Simplification
	of source-tracking information is implemented as proof normalization
	in the rewrite system for free groups. Subject-reduction properties
	guarantee that normalization preserves the semantics of deductions.
	The presentation of the logic facilitates proof construction by a
	simple extension to standard unification algorithms.
	
	We apply unification source-tracking to type inference in the Curry-Hindley
	type system. Programs are represented as systems of syntax equations.
	Program slices correspond to weakenings of syntax and type equations.
	A constraint generation function maps weakenings of type equations
	to weakenings of syntax equations. Source-tracking information is
	defined in terms of the inverse of this generating function.
	
	Unification is central to many applications of symbolic computation
	and artificial intelligence, including computer algebra, automated
	theorem proving, expert systems, and programming language type systems.
	Source-tracking is a debugging technique based on tracing the execution
	of a program to identify those subparts that contribute to the result
	of the execution.},
  owner = {blerner},
  pdf = {Choppella2002.pdf},
  timestamp = {2006.04.26},
  url = {ftp://ftp.cs.indiana.edu/pub/techreports/TR566.pdf}
}

@TECHREPORT{Choppella1994,
  author = {V. Choppella and C. T. Haynes},
  title = {Diagnosis of Ill-typed Programs},
  institution = {Indiana University},
  year = {1994},
  number = {426},
  month = {December},
  abstract = {A framework, based on syntactic and type constraints, is provided
	for defining program slices that contribute to a given type error
	or similar syntactic property. We specify soundness, minimality and
	completeness criteria for these slices and outline an algorithm for
	their lazy evaluation.},
  owner = {blerner},
  pdf = {Choppella1994.pdf},
  timestamp = {2006.04.03},
  url = {ftp://ftp.cs.indiana.edu/pub/techreports/TR426.pdf}
}

@ARTICLE{Chu2005,
  author = {Nelson S.-H. Chu and Chiew-Lan Tai},
  title = {MoXi: real-time ink dispersion in absorbent paper},
  journal = {ACM Trans. Graph.},
  year = {2005},
  volume = {24},
  pages = {504--511},
  number = {3},
  abstract = {This paper presents a physically-based method for simulating ink dispersion
	in absorbent paper for art creation purposes. We devise a novel fluid
	flow model based on the lattice Boltzmann equation suitable for simulating
	percolation in disordered media, like paper, in real time. Our model
	combines the simulations of spontaneous shape evolution and porous
	media flow under a unified framework. We also couple our physics
	simulation with simple implicit modeling and image-based methods
	to render high quality output. We demonstrate the effectiveness of
	our techniques in a digital paint system and achieve various realistic
	effects of ink dispersion, including complex flow patterns observed
	in real artwork, and other special effects.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1073204.1073221},
  issn = {0730-0301},
  owner = {blerner},
  pdf = {Chu2005.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12},
  url = {http://visgraph.cs.ust.hk/MoXi/}
}

@INPROCEEDINGS{Chuang2004,
  author = {Tyng-Ruey Chuang and Jan-Li Lin},
  title = {On modular transformation of structural content},
  booktitle = {DocEng '04: Proceedings of the 2004 ACM symposium on Document engineering},
  year = {2004},
  pages = {201--210},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We show that an XML DTD (Document Type Definition) can be viewed as
	the fixed point of a parametric content model. Based on the parametric
	content model, we develop a model of modular transformation of XML
	documents. A fold operator is used to capture a class of functions
	that consume valid XML document trees in a bottom-up matter. Similarly,
	an unfold operator is used to generate valid XML document trees in
	a top-down fashion. We then show that DTD-aware XML document transformation,
	which consumes a document of one DTD and generates a document of
	another DTD, can be thought as both a fold operation and an unfold
	operation.
	
	
	This leads us to model certain DTD-aware document transformations
	by mappings from the source content models to the target content
	models. From these mappings, we derive DTD-aware XML document transformational
	programs. Benefits of such derived programs include automatic validation
	of the target documents (no invalid document will be generated) and
	modular property in the composition of these programs (intermediate
	results from successive transformations can be eliminated).},
  doi = {http://doi.acm.org/10.1145/1030397.1030436},
  isbn = {1-58113-938-1},
  location = {Milwaukee, Wisconsin, USA},
  owner = {blerner},
  pdf = {Chuang2004.pdf},
  timestamp = {2005.11.12}
}

@ARTICLE{Clark1984,
  author = {Lawrence Clark},
  title = {A linguistic contribution to GOTO-less programming},
  journal = {Commun. ACM},
  year = {1984},
  volume = {27},
  pages = {349--350},
  number = {4},
  abstract = {We don't know where to GOTO if we don't know where we've COME FROM.
	This linguistic innovation lives up to all expectations},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/358027.358043},
  issn = {0001-0782},
  owner = {blerner},
  publisher = {ACM Press},
  timestamp = {2006.10.21}
}

@INPROCEEDINGS{Cooper2006,
  author = {Ezra Cooper and Sam Lindley and Philip Wadler and Jeremy Yallop},
  title = {Links: Web Programming Without Tiers},
  year = {2006},
  abstract = {Links is a programming language for web applications. Links generates
	code for all three tiers of a web application from a single source,
	compiling into JavaScript to run on the client and into SQL to run
	on the database. Links provides support for rich clients running
	in what has been dubbed `Ajax' style. Links programs are scalable
	in the sense that session state is preserved in the client rather
	than the server, in contrast to other approaches such as Java Servlets
	or PLT Scheme.},
  comment = {CSE590p},
  owner = {blerner},
  pdf = {Cooper2006.pdf},
  timestamp = {2006.10.11}
}

@BOOK{Cormen2001,
  title = {Introduction to Algorithms},
  publisher = {The MIT Press},
  year = {2001},
  author = {Thomas H. Cormen and Charles E. Leiserson and Ronald L. Rivest and
	Clifford Stein},
  pages = {1180},
  edition = {2},
  owner = {blerner},
  timestamp = {2006.12.03}
}

@INPROCEEDINGS{Cousot1977,
  author = {Patrick Cousot and Radhia Cousot and Patrick Cousot and Radhia Cousot},
  title = {Abstract Interpretation: {A} Unified Lattice Model for Static Analysis
	of Programs by Construction or Approximation of Fixpoints},
  booktitle = {Fourth ACM Symposium on Principles of Programming Language, Los Angeles},
  year = {1977},
  pages = {238--252},
  address = {New York, NY, USA},
  month = jan,
  publisher = {ACM Press, New York},
  abstract = {A program denotes computations in some universe of objects. Abstract
	interpretation of programs consists in using that denotation to describe
	computations in another universe of abstract objects, so that the
	results of abstract execution give some information on the actual
	computations. An intuitive example (which we borrow from Sintzoff
	[72]) is the rule of signs. The text -1515 * 17 may be understood
	to denote computations on the abstract universe {(+), (-), (±)} where
	the semantics of arithmetic operators is defined by the rule of signs.
	The abstract execution -1515 * 17 → -(+) * (+) → (-) * (+) → (-),
	proves that -1515 * 17 is a negative number. Abstract interpretation
	is concerned by a particular underlying structure of the usual universe
	of computations (the sign, in our example). It gives a summary of
	some facets of the actual executions of a program. In general this
	summary is simple to obtain but inaccurate (e.g. -1515 + 17 → -(+)
	+ (+) → (-) + (+) → (±)). Despite its fundamentally incomplete results
	abstract interpretation allows the programmer or the compiler to
	answer questions which do not need full knowledge of program executions
	or which tolerate an imprecise answer, (e.g. partial correctness
	proofs of programs ignoring the termination problems, type checking,
	program optimizations which are not carried in the absence of certainty
	about their feasibility, …).},
  comment = {CSE599F},
  doi = {http://doi.acm.org/10.1145/512950.512973},
  location = {Los Angeles, California},
  owner = {blerner},
  pdf = {Cousot1977.pdf},
  timestamp = {2006.03.16}
}

@INPROCEEDINGS{Cousot1978,
  author = {Patrick Cousot and Nicolas Halbwachs},
  title = {Automatic Discovery of Linear Restraints Among Variables of a Program},
  booktitle = {Conference Record of the Fifth Annual ACM SIGPLAN-SIGACT Symposium
	on Principles of Programming Languages},
  year = {1978},
  pages = {84--97},
  address = {Tucson, Arizona},
  month = oct # {~25},
  publisher = {ACM Press, New York, NY},
  abstract = {The model of abstract interpretation of programs developed by Cousot
	and Cousot [2nd ISOP, 1976], Cousot and Cousot [POPL 1977] and Cousot
	[PhD thesis 1978] is applied to the static determination of linear
	equality or inequality invariant relations among numerical variables
	of programs.},
  citeseerurl = {http://citeseer.ist.psu.edu/538553.html},
  comment = {CSE599F},
  owner = {blerner},
  pdf = {Cousot1978.pdf},
  rights = {unrestricted},
  timestamp = {2006.03.16}
}

@MISC{Chapel,
  author = {Cray},
  title = {Chapel},
  howpublished = {http://chapel.cs.washington.edu/},
  year = {2007},
  comment = {cse551 project},
  owner = {blerner},
  timestamp = {2007.04.30},
  url = {http://chapel.cs.washington.edu/}
}

@INPROCEEDINGS{Cutler2002,
  author = {Barbara Cutler and Julie Dorsey and Leonard McMillan and Matthias
	M{\"u}ller and Robert Jagnow},
  title = {A procedural approach to authoring solid models},
  booktitle = {SIGGRAPH '02: Proceedings of the 29th annual conference on Computer
	graphics and interactive techniques},
  year = {2002},
  pages = {302--311},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = { We present a procedural approach to authoring layered, solid models.
	Using a simple scripting language, we define the internal structure
	of a volume from one or more input meshes. Sculpting and simulation
	operators are applied within the context of the language to shape
	and modify the model. Our framework treats simulation as a modeling
	operator rather than simply as a tool for animation, thereby suggesting
	a new paradigm for modeling as well as a new level of abstraction
	for interacting with simulation environments.Capturing real-world
	effects with standard modeling techniques is extremely challenging.
	Our key contribution is a concise procedural approach for seamlessly
	building and modifying complex solid geometry. We present an implementation
	of our language using a flexible tetrahedral representation. We show
	a variety of complex objects modeled in our system using tools that
	interface with finite element method and particle system simulations.},
  doi = {http://doi.acm.org/10.1145/566570.566581},
  isbn = {1-58113-521-1},
  location = {San Antonio, Texas},
  owner = {blerner},
  pdf = {Cutler2002.pdf},
  timestamp = {2007.07.03}
}

@TECHREPORT{Dam1998,
  author = {Erik Dam and Martin Koch and Martin Lillholm},
  title = {Quaternions, Interpolation and Animation},
  institution = {University of Copenhagen},
  year = {1998},
  owner = {blerner},
  pdf = {Dam1998.pdf},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Damas1982,
  author = {Luis Damas and Robin Milner},
  title = {Principal type-schemes for functional programs},
  booktitle = {POPL '82: Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on
	Principles of programming languages},
  year = {1982},
  pages = {207--212},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/582153.582176},
  isbn = {0-89791-065-6},
  location = {Albuquerque, Mexico},
  owner = {blerner},
  pdf = {Damas1982.pdf},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Danskin1992,
  author = {John Danskin and Pat Hanrahan},
  title = {Fast algorithms for volume ray tracing},
  booktitle = {VVS '92: Proceedings of the 1992 workshop on Volume visualization},
  year = {1992},
  pages = {91--98},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/147130.147155},
  isbn = {0-89791-527-5},
  location = {Boston, Massachusetts, United States},
  owner = {blerner},
  pdf = {Danskin1992.pdf},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Das2002,
  author = {Manuvir Das and Sorin Lerner and Mark Seigle},
  title = {ESP: path-sensitive program verification in polynomial time},
  booktitle = {PLDI '02: Proceedings of the ACM SIGPLAN 2002 Conference on Programming
	language design and implementation},
  year = {2002},
  pages = {57--68},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {In this paper, we present a new algorithm for partial program verification
	that runs in polynomial time and space. We are interested in checking
	that a program satisfies a given temporal safety property. Our insight
	is that by accurately modeling only those branches in a program for
	which the property-related behavior differs along the arms of the
	branch, we can design an algorithm that is accurate enough to verify
	the program with respect to the given property, without paying the
	potentially exponential cost of full path-sensitive analysis.We have
	implemented this ``property simulation'' algorithm as part of a partial
	verification tool called ESP. We present the results of applying
	ESP to the problem of verifying the file I/O behavior of a version
	of the GNU C compiler (gcc, 140,000 LOC). We are able to prove that
	all of the 646 calls to .fprintf in the source code of gcc are guaranteed
	to print to valid, open files. Our results show that property simulation
	scales to large programs and is accurate enough to verify meaningful
	properties.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/512529.512538},
  isbn = {1-58113-463-0},
  location = {Berlin, Germany},
  owner = {blerner},
  pdf = {Das2002.pdf},
  timestamp = {2006.05.02}
}

@INPROCEEDINGS{Dean2004,
  author = {Jeffrey Dean and Sanjay Ghemawat},
  title = {{MapReduce}: Simplified Data Processing on Large Clusters},
  booktitle = {OSDI},
  year = {2004},
  abstract = {MapReduce is a programming model and an associated implementation
	for processing and generating large data sets. Users specify a map
	function that processes a key/value pair to generate a set of intermediate
	key/value pairs, and a reduce function that merges all intermediate
	values associated with the same intermediate key. Many real world
	tasks are expressible in this model, as shown in the paper.
	
	
	Programs written in this functional style are automatically parallelized
	and executed on a large cluster of commodity machines. The run-time
	system takes care of the details of partitioning the input data,
	scheduling the program's execution across a set of machines, handling
	machine failures, and managing the required inter-machine communication.
	This allows programmers without any experience with parallel and
	distributed systems to easily utilize the resources of a large distributed
	system.
	
	
	Our implementation of MapReduce runs on a large cluster of commodity
	machines and is highly scalable: a typical MapReduce computation
	processes many terabytes of data on thousands of machines. Programmers
	find the system easy to use: hundreds of MapReduce programs have
	been implemented and upwards of one thousand MapReduce jobs are executed
	on Google's clusters every day.},
  comment = {CSE590p, cse551 project},
  owner = {blerner},
  pdf = {Dean2004.pdf},
  timestamp = {2006.10.11},
  url = {http://labs.google.com/papers/mapreduce.html}
}

@INPROCEEDINGS{DeCarlo2003,
  author = {Doug DeCarlo and Adam Finkelstein and Szymon Rusinkiewicz and Anthony
	Santella},
  title = {Suggestive contours for conveying shape},
  booktitle = {SIGGRAPH '03: ACM SIGGRAPH 2003 Papers},
  year = {2003},
  pages = {848--855},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = { In this paper, we describe a non-photorealistic rendering system
	that conveys shape using lines. We go beyond contours and creases
	by developing a new type of line to draw: the suggestive contour.
	Suggestive contours are lines drawn on clearly visible parts of the
	surface, where a true contour would first appear with a minimal change
	in viewpoint. We provide two methods for calculating suggestive contours,
	including an algorithm that finds the zero crossings of the radial
	curvature. We show that suggestive contours can be drawn consistently
	with true contours, because they anticipate and extend them. We present
	a variety of results, arguing that these images convey shape more
	effectively than contour alone. },
  doi = {http://doi.acm.org/10.1145/1201775.882354},
  isbn = {1-58113-709-5},
  location = {San Diego, California},
  owner = {blerner},
  pdf = {DeCarlo2003.pdf},
  timestamp = {2007.07.03}
}

@TECHREPORT{Desbrun2000,
  author = {Mathieu Desbrun and Mark Meyer and Peter Schroder and Alan H. Barr},
  title = {Discrete differential-geometry operators in $n${D}},
  institution = {California Institute of Technology},
  year = {2000},
  owner = {blerner},
  pdf = {Desbrun2000.pdf},
  timestamp = {2007.07.02},
  url = {http://citeseer.ist.psu.edu/desbrun00discrete.html}
}

@INPROCEEDINGS{Despeyroux1995,
  author = {Jo{\"e}lle Despeyroux and Amy Felty and Andr\'e Hirschowitz},
  title = {Higher-Order Abstract Syntax in {Coq}},
  booktitle = {Proceedings of the International Conference on Typed Lambda Calculi
	and Applications},
  year = {1995},
  editor = {M. Dezani-Ciancaglini and G. Plotkin},
  volume = {902},
  series = {LNCS},
  pages = {124--138},
  address = {Edinburgh, Scotland},
  publisher = {Springer-Verlag},
  abstract = {The terms of the simply-typed lambda-calculus can be used to express
	the higher-order abstract syntax of objects such as logical formulas,
	proofs, and programs. Support for the manipulation of such objects
	is provided in several programming languages (e.g. lambdaProlog,
	Elf). Such languages also provide embedded implication, a tool which
	is widely used for expressing hypothetical judgments in natural deduction.
	In this paper, we show how a restricted form of second-order syntax
	and embedded implication can be used together with induction in the
	Coq Proof Development system. We specify typing rules and evaluation
	for a simple functional language containing only function abstraction
	and application, and we fully formalize a proof of type soundness
	in the system. One difficulty we encountered is that expressing the
	higher-order syntax of an object-language as an inductive type in
	Coq generates a class of terms that contains more than just those
	that directly represent objects in the language. We overcome this
	difficulty by defining a predicate in Coq that holds only for those
	terms that correspond to programs. WE use this predicate to express
	and prove the adequacy for our syntax.},
  citeseerurl = {http://citeseer.ist.psu.edu/34243},
  owner = {blerner},
  pdf = {Despeyroux1995.pdf},
  timestamp = {2006.02.02},
  url = {citeseer.ist.psu.edu/despeyroux95higherorder.html}
}

@INPROCEEDINGS{Dorsey2006,
  author = {Julie Dorsey and Pat Hanrahany},
  title = {Modeling and rendering of metallic patinas},
  booktitle = {SIGGRAPH '06: ACM SIGGRAPH 2006 Courses},
  year = {2006},
  pages = {2},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = { An important component that has been missing from image synthesis
	is the effect of weathering. In this paper, we present an approach
	for the modeling and rendering of one type of weathering--metallic
	patinas. A patina is a film or incrustation on a surface that is
	produced by the removal of material, the addition of material, or
	the chemical alteration of a surface. Oxidation, sulphidization,
	and painting are examples of phenomena that produce patinas.We represent
	a surface as a series of layers. Patinas are simulated with a collection
	of operators, such as ``coat,'' ``erode,'' and ``polish,'' which
	are applied to the layered structure. The development of patinas
	is modulated according to an object's geometry and local environmental
	factors. We introduce a technique to model the reflectance and transmission
	of light through the layered structure using the Kubelka-Munk model.
	This representation yields a model that can simulate many aspects
	of the time-dependent appearance of metals as they are exposed to
	the atmosphere or treated chemically. We demonstrate the approach
	with a collection of copper models. },
  doi = {http://doi.acm.org/10.1145/1185657.1185722},
  isbn = {1-59593-364-6},
  location = {Boston, Massachusetts},
  owner = {blerner},
  pdf = {Dorsey2006.pdf},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Dorsey1996,
  author = {Julie Dorsey and Hans K\ohling Pedersen and Pat Hanrahan},
  title = {Flow and changes in appearance},
  booktitle = {SIGGRAPH '96: Proceedings of the 23rd annual conference on Computer
	graphics and interactive techniques},
  year = {1996},
  pages = {411--420},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/237170.237280},
  isbn = {0-89791-746-4},
  owner = {blerner},
  pdf = {Dorsey1996.pdf},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Duggan1998,
  author = {Dominic Duggan},
  title = {Correct type explanation},
  booktitle = {Workshop on ML: ACM SIGPLAN, 1998},
  year = {1998},
  pages = {49--58},
  owner = {blerner},
  timestamp = {2006.05.29}
}

@ARTICLE{Duggan1996,
  author = {Dominic Duggan and Frederick Bent},
  title = {Explaining type inference},
  journal = {Science of Computer Programming},
  year = {1996},
  volume = {27},
  pages = {37--83},
  number = {1},
  month = jul,
  abstract = {Type inference is the compile-time process of reconstructing missing
	type information in a program based on the usage of its variables.
	ML and Haskell are two languages where this aspect of compilation
	has enjoyed some popularity, allowing type information to be omitted
	while static type checking is still performed. Type inference may
	be expected to have some application in the prototyping and scripting
	languages which are becoming increasingly popular. A difficulty with
	type inference is the confusing and sometimes counter-intuitive diagnostics
	produced by the type checker as a result of type errors. A modification
	of the Hindley-Milner type inference algorithm is presented, which
	allows the specific reasoning which led to a program variable having
	a particular type to be recorded for type explanation. This approach
	is close to the intuitive process used in practice for debugging
	type errors.},
  citeseerurl = {http://citeseer.ist.psu.edu/64258.html},
  owner = {blerner},
  pdf = {Duggan1996.pdf},
  timestamp = {2006.05.29}
}

@INPROCEEDINGS{Efros2001,
  author = {Alexei A. Efros and William T. Freeman},
  title = {Image quilting for texture synthesis and transfer},
  booktitle = {SIGGRAPH '01: Proceedings of the 28th annual conference on Computer
	graphics and interactive techniques},
  year = {2001},
  pages = {341--346},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We present a simple image-based method of generating novel visual
	appearance in which a new image is synthesized by stitching together
	small patches of existing images. We call this process image quilting.
	First, we use quilting as a fast and very simple texture synthesis
	algorithm which produces surprisingly good results for a wide range
	of textures. Second, we extend the algorithm to perform texture transfer
	— rendering an object with a texture taken from a different object.
	More generally, we demonstrate how an image can be re-rendered in
	the style of a different image. The method works directly on the
	images and does not require 3D information.},
  doi = {http://doi.acm.org/10.1145/383259.383296},
  isbn = {1-58113-374-X},
  owner = {blerner},
  pdf = {Efros2001.pdf},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Efros1999,
  author = {Alexei A. Efros and Thomas K. Leung},
  title = {Texture Synthesis by Non-Parametric Sampling},
  booktitle = {ICCV '99: Proceedings of the International Conference on Computer
	Vision-Volume 2},
  year = {1999},
  pages = {1033},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  abstract = { A non-parametric method for texture synthesis is proposed. The texture
	synthesis process grows a new image outward from an initial seed,
	one pixel at a time. A Markov random field model is assumed, and
	the conditional distribution of a pixel given all its neighbors synthesized
	so far is estimated by querying the sample image and finding all
	similar neighborhoods. The degree of randomness is controlled by
	a single perceptually intuitive parameter. The method aims at preserving
	as much local structure as possible and produces good results for
	a wide variety of synthetic and real-world textures.},
  doi = {http://dx.doi.org/10.1109/ICCV.1999.790383},
  isbn = {0-7695-0164-8},
  owner = {blerner},
  pdf = {Efros1999.pdf},
  timestamp = {2007.07.03}
}

@ARTICLE{Ellison2000,
  author = {Carl Ellison and Bruce Schneier},
  title = {Ten Risks of PKI: What You’re not Being Told about Public Key Infrastructure},
  journal = {Computer Security Journal},
  year = {2000},
  volume = {16},
  pages = {1--8},
  number = {1},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Ellison2000.pdf},
  timestamp = {2006.01.09},
  url = {http://www.schneier.com/paper-pki.pdf}
}

@INPROCEEDINGS{Erlingsson2006,
  author = {Ulfar Erlingsson and Martin Abadi and Michael Vrable and Mihai Budiu
	and George C. Necula},
  title = {XFI: Software Guards for System Address Spaces},
  booktitle = {OSDI},
  year = {2006},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Erlingsson2006.pdf},
  timestamp = {2006.10.11},
  url = {http://research.microsoft.com/research/sv/gleipnir/}
}

@INPROCEEDINGS{Farzan2007,
  author = {Azadeh Farzan and P. Madhusudan},
  title = {Causal Dataflow Analysis for Concurrent Programs},
  booktitle = {Tools and Algorithms for the Construction and Analysis of Systems},
  year = {2007},
  abstract = {We define a novel formulation of dataflow analysis for concurrent
	programs, where the flow of facts is along the causal dependencies
	of events. We capture the control flow of concurrent programs using
	a Petri net (called the control net), develop algorithms based on
	partially-ordered unfoldings, and report experimental results for
	solving causal dataflow analysis problems. For the subclass of distributive
	problems, we prove that complexity of checking data flow is linear
	in the number of facts and in the unfolding of the control net.},
  comment = {atomic infoflow},
  owner = {blerner},
  pdf = {Farzan2007.pdf},
  timestamp = {2007.08.06}
}

@INPROCEEDINGS{Farzan2006,
  author = {Azadeh Farzan and P. Madhusudan},
  title = {Causal Atomicity},
  booktitle = {Computer Aided Verification},
  year = {2006},
  pages = {315--328},
  abstract = {Atomicity is an important generic specification that assures that
	a programmer can pretend blocks occur sequentially in any execution.
	We define a notion of atomicity based on causality. We model the
	control flow of a program with threads using a Petri net that naturally
	abstracts data, and faithfully captures the independence and interaction
	between threads. The causality between events in the partially ordered
	executions of the Petri net is used to define the notion of causal
	atomicity. We show that causal atomicity is a robust notion that
	many correct programs adopt, and show how we can effectively check
	causal atomicity using Petri net tools based on unfoldings, which
	exploit the concurrency in the net to yield automatic partial-order
	reduction in the state-space.},
  comment = {atomic infoflow},
  doi = {http://dx.doi.org/10.1007/11817963_30},
  owner = {blerner},
  pdf = {Farzan2006.pdf},
  timestamp = {2007.06.19}
}

@INPROCEEDINGS{Feng2005,
  author = {Xinyu Feng and Zhong Shao},
  title = {Modular verification of concurrent assembly code with dynamic thread
	creation and termination},
  booktitle = {ICFP '05: Proceedings of the tenth ACM SIGPLAN international conference
	on Functional programming},
  year = {2005},
  pages = {254--267},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Proof-carrying code (PCC) is a general framework that can, in principle,
	verify safety properties of arbitrary machine-language programs.
	Existing PCC systems and typed assembly languages, however, can only
	handle sequential programs. This severely limits their applicability
	since many real-world systems use some form of concurrency in their
	core software. Recently Yu and Shao proposed a logic-based ``type''
	system for verifying concurrent assembly programs. Their thread model,
	however, is rather restrictive in that no threads can be created
	or terminated dynamically and no sharing of code is allowed between
	threads. In this paper, we present a new formal framework for verifying
	general multi-threaded assembly code with unbounded dynamic thread
	creation and termination as well as sharing of code between threads.
	We adapt and generalize the rely-guarantee methodology to the assembly
	level and show how to specify the semantics of thread ``fork'' with
	argument passing. In particular, we allow threads to have different
	assumptions and guarantees at different stages of their lifetime
	so they can coexist with the dynamically changing thread environment.
	Our work provides a foundation for certifying realistic multi-threaded
	programs and makes an important advance toward generating proof-carrying
	concurrent code.},
  comment = {CS428},
  doi = {http://doi.acm.org/10.1145/1086365.1086399},
  isbn = {1-59593-064-7},
  location = {Tallinn, Estonia},
  owner = {blerner},
  pdf = {Feng2005.pdf},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Field2005,
  author = {John Field and Carlos A. Varela},
  title = {Transactors: a programming model for maintaining globally consistent
	distributed state in unreliable environments},
  booktitle = {POPL '05: Proceedings of the 32nd ACM SIGPLAN-SIGACT symposium on
	Principles of programming languages},
  year = {2005},
  pages = {195--208},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We introduce transactors, a fault-tolerant programming model for composing
	loosely-coupled distributed components running in an unreliable environment
	such as the internet into systems that reliably maintain globally
	consistent distributed state. The transactor model incorporates certain
	elements of traditional transaction processing, but allows these
	elements to be composed in different ways without the need for central
	coordination, thus facilitating the study of distributed fault-tolerance
	from a semantic point of view. We formalize our approach via the
	τ-calculus, an extended lambda-calculus based on the actor model,
	and illustrate its usage through a number of examples. The τ-calculus
	incorporates constructs which distributed processes can use to create
	globally-consistent checkpoints. We provide an operational semantics
	for the τ-calculus, and formalize the following safety and liveness
	properties: first, we show that globally-consistent checkpoints have
	equivalent execution traces without any node failures or application-level
	failures, and second, we show that it is possible to reach globally-consistent
	checkpoints provided that there is some bounded failure-free interval
	during which checkpointing can occur.},
  doi = {http://doi.acm.org/10.1145/1040305.1040322},
  isbn = {1-58113-830-X},
  location = {Long Beach, California, USA},
  owner = {blerner},
  pdf = {Field2005.pdf},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Fisher2001,
  author = {Kathleen Fisher and Riccardo Pucella and John Reppy},
  title = {A framework for interoperability},
  booktitle = {BABEL'01 --- First workshop on multi-language infrastructure and
	interoperability},
  year = {2001},
  month = sep,
  abstract = {Practical implementations of high-level languages must provide access
	to libraries and system services that have APIs specified in a low-level
	language (usually C). An important characteristic of such mechanisms
	is the foreign-interface policy that defines how to bridge the semantic
	gap between the high-level language and C. For example, IDL-based
	tools generate code to marshal data into and out of the high-level
	representation according to user annotations. The design space of
	foreign-interface policies is large and there are pros and cons to
	each approach. Rather than commit to a particular policy, we choose
	to focus on the problem of supporting a gamut of interoperability
	policies. In this paper, we describe a framework for language interoperability
	that is expressive enough to support very efficient implementations
	of a wide range of different foreign-interface policies. We describe
	two tools that implement substantially different policies on top
	of our framework and present benchmarks that demonstrate their efficiency.},
  comment = {CSE590p},
  owner = {blerner},
  pdf = {Fisher2001.pdf},
  timestamp = {2005.11.11},
  url = {http://arxiv.org/abs/cs.PL/0405084}
}

@ARTICLE{Flanagan2006,
  author = {Cormac Flanagan},
  title = {Hybrid Type Checking},
  journal = {SIGPLAN Not.},
  year = {2006},
  volume = {41},
  pages = {245--256},
  number = {1},
  abstract = {Traditional static type systems are very effective for verifying basic
	interface specifications, but are somewhat limited in the kinds specifications
	they support. Dynamically-checked contracts can enforce more precise
	specifications, but these are not checked until run time, resulting
	in incomplete detection of defects.Hybrid type checking is a synthesis
	of these two approaches that enforces precise interface specifications,
	via static analysis where possible, but also via dynamic checks where
	necessary. This paper explores the key ideas and implications of
	hybrid type checking, in the context of the simply-typed λ-calculus
	with arbitrary refinements of base types.},
  address = {New York, NY, USA},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1111320.1111059},
  issn = {0362-1340},
  owner = {blerner},
  pdf = {Flanagan2006.pdf},
  publisher = {ACM Press},
  timestamp = {2006.01.09}
}

@INPROCEEDINGS{Flanagan2005,
  author = {Cormac Flanagan and Stephen N. Freund and Marina Lifshin},
  title = {Type inference for atomicity},
  booktitle = {TLDI '05: Proceedings of the 2005 ACM SIGPLAN international workshop
	on Types in languages design and implementation},
  year = {2005},
  pages = {47--58},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Atomicity is a fundamental correctness property in multithreaded programs.
	This paper presents an algorithm for verifying atomicity via type
	inference. The underlying type system supports guarded, write-guarded,
	and unguarded fields, as well as thread-local data, parameterized
	classes and methods, and protected locks. We describe an implementation
	of this algorithm for Java and discuss its performance and usability
	on benchmarks totaling sixty thousand lines of code.},
  comment = {atomic infoflow},
  doi = {http://doi.acm.org/10.1145/1040294.1040299},
  isbn = {1-58113-999-3},
  location = {Long Beach, California, USA},
  owner = {blerner},
  pdf = {Flanagan2005.pdf},
  timestamp = {2007.05.09}
}

@ARTICLE{Flanagan2005a,
  author = {Cormac Flanagan and Stephen N. Freund and Shaz Qadeer},
  title = {Exploiting purity for atomicity},
  journal = {Software Engineering, IEEE Transactions on},
  year = {2005},
  volume = {31},
  pages = {275--291},
  number = {4},
  abstract = {Multithreaded programs often exhibit erroneous behavior because of
	unintended interactions between concurrent threads. This paper focuses
	on the noninterference property of atomicity. A procedure is atomic
	if, for every execution, there is an equivalent serial execution
	in which the actions of the atomic procedure are not interleaved
	with actions of other threads. This key property makes atomic procedures
	amenable to sequential reasoning techniques, which significantly
	facilitates subsequent validation activities such as code inspection
	and testing. Several existing tools verify atomicity by using commutativity
	of actions to show that every execution reduces to a corresponding
	serial execution. However, experiments with these tools have highlighted
	a number of interesting procedures that, while intuitively atomic,
	are not reducible. In this paper, we exploit the notion of pure code
	blocks to verify the atomicity of such irreducible procedures. If
	a pure block terminates normally, then its evaluation does not change
	the program state and, hence, these evaluation steps can be removed
	from the program trace before reduction. We develop a static typed-based
	analysis for atomicity based on this insight, and we illustrate this
	analysis on a number of interesting examples that could not be verified
	using earlier tools based purely on reduction.},
  comment = {atomic infoflow},
  doi = {http://dx.doi.org/10.1109/TSE.2005.47},
  issn = {0098-5589},
  keywords = {multi-threading, program diagnostics, program testing, reasoning about
	programs, software tools, concurrent programs, multithreaded programs,
	noninterference atomicity property, program trace, pure code blocks,
	sequential reasoning techniques, static typed-based analysis, Index
	Terms- Atomicity, concurrent programs., purity, reduction},
  owner = {blerner},
  pdf = {Flanagan2005a.pdf},
  timestamp = {2007.05.11}
}

@INPROCEEDINGS{Flanagan2004,
  author = {Cormac Flanagan and Stephen N. Freund and Shaz Qadeer},
  title = {Exploiting purity for atomicity},
  booktitle = {ISSTA '04: Proceedings of the 2004 ACM SIGSOFT international symposium
	on Software testing and analysis},
  year = {2004},
  pages = {221--231},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {The notion that certain procedures are atomic is a fundamental correctness
	property of many multithreaded software systems. A procedure is atomic
	if for every execution there is an equivalent serial execution in
	which the actions performed by any thread while executing the atomic
	procedure are not interleaved with actions of other threads. Several
	existing tools verify atomicity by using commutativity of actions
	to show that every execution reduces to a corresponding serial execution.
	However, experiments with these tools have highlighted a number of
	interesting procedures that, while intuitively atomic, are not reducible.In
	this paper, we exploit the notion of pure code blocks to verify the
	atomicity of such irreducible procedures. If a pure block terminates
	normally, then its evaluation does not change the program state,
	and hence these evaluation steps can be removed from the program
	trace before reduction. We develop a static analysis for atomicity
	based on this insight, and we illustrate this analysis on a number
	of interesting examples that could not be verified using earlier
	tools based purely on reduction. The techniques developed in this
	paper may also be applicable in other approaches for verifying atomicity,
	such as model checking and dynamic analysis.},
  comment = {atomic infoflow},
  doi = {http://doi.acm.org/10.1145/1007512.1007543},
  isbn = {1-58113-820-2},
  location = {Boston, Massachusetts, USA},
  owner = {blerner},
  pdf = {Flanagan2004.pdf},
  timestamp = {2007.01.25}
}

@INPROCEEDINGS{Flanagan2003,
  author = {Cormac Flanagan and Shaz Qadeer},
  title = {A type and effect system for atomicity},
  booktitle = {PLDI '03: Proceedings of the ACM SIGPLAN 2003 conference on Programming
	language design and implementation},
  year = {2003},
  pages = {338--349},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Ensuring the correctness of multithreaded programs is difficult, due
	to the potential for unexpected and nondeterministic interactions
	between threads. Previous work addressed this problem by devising
	tools for detecting race conditions, a situation where two threads
	simultaneously access the same data variable, and at least one of
	the accesses is a write. However, verifying the absence of such simultaneous-access
	race conditions is neither necessary nor sufficient to ensure the
	absence of errors due to unexpected thread interactions.We propose
	that a stronger non-interference property is required, namely atomicity.
	Atomic methods can be assumed to execute serially, without interleaved
	steps of other threads. Thus, atomic methods are amenable to sequential
	reasoning techniques, which significantly simplifies both formal
	and informal reasoning about program correctness.This paper presents
	a type system for specifying and verifying the atomicity of methods
	in multithreaded Java programs. The atomic type system is a synthesis
	of Lipton's theory of reduction and type systems for race detection.We
	have implemented this atomic type system for Java and used it to
	check a variety of standard Java library classes. The type checker
	uncovered subtle atomicity violations in classes such as <tt>java.lang.String</tt>
	and <tt>java.lang.String-Buffer</tt> that cause crashes under certain
	thread interleavings.This paper proposes that a stronger non-interference
	property is required, namely atomicity, and presents a type system
	for verifying the atomicity of methods in multithreaded Java programs.
	Methods in a class can be annotated with the keyword <tt>atomic</tt>.
	Clients of a well-typed class can then assume that each atomic method
	is executed in one step, thus significantly simplifying both formal
	and informal reasoning about the client's correctness.},
  comment = {atomic infoflow},
  doi = {http://doi.acm.org/10.1145/781131.781169},
  isbn = {1-58113-662-5},
  location = {San Diego, California, USA},
  owner = {blerner},
  pdf = {Flanagan2003.pdf},
  timestamp = {2007.01.25}
}

@INPROCEEDINGS{Flanagan2003a,
  author = {Cormac Flanagan and Shaz Qadeer},
  title = {Types for atomicity},
  booktitle = {TLDI '03: Proceedings of the 2003 ACM SIGPLAN international workshop
	on Types in languages design and implementation},
  year = {2003},
  pages = {1--12},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Ensuring the correctness of multithreaded programs is difficult, due
	to the potential for unexpected and nondeterministic interactions,
	between threads. Previous work addressed this problem by devising
	tools for detecting race conditions, a situation where two threads
	simultaneously access the same data variable, and at least one of
	the accesses is a write. Unfortunately, verifying the absence of
	such simultaneous-access race conditions is neither necessary nor
	sufficient to ensure the absence of errors due to unexpected thread
	interactions.We propose that a stronger non-interference property
	is required, namely the atomicity of code blocks, and we present
	a type system for specifying and verifying such atomicity properties.
	The type system allows statement blocks and functions to be annotated
	with the keyword atomic. If the program type checks, then the type
	system guarantees that for any arbitrarily-interleaved program execution,
	there is a corresponding execution with equivalent behavior in which
	the instructions of each atomic block executed by a thread are not
	interleaved with instructions from other threads. This property allows
	programmers to reason about the behavior of well-typed programs at
	a higher level of granularity, where each atomic block is executed
	``in one step'', thus signi .cantly simplifying both formal and informal
	reasoning.Our type system is sufficient to verify a number of interesting
	examples. For example,it can prove that many methods of java.util.
	Vector are atomic, even though some methods have benign race conditions,
	and would be rejected by earlier type systems for race detection.},
  comment = {atomic infoflow},
  doi = {http://doi.acm.org/10.1145/604174.604176},
  isbn = {1-58113-649-8},
  location = {New Orleans, Louisiana, USA},
  owner = {blerner},
  pdf = {Flanagan2003a.pdf},
  timestamp = {2007.05.09}
}

@INPROCEEDINGS{Floyd1967,
  author = {Robert Floyd},
  title = {Assigning Meanings to Programs},
  booktitle = {Mathematical aspects of computer science: Proc. American Mathematics
	Soc. symposia},
  year = {1967},
  editor = {J. T. Schwartz},
  volume = {19},
  pages = {19--31},
  address = {Providence RI},
  publisher = {American Mathematical Society},
  comment = {CS428},
  owner = {blerner},
  pdf = {Floyd1967.pdf},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Ford2006,
  author = {Bryan Ford and Jacob Strauss and Chris Lesniewski-Laas and Sean Rhea
	and Frans Kaashoek and Robert Morris},
  title = {Persistent Personal Names for Globally Connected Mobile Devices},
  booktitle = {OSDI},
  year = {2006},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Ford2006.pdf},
  timestamp = {2006.10.11},
  url = {http://pdos.csail.mit.edu/papers/uia:osdi06.pdf#search=%22Persistent%20Personal%20Names%20for%20Globally%20Connected%20Mobile%20Devices%22}
}

@INCOLLECTION{Fortune1997,
  author = {Steven Fortune},
  title = {Voronoi diagrams and Delaunay triangulations},
  booktitle = {Handbook of discrete and computational geometry},
  publisher = {CRC Press, Inc.},
  year = {1997},
  editor = {Jacob E. Goodman and Joseph O'Rourke},
  pages = {377--388},
  address = {Boca Raton, FL, USA},
  isbn = {0-8493-8524-5},
  owner = {blerner},
  pdf = {Fortune1997.pdf},
  timestamp = {2007.07.02}
}

@ARTICLE{Foster1996,
  author = {Nick Foster and Dimitri Metaxas},
  title = {Realistic Animation of Liquids},
  journal = {Graphical models and image processing: GMIP},
  year = {1996},
  volume = {58},
  pages = {471--483},
  number = {5},
  owner = {blerner},
  pdf = {Foster1996.pdf},
  timestamp = {2007.07.02},
  url = {http://citeseer.ist.psu.edu/foster95realistic.html}
}

@INPROCEEDINGS{Fox1997,
  author = {Armando Fox and Steven D. Gribble and Yatin Chawathe and Eric A.
	Brewer and Paul Gauthier},
  title = {Cluster-based scalable network services},
  booktitle = {SOSP '97: Proceedings of the sixteenth ACM symposium on Operating
	systems principles},
  year = {1997},
  pages = {78--91},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {A study of the effects of adding two scan primitives as unit-time
	primitives to PRAM (parallel random access machine) models is presented.
	It is shown that the primitives improve the asymptotic running time
	of many algorithms by an O(log n) factor, greatly simplifying the
	description of many algorithms, and are significantly easier to implement
	than memory references. It is argued that the algorithm designer
	should feel free to use these operations as if they were as cheap
	as a memory reference. The author describes five algorithms that
	clearly illustrate how the scan primitives can be used in algorithm
	design: a radix-sort algorithm, a quicksort algorithm, a minimum-spanning-tree
	algorithm, a line-drawing algorithm, and a merging algorithm. These
	all run on an EREW (exclusive read, exclusive write) PRAM with the
	addition of two scan primitives and are either simpler or more efficient
	than their pure PRAM counterparts. The scan primitives have been
	implemented in microcode on the Connection Machine system, are available
	in PARIS (the parallel instruction set of the machine).},
  comment = {cse551 project},
  doi = {http://doi.acm.org/10.1145/268998.266662},
  isbn = {0-89791-916-5},
  location = {Saint Malo, France},
  owner = {blerner},
  pdf = {Fox1997.pdf},
  timestamp = {2007.04.30}
}

@INPROCEEDINGS{Furr2005,
  author = {Michael Furr and Jeffrey S. Foster},
  title = {Checking type safety of foreign function calls},
  booktitle = {PLDI '05: Proceedings of the 2005 ACM SIGPLAN conference on Programming
	language design and implementation},
  year = {2005},
  pages = {62--72},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We present a multi-lingual type inference system for checking type
	safety across a foreign function interface. The goal of our system
	is to prevent foreign function calls from introducing type and memory
	safety violations into an otherwise safe language. Our system targets
	OCaml's FFI to C, which is relatively lightweight and illustrates
	some interesting challenges in multi-lingual type inference. The
	type language in our system embeds OCaml types in C types and vice-versa,
	which allows us to track type information accurately even through
	the foreign language, where the original types are lost. Our system
	uses representational types that can model multiple OCaml types,
	because C programs can observe that many OCaml types have the same
	physical representation. Furthermore, because C has a low-level view
	of OCaml data, our inference system includes a dataflow analysis
	to track memory offsets and tag information. Finally, our type system
	includes garbage collection information to ensure that pointers from
	the FFI to the OCaml heap are tracked properly. We have implemented
	our inference system and applied it to a small set of benchmarks.
	Our results show that programmers do misuse these interfaces, and
	our implementation has found several bugs and questionable coding
	practices in our benchmarks.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1065010.1065019},
  isbn = {1-59593-056-6},
  location = {Chicago, IL, USA},
  owner = {blerner},
  pdf = {Furr2005.pdf},
  timestamp = {2005.11.11}
}

@INPROCEEDINGS{Gandhe1996,
  author = {Milind Gandhe and G. Venkatesh and Amitabha Sanyal},
  title = {Correcting Errors in the Curry System},
  booktitle = {Proceedings of the 16th Conference on Foundations of Software Technology
	and Theoretical Computer Science},
  year = {1996},
  pages = {347--358},
  address = {London, UK},
  publisher = {Springer-Verlag},
  isbn = {3-540-62034-6},
  owner = {blerner},
  timestamp = {2006.04.03},
  url = {http://portal.acm.org/citation.cfm?id=646834.708048&dl=GUIDE&dl=ACM}
}

@MISC{Garrigue2003,
  author = {Jacques Garrigue},
  title = {Relaxing the value restriction},
  year = {2003},
  abstract = {Restricting polymorphism to values is now the standard way to obtain
	soundness in ML-like programming languages with imperative features.
	While this solution has undeniable advantages over previous approaches,
	it forbids polymorphism in many cases where it would be sound. We
	use a subtyping based approach to recover part of this lost polymorphism,
	without changing the type algebra itself, and this has significant
	applications.},
  citeseerurl = {http://citeseer.ist.psu.edu/garrigue03relaxing.html},
  owner = {blerner},
  pdf = {Garrigue2003.pdf},
  text = {Jacques Garrigue. Relaxing the value restriction. http://wwwfun.kurims.
	kyoto-u.ac.jp/~garrigue/papers/, 2003.},
  timestamp = {2006.12.10}
}

@ARTICLE{Gemert1989,
  author = {M. J. C. Van Gemert and Steven L. Jacques and H. J. C. M. Sterenborg
	and W. M. Star},
  title = {Skin optics},
  journal = {IEEE Transactions on Biomedical Engineering},
  year = {1989},
  volume = {36},
  pages = {1146-1154},
  number = {12},
  month = dec,
  abstract = {Quantitative dosimetry in the treatment of skin disorders with (laser)
	light requires information on propagation of light in the skin related
	to the optical properties of the individual skin layers. This involves
	the solution of the integro-differential equation of radiative transfer
	in a model representing skin geometry, as well as experimental methods
	to determine the optical properties of each skin layer. These activities
	are unified under the name skin optics. This paper first reviews
	the current status of tissue optics, distinguishing between the cases
	of: dominant absorption, dominant scattering, and scattering about
	equal to absorption. Then, previously published data as well as some
	current unpublished data on (human) stratum corneum, epidermis and
	dermis, have been collected andlor (re)analyzed in terms of absorption
	coefficient, scattering coefficient, and anisotropy factor of scattering.
	The results are that the individual skin layers show strongly forward
	scattering (anisotropy factors between 0.7 and 0.9). The absorption
	and scattering data show that for all wavelengths considered scattering
	is much more important than absorption. Under such circumstances,
	solutions to the transport equation for a multilayer skin model and
	finite beam laser irradiation are currently not yet available. Hence,
	any quantitative dosimetry for skin treated with (laser) light is
	currently lacking.},
  booktitle = {IEEE Transactions on Biomedical Engineering},
  doi = {http://dx.doi.org/10.1109/10.42108},
  owner = {blerner},
  pdf = {Gemert1989.pdf},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Ghemawat2003,
  author = {Sanjay Ghemawat and Howard Gobioff and Shun-Tak Leung},
  title = {The {Google} file system},
  booktitle = {SOSP '03: Proceedings of the nineteenth ACM symposium on Operating
	systems principles},
  year = {2003},
  editor = {C\'ecile Roisin and Ethan V. Munson and Christine Vanoirbeek},
  pages = {29--43},
  address = {New York, NY, USA},
  month = oct,
  publisher = {ACM Press},
  abstract = {We have designed and implemented the Google File System, a scalable
	distributed file system for large distributed data-intensive applications.
	It provides fault tolerance while running on inexpensive commodity
	hardware, and it delivers high aggregate performance to a large number
	of clients. While sharing many of the same goals as previous distributed
	file systems, ourdesign has been driven by observations of our application
	workloads and technological environment, both current and anticipated,
	that reflect a marked departure from some earlier file system assumptions.
	This has led us to re-examine traditional choices and explore radically
	different design points. 
	
	
	The file system has successfully met our storage needs. It is widely
	deployed within Google as the storage platform for the generation
	and processing of data used by our service as well as research and
	development efforts that require large data sets. The largest cluster
	to date provides hundreds of terabytes of storage across thousands
	of disks on over a thousand machines, and it is concurrently accessed
	by hundreds of clients.
	
	
	In this paper, we present file system interface extensions designed
	to support distributed applications, discuss many aspects of our
	design, and report measurements from both micro-benchmarks and real
	world use.},
  comment = {cse551 project},
  doi = {http://doi.acm.org/10.1145/945445.945450},
  isbn = {1-58113-757-5},
  location = {Bolton Landing, NY, USA},
  owner = {blerner},
  pdf = {Ghemawat2003.pdf},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Goldsmith2005,
  author = {Simon Goldsmith and Robert O'Callahan and Alex Aiken},
  title = {Relational queries over program traces},
  booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference
	on Object oriented programming systems languages and applications},
  year = {2005},
  pages = {385--402},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Instrumenting programs with code to monitor runtime behavior is a
	common technique for profiling and debugging. In practice, instrumentation
	is either inserted manually by programmers, or automatically by specialized
	tools that monitor particular properties. We propose Program Trace
	Query Language (PTQL), a language based on relational queries over
	program traces, in which programmers can write expressive, declarative
	queries about program behavior. We also describe our compiler, Partiqle.
	Given a PTQL query and a Java program, Partiqle instruments the program
	to execute the query on-line. We apply several PTQL queries to a
	set of benchmark programs, including the Apache Tomcat Web server.
	Our queries reveal significant performance bugs in the jack SpecJVM98
	benchmark, in Tomcat, and in the IBM Java class library, as well
	as some correct though uncomfortably subtle code in the Xerces XML
	parser. We present performance measurements demonstrating that our
	prototype system has usable performance.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1094811.1094841},
  isbn = {1-59593-031-0},
  location = {San Diego, CA, USA},
  owner = {blerner},
  pdf = {Goldsmith2005.pdf},
  timestamp = {2005.11.11}
}

@UNPUBLISHED{Gonthier2005,
  author = {Georges Gonthier},
  title = {A Computer-checked proof of the Four Color Theorem},
  month = feb,
  year = {2005},
  comment = {CS428},
  owner = {blerner},
  pdf = {Gonthier2005.pdf},
  timestamp = {2005.11.12},
  url = {http://research.microsoft.com/~gonthier/4colproof.pdf}
}

@INPROCEEDINGS{Gottschalk1996,
  author = {S. Gottschalk and M. C. Lin and D. Manocha},
  title = {OBBTree: a hierarchical structure for rapid interference detection},
  booktitle = {SIGGRAPH '96: Proceedings of the 23rd annual conference on Computer
	graphics and interactive techniques},
  year = {1996},
  pages = {171--180},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/237170.237244},
  isbn = {0-89791-746-4},
  owner = {blerner},
  pdf = {Gottschalk1996.pdf},
  timestamp = {2007.07.02}
}

@INPROCEEDINGS{Graf1997,
  author = {Susanne Graf and Hassen Saidi},
  title = {Construction of abstract state graphs with {PVS}},
  booktitle = {Proc. 9th {INternational} Conference on Computer Aided Verification
	({CAV}'97)},
  year = {1997},
  editor = {O. Grumberg},
  volume = {1254},
  pages = {72--83},
  month = feb # {~26},
  publisher = {Springer Verlag},
  abstract = {We describe in this paper a method based on abstract interpretation
	which, from a theoretical point of view, is similar to the splitting
	methods proposed in [DGG93, Dam96] but the weaker abstract transition
	relation we use, allows us to construct automatically abstract state
	graphs paying a reasonable price. We consider a particular set of
	abstract states: the set of the monomials on a set of state predicates
	' 1 ; :::; ' ` . The successor of an abstract state m for a transition
	{\o} of the program is the least monomial satisfied by all successors
	via {\o} of concrete states satisfying m. This successor m 0 can
	be determined exactly if for each predicate ' i it can be determined
	if ' i or :' i is a postcondition of m for {\o} . In order to do
	this, we use the Pvs theorem prover [SOR93] and our Pvs-interface
	defined in [GS96]. If the tactic used for the proof of the verification
	conditions is not powerful enough, only an upper approximation of
	the abstract successor m is constructed. This a...},
  citeseerurl = {http://citeseer.ist.psu.edu/210287.html},
  comment = {CSE599F},
  owner = {blerner},
  pdf = {Graf1997.pdf},
  timestamp = {2006.03.16}
}

@INPROCEEDINGS{Gray2005,
  author = {Kathryn E. Gray and Robert Bruce Findler and Matthew Flatt},
  title = {Fine-grained interoperability through mirrors and contracts},
  booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference
	on Object oriented programming systems languages and applications},
  year = {2005},
  pages = {231--245},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {As a value flows across the boundary between interoperating languages,
	it must be checked and converted to fit the types and representations
	of the target language. For simple forms of data, the checks and
	coercions can be immediate; for higher order data, such as functions
	and objects, some must be delayed until the value is used in a particular
	way. Typically, these coercions and checks are implemented by an
	ad-hoc mixture of wrappers, reflection, and dynamic predicates. We
	observe that 1) the wrapper and reflection operations fit the profile
	of mirrors, 2) the checks correspond to contracts, and 3) the timing
	and shape of mirror operations coincide with the timing and shape
	of contract operations. Based on these insights, we present a new
	model of interoperability that builds on the ideas of mirrors and
	contracts, and we describe an interoperable implementation of Java
	and Scheme that is guided by the model.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1094811.1094830},
  isbn = {1-59593-031-0},
  location = {San Diego, CA, USA},
  owner = {blerner},
  pdf = {Gray2005.pdf},
  timestamp = {2006.01.09}
}

@INPROCEEDINGS{Gribble2000,
  author = {Steven D. Gribble and Eric A. Brewer and Joseph M. Hellerstein and
	David E. Culler},
  title = {Scalable, Distributed Data Structures for Internet Service Construction.},
  booktitle = {OSDI},
  year = {2000},
  pages = {319-332},
  comment = {cse551 project},
  owner = {blerner},
  pdf = {Gribble2000.pdf},
  timestamp = {2007.04.30},
  url = {http://www.cs.washington.edu/homes/gribble/rw/papers/index.html}
}

@INPROCEEDINGS{Grimm1995,
  author = {Cindy Grimm and John Hughes},
  title = {Smooth Iso-Surface Approximation},
  booktitle = {Implicit Surfaces},
  year = {1995},
  pages = {57--77},
  month = {June},
  note = {Fitting S-patches to implicit surfaces},
  owner = {blerner},
  pdf = {Grimm1995.pdf},
  timestamp = {2007.07.02}
}

@ARTICLE{Grove2001,
  author = {David Grove and Craig Chambers},
  title = {A framework for call graph construction algorithms},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {2001},
  volume = {23},
  pages = {685--746},
  number = {6},
  abstract = {A large number of call graph construction algorithms for object-oriented
	and functional languages have been proposed, each embodying different
	tradeoffs between analysis cost and call graph precision. In this
	article we present a unifying framework for understanding call graph
	construction algorithms and an empirical comparison of a representative
	set of algorithms. We first present a general parameterized algorithm
	that encompasses many well-known and novel call graph construction
	algorithms. We have implemented this general algorithm in the Vortex
	compiler infrastructure, a mature, multilanguage, optimizing compiler.
	The Vortex implementation provides a ``level playing field'' for
	meaningful cross-algorithm performance comparisons. The costs and
	benefits of a number of call graph construction algorithms are empirically
	assessed by applying their Vortex implementation to a suite of sizeable
	(5,000 to 50,000 lines of code) Cecil and Java programs. For many
	of these applications, interprocedural analysis enabled substantial
	speed-ups over an already highly optimized baseline. Furthermore,
	a significant fraction of these speed-ups can be obtained through
	the use of a scalable, near-linear time call graph construction algorithm.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/506315.506316},
  issn = {0164-0925},
  owner = {blerner},
  pdf = {Grove2001.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@ARTICLE{Haack2004,
  author = {Christian Haack and J. B. Wells},
  title = {Type error slicing in implicitly typed higher-order languages},
  journal = {Sci. Comput. Program.},
  year = {2004},
  volume = {50},
  pages = {189--224},
  number = {1-3},
  abstract = {Previous methods have generally identified the location of a type
	error as a particular program point or the program subtree rooted
	at that point. We present a new approach that identifies the location
	of a type error as a set of program points (a slice) all of which
	are necessary for the type error. We identify the criteria of completeness
	and minimality for type error slices. We discuss the advantages of
	complete and minimal type error slices over previous methods of presenting
	type errors. We present and prove the correctness of algorithms for
	finding complete and minimal type error slices for implicitly typed
	higher-order languages like Standard ML.},
  address = {Amsterdam, The Netherlands, The Netherlands},
  doi = {http://dx.doi.org/10.1016/j.scico.2004.01.004},
  issn = {0167-6423},
  owner = {blerner},
  pdf = {Haack2004.pdf},
  publisher = {Elsevier North-Holland, Inc.},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Hallgren2005,
  author = {Thomas Hallgren and Mark P. Jones and Rebekah Leslie and Andrew Tolmach},
  title = {A principled approach to operating system construction in Haskell},
  booktitle = {ICFP '05: Proceedings of the tenth ACM SIGPLAN international conference
	on Functional programming},
  year = {2005},
  pages = {116--128},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We describe a monadic interface to low-level hardware features that
	is a suitable basis for building operating systems in Haskell. The
	interface includes primitives for controlling memory management hardware,
	user-mode process execution, and low-level device I/O. The interface
	enforces memory safety in nearly all circumstances. Its behavior
	is specified in part by formal assertions written in a programming
	logic called P-Logic. The interface has been implemented on bare
	IA32 hardware using the Glasgow Haskell Compiler (GHC) runtime system.
	We show how a variety of simple O/S kernels can be constructed on
	top of the interface, including a simple separation kernel and a
	demonstration system in which the kernel, window system, and all
	device drivers are written in Haskell.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1086365.1086380},
  isbn = {1-59593-064-7},
  location = {Tallinn, Estonia},
  owner = {blerner},
  pdf = {Hallgren2005.pdf},
  timestamp = {2006.05.02}
}

@ARTICLE{Hamid2003,
  author = {Nadeem A. Hamid and Zhong Shao and Valery Trifonov and Stefan Monnier
	and Zhaozhong Ni},
  title = {A Syntactic Approach to Foundational Proof-Carrying Code},
  journal = {J. Autom. Reason.},
  year = {2003},
  volume = {31},
  pages = {191--229},
  number = {3-4},
  abstract = {Proof-carrying code (PCC) is a general framework for verifying the
	safety properties of machine-language programs. PCC proofs are usually
	written in a logic extended with language-specific typing rules;
	they certify safety but only if there is no bug in the typing rules.
	In foundational proof-carrying code (FPCC), on the other hand, proofs
	are constructed and verified by using strictly the foundations of
	mathematical logic, with no type-specific axioms. FPCC is more flexible
	and secure because it is not tied to any particular type system and
	it has a smaller trusted base. Foundational proofs, however, are
	much harder to construct. Previous efforts on FPCC all required building
	sophisticated semantic models for types. Furthermore, none of them
	can be easily extended to support mutable fields and recursive types.
	In this article, we present a syntactic approach to FPCC that avoids
	all of these difficulties. Under our new scheme, the foundational
	proof for a typed machine program simply consists of the typing derivation
	plus the formalized syntactic soundness proof for the underlying
	type system. The former can be readily obtained from a type-checker,
	while the latter is known to be much easier to construct than the
	semantic soundness proofs. We give a translation from a typed assembly
	language into FPCC and demonstrate the advantages of our new system
	through an implementation in the Coq proof assistant.},
  address = {Hingham, MA, USA},
  citeseerurl = {http://citeseer.ist.psu.edu/532021.html},
  doi = {http://dx.doi.org/10.1023/B:JARS.0000021012.97318.e9},
  issn = {0168-7433},
  owner = {blerner},
  pdf = {Hamid2003.pdf},
  publisher = {Kluwer Academic Publishers},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Hanrahan1991,
  author = {Pat Hanrahan and David Salzman and Larry Aupperle},
  title = {A rapid hierarchical radiosity algorithm},
  booktitle = {SIGGRAPH '91: Proceedings of the 18th annual conference on Computer
	graphics and interactive techniques},
  year = {1991},
  pages = {197--206},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = { This paper presents a rapid hierarchical radiosity algorithm for
	illuminating scenes containing large polygonal patches. The algorithm
	constructs a hierarchical representation of the form factor matrix
	by adaptively subdividing patches into subpatches according to a
	user-supplied error bound. The algorithm guarantees that all form
	factors are calculated to the same precision, removing many common
	image artifacts due to inaccurate form factors. More importantly,
	the algorithm decomposes the form factor matrix into at most O(n)
	blocks (where n is the number of elements). Previous radiosity algorithms
	represented the element-to-element transport interactions with n2
	form factors. Visibility algorithms are given that work well with
	this approach. Standard techniques for shooting and gathering can
	be used with the hierarchical representation to solve for equilibrium
	radiosities, but we also discuss using a brightness-weighted error
	criteria, in conjunction with multigridding, to even more rapidly
	progressively refine the image. },
  doi = {http://doi.acm.org/10.1145/122718.122740},
  isbn = {0-89791-436-8},
  owner = {blerner},
  pdf = {Hanrahan1991.pdf},
  timestamp = {2007.07.03}
}

@UNPUBLISHED{Harper2005,
  author = {Robert Harper},
  title = {Programming Languages: Theory and Practice},
  year = {2005},
  comment = {CS428},
  owner = {blerner},
  pdf = {Harper2005.pdf},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Harris2005,
  author = {Tim Harris and Simon Marlow and Simon Peyton-Jones and Maurice Herlihy},
  title = {Composable memory transactions},
  booktitle = {PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles
	and practice of parallel programming},
  year = {2005},
  pages = {48--60},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Writing concurrent programs is notoriously difficult, and is of increasing
	practical importance. A particular source of concern is that even
	correctly-implemented concurrency abstractions cannot be composed
	together to form larger abstractions. In this paper we present a
	new concurrency model, based on transactional memory, that offers
	far richer composition. All the usual benefits of transactional memory
	are present (e.g. freedom from deadlock), but in addition we describe
	new modular forms of blocking and choice that have been inaccessible
	in earlier work.},
  comment = {CSE590p, atomic infoflow},
  doi = {http://doi.acm.org/10.1145/1065944.1065952},
  isbn = {1-59593-080-9},
  location = {Chicago, IL, USA},
  owner = {blerner},
  pdf = {Harris2005.pdf},
  timestamp = {2005.11.11}
}

@INCOLLECTION{Hart1993,
  author = {John C. Hart},
  title = {Ray Tracing Implicit Surfaces},
  booktitle = {{SIGGRAPH} 93 Modeling, Visualizing, and Animating Implicit Surfaces
	course notes},
  publisher = {ACM},
  year = {1993},
  pages = {1--16},
  owner = {blerner},
  pdf = {Hart1993.pdf},
  timestamp = {2007.07.03},
  url = {http://citeseer.ist.psu.edu/495837.html}
}

@ARTICLE{Hawblitzel2002,
  author = {Chris Hawblitzel and Thorsten von Eicken},
  title = {Luna: a flexible Java protection system},
  journal = {SIGOPS Oper. Syst. Rev.},
  year = {2002},
  volume = {36},
  pages = {391--403},
  number = {SI},
  abstract = {Extensible Java systems face a difficult trade-off between sharing
	and protection. On one hand, Java's ability to run different protection
	domains in a single virtual machine enables domains to share data
	easily and communicate without address space switches. On the other
	hand, unrestricted sharing blurs the boundaries between protection
	domains, making it difficult to terminate domains and enforce restrictions
	on resource usage. Existing solutions to these problems restrict
	sharing in an ad-hoc fashion, ruling out many desirable programming
	styles.This paper presents an extension to Java's type system that
	systematically addresses the issues of data sharing, revocation,
	thread control, and resource control. Multiple tasks running in a
	single virtual machines share data using special remote pointers,
	which have different types from local pointers. The distinction between
	local and remote pointers allows the Java runtime system to mediate
	the communication between tasks without slowing down operations on
	ordinary pointers. The extensions to Java are implemented by a system
	called Luna, based on the Guavac and Marmot compilers, extended with
	special optimizations to support both fast inter-task communication
	and dynamic access control. The paper describes two applications
	written in Luna: a simple extensible web server, and an extension
	of the Squid web cache to support dynamic content generation.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/844128.844164},
  issn = {0163-5980},
  owner = {blerner},
  pdf = {Hawblitzel2002.pdf},
  publisher = {ACM Press},
  timestamp = {2006.10.11},
  url = {http://portal.acm.org/citation.cfm?id=844164&dl=acm&coll=&CFID=15151515&CFTOKEN=6184618}
}

@ARTICLE{Heckmann1997,
  author = {Reinhold Heckmann and Reinhard Wilhelm},
  title = {A Functional Description of {TEX}'s Formula Layout},
  journal = {Journal of Functional Programming},
  year = {1997},
  volume = {7},
  pages = {451-485},
  number = {5},
  abstract = {While the quality of the results of \TeX's mathematical formula layout
	algorithm is convincing, its original description is hard to understand
	since it is presented as an imperative program with complex control
	flow and destructive manipulations of the data structures representing
	formulae. In this paper, we present a re-implementation of \TeX's
	formula layout algorithm in the functional language SML, thereby
	providing a more readable description of the algorithm, extracted
	from the monolithical \TeX system.},
  doi = {http://dx.doi.org/10.1017/S0956796897002840},
  owner = {blerner},
  pdf = {Heckmann1997.pdf},
  timestamp = {2007.07.18}
}

@PHDTHESIS{Heeren2005,
  author = {Bastiaan J. Heeren},
  title = {Top Quality Type Error Messages},
  school = {Universiteit Utrecht, The Netherlands},
  year = {2005},
  month = sep,
  owner = {blerner},
  pdf = {Heeren2005.pdf},
  timestamp = {2006.04.03},
  url = {http://www.cs.uu.nl/people/bastiaan/phdthesis}
}

@INPROCEEDINGS{Heidrich1998,
  author = {Wolfgang Heidrich and Hans-Peter Seidel},
  title = {Ray-tracing Procedural Displacement Shaders},
  booktitle = {Graphics Interface},
  year = {1998},
  editor = {Wayne A. Davis and Kellogg S. Booth and Alain Fournier},
  pages = {8-16},
  publisher = {Canadian Human-Computer Communications Society},
  isbn = {0-9695338-7-X},
  owner = {blerner},
  pdf = {Heidrich1998.pdf},
  timestamp = {2007.07.02}
}

@INPROCEEDINGS{Hertzmann2001,
  author = {Aaron Hertzmann and Charles E. Jacobs and Nuria Oliver and Brian
	Curless and David H. Salesin},
  title = {Image analogies},
  booktitle = {SIGGRAPH '01: Proceedings of the 28th annual conference on Computer
	graphics and interactive techniques},
  year = {2001},
  pages = {327--340},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {This paper describes a new framework for processing images by example,
	called ``image analogies.'' The framework involves two stages: a
	design phase, in which a pair of images, with one image purported
	to be a ``filtered'' version of the other, is presented as ``training
	data''; and an application phase, in which the learned filter is
	applied to some new target image in order to create an ``analogous''
	filtered result. Image analogies are based on a simple multi-scale
	autoregression, inspired primarily by recent results in texture synthesis.
	By choosing different types of source image pairs as input, the framework
	supports a wide variety of ``image filter'' effects, including traditional
	image filters, such as blurring or embossing; improved texture synthesis,
	in which some textures are synthesized with higher quality than by
	previous approaches; super-resolution, in which a higher-resolution
	image is inferred from a low-resolution source; texture transfer,
	in which images are ``texturized'' with some arbitrary source texture;
	artistic filters, in which various drawing and painting styles are
	synthesized based on scanned real-world examples; and texture-by-numbers,
	in which realistic scenes, composed of a variety of textures, are
	created using a simple painting interface.},
  doi = {http://doi.acm.org/10.1145/383259.383295},
  isbn = {1-58113-374-X},
  owner = {blerner},
  pdf = {Hertzmann2001.pdf},
  timestamp = {2007.07.03}
}

@ARTICLE{Hoare1971,
  author = {C. A. R. Hoare},
  title = {Proof of a program: FIND},
  journal = {Commun. ACM},
  year = {1971},
  volume = {14},
  pages = {39--45},
  number = {1},
  abstract = {A proof is given of the correctness of the algorithm “Find.” First,
	an informal description is given of the purpose of the program and
	the method used. A systematic technique is described for constructing
	the program proof during the process of coding it, in such a way
	as to prevent the intrusion of logical errors. The proof of termination
	is treated as a separate exercise. Finally, some conclusions relating
	to general programming methodology are drawn.},
  address = {New York, NY, USA},
  comment = {CS428},
  doi = {http://doi.acm.org/10.1145/362452.362489},
  issn = {0001-0782},
  owner = {blerner},
  pdf = {Hoare1971.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@ARTICLE{Hoare1969,
  author = {C. A. R. Hoare},
  title = {An axiomatic basis for computer programming},
  journal = {Commun. ACM},
  year = {1969},
  volume = {12},
  pages = {576--580},
  number = {10},
  abstract = {In this paper an attempt is made to explore the logical foundations
	of computer programming by use of techniques which were first applied
	in the study of geometry and have later been extended to other branches
	of mathematics. This involves the elucidation of sets of axioms and
	rules of inference which can be used in proofs of the properties
	of computer programs. Examples are given of such axioms and rules,
	and a formal proof of a simple theorem is displayed. Finally, it
	is argued that important advantage, both theoretical and practical,
	may follow from a pursuance of these topics.},
  address = {New York, NY, USA},
  comment = {CS428},
  doi = {http://doi.acm.org/10.1145/363235.363259},
  issn = {0001-0782},
  owner = {blerner},
  pdf = {Hoare1969.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Hoppe1998,
  author = {Hugues Hoppe},
  title = {Smooth view-dependent level-of-detail control and its application
	to terrain rendering},
  booktitle = {VIS '98: Proceedings of the conference on Visualization '98},
  year = {1998},
  pages = {35--42},
  address = {Los Alamitos, CA, USA},
  publisher = {IEEE Computer Society Press},
  isbn = {1-58113-106-2},
  location = {Research Triangle Park, North Carolina, United States},
  owner = {blerner},
  pdf = {Hoppe1998.pdf},
  timestamp = {2007.07.02}
}

@ARTICLE{Hoppe1998a,
  author = {Hugues Hoppe},
  title = {Efficient implementation of progressive meshes},
  journal = {Computers and Graphics},
  year = {1998},
  volume = {22},
  pages = {27--36},
  number = {1},
  owner = {blerner},
  pdf = {Hoppe1998a.pdf},
  timestamp = {2007.07.02},
  url = {citeseer.ist.psu.edu/hoppe98efficient.html}
}

@INPROCEEDINGS{Hoppe1996,
  author = {Hugues Hoppe},
  title = {Progressive meshes},
  booktitle = {SIGGRAPH '96: Proceedings of the 23rd annual conference on Computer
	graphics and interactive techniques},
  year = {1996},
  pages = {99--108},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/237170.237216},
  isbn = {0-89791-746-4},
  owner = {blerner},
  pdf = {Hoppe1996.pdf},
  timestamp = {2007.07.02}
}

@INPROCEEDINGS{Hoppe1993,
  author = {Hugues Hoppe and Tony DeRose and Tom Duchamp and John McDonald and
	Werner Stuetzle},
  title = {Mesh optimization},
  booktitle = {SIGGRAPH '93: Proceedings of the 20th annual conference on Computer
	graphics and interactive techniques},
  year = {1993},
  pages = {19--26},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/166117.166119},
  isbn = {0-89791-601-8},
  owner = {blerner},
  pdf = {Hoppe1993.pdf},
  timestamp = {2007.07.02}
}

@INPROCEEDINGS{Horwitz1990,
  author = {Susan Horwitz},
  title = {Identifying the semantic and textual differences between two versions
	of a program},
  booktitle = {PLDI '90: Proceedings of the ACM SIGPLAN 1990 conference on Programming
	language design and implementation},
  year = {1990},
  pages = {234--245},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Text-based file comparators (e.g., the Unix utility diff), are very
	general tools that can be applied to arbitrary files. However, using
	such tools to compare programs can be unsatisfactory because their
	only notion of change is based on program text rather than program
	behavior. This paper describes a technique for comparing two versions
	of a program, determining which program components represents changes,
	and classifying each changed component as representing either a semantic
	or a textual change.},
  doi = {http://doi.acm.org/10.1145/93542.93574},
  isbn = {0-89791-364-7},
  location = {White Plains, New York, United States},
  owner = {blerner},
  pdf = {Horwitz1990.pdf},
  timestamp = {2006.03.02}
}

@INPROCEEDINGS{Hosoya2005,
  author = {Haruo Hosoya and Alain Frisch and Giuseppe Castagna},
  title = {Parametric polymorphism for XML},
  booktitle = {POPL '05: Proceedings of the 32nd ACM SIGPLAN-SIGACT symposium on
	Principles of programming languages},
  year = {2005},
  pages = {50--62},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Despite the extensiveness of recent investigations on static typing
	for XML, parametric polymorphism has rarely been treated. This well-established
	typing discipline can also be useful in XML processing in particular
	for programs involving ``parametric schemas,'' i.e., schemas parameterized
	over other schemas (e.g., SOAP). The difficulty in treating polymorphism
	for XML lies in how to extend the ``semantic'' approach used in the
	mainstream (monomorphic) XML type systems. A naive extension would
	be ``semantic'' quantification over all substitutions for type variables.
	However, this approach reduces to an NEXPTIME-complete problem for
	which no practical algorithm is known. In this paper, we propose
	a different method that smoothly extends the semantic approach yet
	is algorithmically easier. In this, we devise a novel and simple
	marking technique, where we interpret a polymorphic type as a set
	of values with annotations of which subparts are parameterized. We
	exploit this interpretation in every ingredient of our polymorphic
	type system such as subtyping, inference of type arguments, and so
	on. As a result, we achieve a sensible system that directly represents
	a usual expected behavior of polymorphic type systems---``values
	of variable types are never reconstructed''---in a reminiscence of
	Reynold's parametricity theory. Also, we obtain a set of practical
	algorithms for typechecking by local modifications to existing ones
	for a monomorphic system.},
  doi = {http://doi.acm.org/10.1145/1040305.1040310},
  isbn = {1-58113-830-X},
  location = {Long Beach, California, USA},
  owner = {blerner},
  pdf = {Hosoya2005.pdf},
  timestamp = {2005.11.12}
}

@ARTICLE{Hosoya2003,
  author = {Haruo Hosoya and Benjamin C. Pierce},
  title = {XDuce: A statically typed XML processing language},
  journal = {ACM Trans. Inter. Tech.},
  year = {2003},
  volume = {3},
  pages = {117--148},
  number = {2},
  abstract = {XDuce is a statically typed programming language for XML processing.
	Its basic data values are XML documents, and its types (so-called
	regular expression types) directly correspond to document schemas.
	XDuce also provides a flexible form of regular expression pattern
	matching, integrating conditional branching, tag checking, and subtree
	extraction, as well as dynamic typechecking. We survey the principles
	of XDuce's design, develop examples illustrating its key features,
	describe its foundations in the theory of regular tree automata,
	and present a complete formal definition of its core, along with
	a proof of type safety.},
  address = {New York, NY, USA},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/767193.767195},
  issn = {1533-5399},
  owner = {blerner},
  pdf = {Hosoya2003.pdf},
  publisher = {ACM Press},
  timestamp = {2006.10.11}
}

@TECHREPORT{Hosoya1999,
  author = {Haruo Hosoya and Benjamin C. Pierce},
  title = {How Good is Local Type Inference?},
  institution = {University of Pennsylvania},
  year = {1999},
  number = {MS-CIS-99-17},
  month = jun,
  owner = {blerner},
  pdf = {Hosoya1999.pdf},
  timestamp = {2006.05.12},
  url = {http://www.cis.upenn.edu/~bcpierce/papers/hgilti.ps}
}

@ARTICLE{Hosoya2005a,
  author = {Haruo Hosoya and J\&\#233;r\&\#244;me Vouillon and Benjamin C. Pierce},
  title = {Regular expression types for XML},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {2005},
  volume = {27},
  pages = {46--90},
  number = {1},
  abstract = {We propose regular expression types as a foundation for statically
	typed XML processing languages. Regular expression types, like most
	schema languages for XML, introduce regular expression notations
	such as repetition (&ast;), alternation (&verbar;), etc., to describe
	XML documents. The novelty of our type system is a semantic presentation
	of subtyping, as inclusion between the sets of documents denoted
	by two types. We give several examples illustrating the usefulness
	of this form of subtyping in XML processing.The decision problem
	for the subtype relation reduces to the inclusion problem between
	tree automata, which is known to be EXPTIME-complete. To avoid this
	high complexity in typical cases, we develop a practical algorithm
	that, unlike classical algorithms based on determinization of tree
	automata, checks the inclusion relation by a top-down traversal of
	the original type expressions. The main advantage of this algorithm
	is that it can exploit the property that type expressions being compared
	often share portions of their representations. Our algorithm is a
	variant of Aiken and Murphy's set-inclusion constraint solver, to
	which are added several new implementation techniques, correctness
	proofs, and preliminary performance measurements on some small programs
	in the domain of typed XML processing.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/1053468.1053470},
  issn = {0164-0925},
  owner = {blerner},
  pdf = {Hosoya2005a.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Howard1996,
  author = {Brian T. Howard},
  title = {Inductive, coinductive, and pointed types},
  booktitle = {ICFP '96: Proceedings of the first ACM SIGPLAN international conference
	on Functional programming},
  year = {1996},
  pages = {102--109},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {An extension of the simply-typed lambda calculus is presented which
	contains both well-structured inductive and coinductive types, and
	which also identifies a class of types for which general recursion
	is possible. The motivations for this work are certain natural constructions
	in category theory, in particular the notion of an algebraically
	bounded functor, due to Freyd. We propose that this is a particularly
	elegant core language in which to work with recursive objects, since
	the potential for general recursion is contained in a single operator
	which interacts well with the facilities for bounded iteration and
	coiteration.},
  comment = {atomic infoflow},
  doi = {http://doi.acm.org/10.1145/232627.232640},
  isbn = {0-89791-770-7},
  location = {Philadelphia, Pennsylvania, United States},
  owner = {blerner},
  pdf = {Howard1996.pdf},
  timestamp = {2007.05.02}
}

@ARTICLE{Howard1988,
  author = {John H. Howard and Michael L. Kazar and Sherri G. Menees and David
	A. Nichols and M. Satyanarayanan and Robert N. Sidebotham and Michael
	J. West},
  title = {Scale and performance in a distributed file system},
  journal = {ACM Trans. Comput. Syst.},
  year = {1988},
  volume = {6},
  pages = {51--81},
  number = {1},
  abstract = {The Andrew File System is a location-transparent distributed tile
	system that will eventually span more than 5000 workstations at Carnegie
	Mellon University. Large scale affects performance and complicates
	system operation. In this paper we present observations of a prototype
	implementation, motivate changes in the areas of cache validation,
	server process structure, name translation, and low-level storage
	representation, and quantitatively demonstrate Andrews ability to
	scale gracefully. We establish the importance of whole-file transfer
	and caching in Andrew by comparing its performance with that of Sun
	Microsystems NFS tile system. We also show how the aggregation of
	files into volumes improves the operability of the system.},
  address = {New York, NY, USA},
  comment = {CSE551},
  doi = {http://doi.acm.org/10.1145/35037.35059},
  issn = {0734-2071},
  owner = {blerner},
  pdf = {Howard1988.pdf},
  publisher = {ACM Press},
  timestamp = {2007.05.01}
}

@ARTICLE{Hsu1994,
  author = {Jean Hsu and David M. Chelberg},
  title = {Visible light and x-ray ray tracing of generalized cylinders},
  journal = {CVGIP: Graph. Models Image Process.},
  year = {1994},
  volume = {56},
  pages = {392--401},
  number = {5},
  address = {Orlando, FL, USA},
  doi = {http://dx.doi.org/10.1006/cgip.1994.1035},
  issn = {1049-9652},
  owner = {blerner},
  pdf = {Hsu1994.pdf},
  publisher = {Academic Press, Inc.},
  timestamp = {2007.07.03}
}

@ARTICLE{Hudak2002,
  author = {Paul Hudak and Antony Courtney and Henrik Nilsson and John Peterson},
  title = {Arrows, robots, and functional reactive programming},
  journal = {Advanced Functional Programming, 4th International School},
  year = {2003},
  volume = {2638},
  pages = {159--187},
  abstract = {Functional reactive programming, or FRP, is a paradigm for programming
	hybrid systems --- i.e., systems containing a combination of both
	continuous and discrete components --- in a high-level, declarative
	way. The key ideas in FRP are its notions of continuous, time-varying
	values, and time-ordered sequences of discrete events. Yampa is an
	instantiation of FRP as a domain-specific language embedded in Haskell.
	This paper describes Yampa in detail, and shows how it can be used
	to program a particular kind of hybrid system: a mobile robot. Because
	performance is critical in robotic programming, Yampa uses arrows
	(a generalization of monads) to create a disciplined style of programming
	with time-varying values that helps ensure that common kinds of time-
	and space-leaks do not occur. No previous experience with robots
	is expected of the reader, although a basic understanding of physics
	and calculus is assumed. No knowledge of arrows is required either,
	although we assume a good working knowledge of Haskell. This paper
	is dedicated in memory of Edsger W. Dijkstra for his influential
	insight that mathematical logic is and must be the basis for sensible
	computer program construction.},
  doi = {http://dx.doi.org/10.1007/b11942},
  isbn = {978-3-540-40132-2},
  owner = {blerner},
  pdf = {Hudak2002.pdf},
  publisher = {Springer},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Ishtiaq2001,
  author = {Samin S. Ishtiaq and Peter W. O'Hearn},
  title = {BI as an assertion language for mutable data structures},
  booktitle = {POPL '01: Proceedings of the 28th ACM SIGPLAN-SIGACT symposium on
	Principles of programming languages},
  year = {2001},
  pages = {14--26},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Reynolds has developed a logic for reasoning about mutable data structures
	in which the pre- and postconditions are written in an intuitionistic
	logic enriched with a spatial form of conjunction. We investigate
	the approach from the point of view of the logic BI of bunched implications
	of O'Hearnand Pym. We begin by giving a model in which the law of
	the excluded middleholds, thus showing that the approach is compatible
	with classical logic. The relationship between the intuitionistic
	and classical versions of the system is established by a translation,
	analogous to a translation from intuitionistic logic into the modal
	logic S4. We also consider the question of completeness of the axioms.
	BI's spatial implication is used to express weakest preconditions
	for object-component assignments, and an axiom for allocating a cons
	cell is shown to be complete under an interpretation of triplesthat
	allows a command to be applied to states with dangling pointers.
	We make this latter a feature, by incorporating an operation, and
	axiom, for disposing of memory. Finally, we describe a local character
	enjoyed by specifications in the logic, and show how this enables
	a class of frame axioms, which say what parts of the heap don't change,
	to be inferred automatically.},
  doi = {http://doi.acm.org/10.1145/360204.375719},
  isbn = {1-58113-336-7},
  location = {London, United Kingdom},
  owner = {blerner},
  pdf = {Ishtiaq2001.pdf},
  timestamp = {2005.11.12}
}

@ARTICLE{Jeffery2003,
  author = {Clinton L. Jeffery},
  title = {Generating LR syntax error messages from examples},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {2003},
  volume = {25},
  pages = {631--640},
  number = {5},
  abstract = {LR parser generators are powerful and well-understood, but the parsers
	they generate are not suited to provide good error messages. Many
	compilers incur extensive modifications to the source grammar to
	produce useful syntax error messages. Interpreting the parse state
	(and input token) at the time of error is a nonintrusive alternative
	that does not entangle the error recovery mechanism in error message
	production. Unfortunately, every change to the grammar may significantly
	alter the mapping from parse states to diagnostic messages, creating
	a maintenance problem.Merr is a tool that allows a compiler writer
	to associate diagnostic messages with syntax errors by example, avoiding
	the need to add error productions to the grammar or interpret integer
	parse states. From a specification of errors and messages, Merr runs
	the compiler on each example error to obtain the relevant parse state
	and input token, and generates a yyerror() function that maps parse
	states and input tokens to diagnostic messages. Merr enables useful
	syntax error messages in LR-based compilers in a manner that is robust
	in the presence of grammar changes.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/937563.937566},
  issn = {0164-0925},
  owner = {blerner},
  pdf = {Jeffery2003.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{275461,
  author = {Henrik Wann Jensen},
  title = {Global illumination using photon maps},
  booktitle = {Proceedings of the eurographics workshop on Rendering techniques
	'96},
  year = {1996},
  pages = {21--30},
  address = {London, UK},
  publisher = {Springer-Verlag},
  isbn = {3-211-82883-4},
  location = {Porto, Portugal},
  owner = {blerner},
  pdf = {Jensen1996.pdf},
  timestamp = {2007.07.03}
}

@INPROCEEDINGS{Jensen1996a,
  author = {Henrik Wann Jensen},
  title = {Rendering caustics on non-Lambertian surfaces},
  booktitle = {GI '96: Proceedings of the conference on Graphics interface '96},
  year = {1996},
  pages = {116--121},
  address = {Toronto, Ont., Canada, Canada},
  publisher = {Canadian Information Processing Society},
  isbn = {0-9695338-5-3},
  location = {Toronto, Ontario, Canada},
  owner = {blerner},
  pdf = {Jensen1996a.pdf},
  timestamp = {2007.07.03}
}

@BOOK{Jensen1996,
  title = {Coloured Petri nets (2nd ed.): basic concepts, analysis methods and
	practical use: volume 1},
  publisher = {Springer-Verlag},
  year = {1996},
  author = {Kurt Jensen},
  address = {London, UK},
  comment = {atomic infoflow},
  isbn = {3-540-60943-1},
  owner = {blerner},
  timestamp = {2007.07.17},
  url = {http://portal.acm.org/citation.cfm?id=230999}
}

@INPROCEEDINGS{Johnson1986,
  author = {Gregory F. Johnson and Janet A. Walz},
  title = {A maximum-flow approach to anomaly isolation in unification-based
	incremental type inference},
  booktitle = {POPL '86: Proceedings of the 13th ACM SIGACT-SIGPLAN symposium on
	Principles of programming languages},
  year = {1986},
  pages = {44--57},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {A crucial aspect of a program intended for general use is its behavior
	in the presence of erroneous inputs. For instance, much attention
	has been devoted to the problems of error detection, reporting, and
	correction in compilers<sup>1,2</sup>. As programming languages and
	systems based in one way or another on unification<sup>3</sup> become
	more common, it becomes increasingly important to develop a theory
	of error detection and correction for unification-based systems.
	We report here on a language-based editor for a variant of ML<sup>4</sup>
	that uses a novel approach to the isolation of likely causes of user
	errors. As the user edits and manipulates his or her program, unification
	is incrementally applied to determine its type correctness. If a
	type inconsistency arises, a maximum flow technique is applied to
	the set of type equations to determine the most likely source of
	error. In this way a determination can be made as to the relative
	strengths with which the set of type equations asserts multiple contradictory
	hypotheses. In a language such as ML, the type of an object is inferred
	from patterns of usage. Often it is the case that most uses of a
	given object are mutually consistent, whereas one or a very small
	number of uses conflict with the general usage pattern. In MOE (ML-Oriented
	Editor), if it is possible to discern that such a situation has arisen,
	likely errors are highlighted at high intensity and all other program
	components that contributed to the inferred type of the object are
	highlighted at a lower intensity. In providing error information
	to the user, two principles are observed:(1) Error indications should
	be complete but parsimonious; the user should see highlighted on
	the screen everything that contributed directly to an error, but
	nothing. more,(2) The user's attention should be drawn to what appear
	to be the anomalies that are responsible for errors.Language-based
	editors permit a new level of quality in the process of helping users
	when inputs are, for one reason or another, invalid. Unification-based
	type inference in language-based editors appears to have been first
	considered by Meertens 5. Snelting and Bahlke have more recently
	also explored this approach.},
  doi = {http://doi.acm.org/10.1145/512644.512649},
  location = {St. Petersburg Beach, Florida},
  owner = {blerner},
  pdf = {Johnson1986.pdf},
  timestamp = {2006.04.26}
}

@INPROCEEDINGS{Jones1997,
  author = {Simon Peyton Jones and Mark Jones and Erik Meijer},
  title = {Type classes: exploring the design space},
  booktitle = {Procedings of the Haskell Workshop},
  year = {1997},
  abstract = {When type classes were first introduced in Haskell they were regarded
	as a fairly experimental language feature, and therefore warranted
	a fairly conservative design. Since that time, practical experience
	has convinced many programmers of the benefits and convenience of
	type classes. However, on occasion, these same programmers have discovered
	examples where seemingly natural applications for type class overloading
	are prevented by the restrictions imposed by the Haskell design.
	
	
	It is possible to extend the type class mechanism of Haskell in various
	ways to overcome these limitations, but such proposals must be designed
	with great care. For example, several different extensions have been
	implemented in Gofer. Some of these, particularly the support for
	multi-parameter classes, have proved to be very useful, but interactions
	between other aspects of the design have resulted in a type system
	that is both unsound and undecidable. Another illustration is the
	introduction of constructor classes in Haskell 1.3, which came without
	the proper generalization of the notion of a context. As a consequence,
	certain quite reasonable programs are not typable.
	
	
	In this paper we review the rationale behind the design of Haskell's
	class system, we identify some of the weaknesses in the current situation,
	and we explain the choices that we face in attempting to remove them.},
  comment = {CSE590p},
  owner = {blerner},
  pdf = {Jones1997.pdf},
  timestamp = {2006.05.02},
  url = {http://research.microsoft.com/%7Esimonpj/Papers/type%2Dclass%2Ddesign%2Dspace/}
}

@UNPUBLISHED{Jones2005,
  author = {Simon Peyton Jones and Norman Ramsey and Fermin Reig},
  title = {The {C}-- Language Specification},
  month = feb,
  year = {2005},
  comment = {CS428},
  owner = {blerner},
  pdf = {Jones2005.pdf},
  timestamp = {2005.11.12},
  url = {http://www.cminusminus.org/}
}

@INPROCEEDINGS{Jones1999,
  author = {Simon Peyton Jones and Norman Ramsey and Fermin Reig},
  title = {{C}--: a Portable Assembly Language that Supports Garbage Collection},
  booktitle = {International Conference on Principles and Practice of Declarative
	Programming},
  year = {1999},
  month = sep,
  abstract = {For a compiler writer, generating good machine code for a variety
	of platforms is hard work. One might try to reuse a retargetable
	code generator, but code generators are complex and difficult to
	use, and they limit one's choice of implementation language. One
	might try to use C as a portable assembly language, but C limits
	the compiler writer's flexibility and the performance of the resulting
	code. The wide use of C, despite these drawbacks, argues for a portable
	assembly language. C{-}{-} is a new language designed expressly for
	this purpose. The use of a portable assembly language introduces
	new problems in the support of such high-level run-time services
	as garbage collection, exception handling, concurrency, profiling,
	and debugging. We address these problems by combining the C{-}{-}
	language with a C{-}{-} run-time interface. The combination is designed
	to allow the compiler writer a choice of source-language semantics
	and implementation techniques, while still providing good performance.},
  comment = {CSE590p},
  owner = {blerner},
  pdf = {Jones1999.pdf},
  timestamp = {2005.11.12},
  url = {http://www.eecs.harvard.edu/~nr/pubs/c--gc-abstract.html}
}

@ARTICLE{Jorgenson2003,
  author = {Jay Jorgenson and Serge Lang},
  title = {Analytic continuation and identities involving heat, Poisson, wave
	and Bessel kernels},
  journal = {Mathematische Nachrichten},
  year = {2003},
  volume = {258},
  pages = {44--70},
  number = {1},
  month = {mar},
  abstract = {In this article we use classical formulas involving the K-Bessel function
	in two variables to express the Poisson kernel on a Riemannian manifold
	in terms of the heat kernel. We then use the small time asymptotics
	of the heat kernel on certain Riemannian manifolds to obtain a meromorphic
	continuation of the associated Poisson kernel to all values of complex
	time with identifiable singularities. This result reproves in a different
	setting by different means a well-known theorem due to Duistermaat
	and Guillemin [DG 75]. Also, we develop analytic expressions for
	the heat kernel beyond asymptotic expansions.},
  doi = {http://dx.doi.org/10.1002/mana.200310086},
  owner = {blerner},
  pdf = {Jorgenson2003.pdf},
  publisher = {WILEY-VCH Verlag GmbH \& Co.},
  timestamp = {2007.07.04}
}

@ARTICLE{Jun2002,
  author = {Jun, Yang and Michaelson, Greg and Trinder, Phil},
  title = {Explaining Polymorphic Types},
  journal = {The Computer Journal},
  year = {2002},
  volume = {45},
  pages = {436-452},
  number = {4},
  abstract = {Polymorphic types in programming languages facilitate code reuse,
	increase reliability and reduce semantic errors in programs. Hindley-Milner
	type inference forms a strong basis for checking polymorphic types
	but is less well suited to explaining them, as it introduces intermediate
	constructs that relate poorly to a programmer's understanding of
	the program. We report an experiment into expert human type explanation
	and uncover a simple set of rules for human-like explanations. We
	present a type explanation system based on these rules rather than
	Hindley-Milner inference. The system uses a new $H$ inference algorithm
	to annotate types with explanations and is designed to produce succinct,
	non-repetitive explanations with minimal reference to artefacts of
	mechanized type inference.},
  doi = {10.1093/comjnl/45.4.436},
  eprint = {http://comjnl.oxfordjournals.org/cgi/reprint/45/4/436.pdf},
  owner = {blerner},
  pdf = {Jun2002.pdf},
  timestamp = {2006.05.29},
  url = {http://comjnl.oxfordjournals.org/cgi/content/abstract/45/4/436}
}

@INPROCEEDINGS{Kaashoek1997,
  author = {M. Frans Kaashoek and Dawson R. Engler and Gregory R. Ganger and
	Hector M. Brice\~{n}o and Russell Hunt and David Mazi\`{e}res and
	Thomas Pinckney and Robert Grimm and John Jannotti and Kenneth Mackenzie},
  title = {Application performance and flexibility on exokernel systems},
  booktitle = {SOSP '97: Proceedings of the sixteenth ACM symposium on Operating
	systems principles},
  year = {1997},
  pages = {52--65},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  comment = {CSE551},
  doi = {http://doi.acm.org/10.1145/268998.266644},
  isbn = {0-89791-916-5},
  journal = {SOSP '97},
  location = {Saint Malo, France},
  owner = {blerner},
  pdf = {Kaashoek1997.pdf},
  timestamp = {2007.05.01}
}

@ARTICLE{Kaplan2004,
  author = {Craig S. Kaplan and David H. Salesin},
  title = {Islamic star patterns in absolute geometry},
  journal = {ACM Trans. Graph.},
  year = {2004},
  volume = {23},
  pages = {97--119},
  number = {2},
  abstract = {We present Najm, a set of tools built on the axioms of absolute geometry
	for exploring the design space of Islamic star patterns. Our approach
	makes use of a novel family of tilings, called ``inflation tilings,''
	which are particularly well suited as guides for creating star patterns.
	We describe a method for creating a parameterized set of motifs that
	can be used to fill the many regular polygons that comprise these
	tilings, as well as an algorithm to infer geometry for any irregular
	polygons that remain. Erasing the underlying tiling and joining together
	the inferred motifs produces the star patterns. By choice, Najm is
	build upon the subset of geometry that makes no assumption about
	the behavior of parallel lines. As a consequence, star patterns created
	by Najm can be designed equally well to fit the Euclidean plane,
	the hyperbolic plane, or the surface of a sphere.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/990002.990003},
  issn = {0730-0301},
  owner = {blerner},
  pdf = {Kaplan2004.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@INPROCEEDINGS{Kennedy2005,
  author = {Andrew Kennedy and Claudio V. Russo},
  title = {Generalized algebraic data types and object-oriented programming},
  booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference
	on Object oriented programming systems languages and applications},
  year = {2005},
  pages = {21--40},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {Generalized algebraic data types (GADTs) have received much attention
	recently in the functional programming community. They generalize
	the (type) parameterized algebraic datatypes (PADTs) of ML and Haskell
	by permitting value constructors to return specific, rather than
	parametric, type-instantiations of their own datatype. GADTs have
	a number of applications, including strongly-typed evaluators, generic
	pretty-printing, generic traversals and queries, and typed LR parsing.
	We show that existing object-oriented programming languages such
	as Java and C# can express GADT definitions, and a large class of
	GADT-manipulating programs, through the use of generics, subclassing,
	and virtual dispatch. However, some programs can be written only
	through the use of redundant runtime casts. Moreover, instantiation-specific,
	yet safe, operations on ordinary PADTs only admit indirect cast-free
	implementations, via higher-order encodings. We propose a generalization
	of the type constraint mechanisms of C# and Java to both avoid the
	need for casts in GADT programs and higher-order contortions in PADT
	programs; we present a Visitor pattern for GADTs, and describe a
	refined switch construct as an alternative to virtual dispatch on
	datatypes. We formalize both extensions and prove type soundness.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1094811.1094814},
  isbn = {1-59593-031-0},
  location = {San Diego, CA, USA},
  owner = {blerner},
  pdf = {Kennedy2005.pdf},
  timestamp = {2006.01.09}
}

@TECHREPORT{Khare2004,
  author = {Rohit Khare and Doug Cutting and Kragen Sitaker and Adam Rifkin},
  title = {Nutch: A Flexible and Scalable Open-Source Web Search Engine},
  institution = {CommerceNet Labs},
  year = {2004},
  number = {CN-TR-04-04},
  month = {nov},
  abstract = {Nutch is an open-source Web search engine that can be used at global,
	local, and even personal scale. Its initial design goal was to enable
	a transparent alternative for global Web search in the public interest.
	It has also been used for intranets; by local communities with richer
	data models, such as the Creative Commons metadata-enabled search
	for licensed content; on a personal scale to index a user's files,
	email, and web-surfing history. We also report on several other research
	projects built on Nutch and how Nutch's architecture enables it to
	be more flexible and scalable than other comparable systems today.},
  comment = {cse551 project},
  owner = {blerner},
  pdf = {Khare2004.pdf},
  timestamp = {2007.04.30},
  url = {http://wiki.commerce.net/wiki/Publications#CN-TR-04-04:_Nutch:_A_Flexible_and_Scalable_Open-Source_Web_Search_Engine}
}

@INPROCEEDINGS{Kistler1991,
  author = {James J. Kistler and M. Satyanarayanan},
  title = {Disconnected operation in the Coda file system},
  booktitle = {SOSP '91: Proceedings of the thirteenth ACM symposium on Operating
	systems principles},
  year = {1991},
  pages = {213--225},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {\emph{Disconnected} operation is a mode of operation that enables
	a client to continue accessing critical data during temporary failures
	of a shared data repository. An important, though not exclusive,
	application of disconnected operation is in supporting portable computers.
	In this paper, we show that disconnected operation is feasible, efficient
	and usable by describing its design and implementation in the Coda
	File System. The central idea behind our work is that \emph{caching
	of data}, now widely used for performance, can also be exploited
	to improve \emph{availability}.},
  comment = {CSE551},
  doi = {http://doi.acm.org/10.1145/121132.121166},
  isbn = {0-89791-447-3},
  location = {Pacific Grove, California, United States},
  owner = {blerner},
  pdf = {Kistler1991.pdf},
  timestamp = {2007.05.01}
}

@INPROCEEDINGS{Kohno2004,
  author = {Tadayoshi Kohno and Adam Stubblefield and Aviel D. Rubin and Dan
	S. Wallach},
  title = {Analysis of an Electronic Voting System},
  booktitle = {Proceedings of the 2004 IEEE Symposium on Security and Privacy},
  year = {2004},
  pages = {27--40},
  month = may,
  abstract = {With significant U.S. federal funds now available to replace outdated
	punch-card and mechanical voting systems, municipalities and states
	throughout the U.S. are adopting paperless electronic voting systems
	from a number of different vendors. We present a security analysis
	of the source code to one such machine used in a significant share
	of the market. Our analysis shows that this voting system is far
	below even the most minimal security standards applicable in other
	contexts. We identify several problems including unauthorized privilege
	escalation, incorrect use of cryptography, vulnerabilities to network
	threats, and poor software development processes. We show that voters,
	without any insider privileges, can cast unlimited votes without
	being detected by any mechanisms within the voting terminal software.
	Furthermore, we show that even the most serious of our outsider attacks
	could have been discovered and executed without access to the source
	code. In the face of such attacks, the usual worries about insider
	threats are not the only concerns; outsiders can do the damage. That
	said, we demonstrate that the insider threat is also quite considerable,
	showing that not only can an insider, such as a poll worker, modify
	the votes, but that insiders can also violate voter privacy and match
	votes with the voters who cast them. We conclude that this voting
	system is unsuitable for use in a general election. Any paperless
	electronic voting system might suffer similar flaws, despite any
	certification it could have otherwise received. We suggest that the
	best solutions are voting systems having a voter-verifiable audit
	trail, where a computerized voting system might print a paper ballot
	that can be read and verified by the voter.},
  comment = {CSE590s},
  owner = {blerner},
  pdf = {Kohno2004.pdf},
  timestamp = {2006.01.09},
  url = {http://avirubin.com/vote/analysis/index.html
}
}

@INPROCEEDINGS{Kwatra2003,
  author = {Vivek Kwatra and Arno Sch{\"o}dl and Irfan Essa and Greg Turk and
	Aaron Bobick},
  title = {Graphcut textures: image and video synthesis using graph cuts},
  booktitle = {SIGGRAPH '03: ACM SIGGRAPH 2003 Papers},
  year = {2003},
  pages = {277--286},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = { In this paper we introduce a new algorithm for image and video texture
	synthesis. In our approach, patch regions from a sample image or
	video are transformed and copied to the output and then stitched
	together along optimal seams to generate a new (and typically larger)
	output. In contrast to other techniques, the size of the patch is
	not chosen a-priori, but instead a graph cut technique is used to
	determine the optimal patch region for any given offset between the
	input and output texture. Unlike dynamic programming, our graph cut
	technique for seam optimization is applicable in any dimension. We
	specifically explore it in 2D and 3D to perform video texture synthesis
	in addition to regular image synthesis. We present approximative
	offset search techniques that work well in conjunction with the presented
	patch size optimization. We show results for synthesizing regular,
	random, and natural images and videos. We also demonstrate how this
	method can be used to interactively merge different images to generate
	new scenes. },
  doi = {http://doi.acm.org/10.1145/1201775.882264},
  isbn = {1-58113-709-5},
  location = {San Diego, California},
  owner = {blerner},
  pdf = {Kwatra2003.pdf},
  timestamp = {2007.07.03}
}

@ARTICLE{Ladner1980,
  author = {Richard E. Ladner and Michael J. Fischer},
  title = {Parallel Prefix Computation},
  journal = {J. ACM},
  year = {1980},
  volume = {27},
  pages = {831--838},
  number = {4},
  address = {New York, NY, USA},
  comment = {cse551 project},
  doi = {http://doi.acm.org/10.1145/322217.322232},
  issn = {0004-5411},
  owner = {blerner},
  pdf = {Ladner1980.pdf},
  publisher = {ACM Press},
  timestamp = {2007.04.30}
}

@INPROCEEDINGS{Lahiri2006,
  author = {Shuvendu K. Lahiri and Shaz Qadeer},
  title = {Verifying properties of well-founded linked lists},
  booktitle = {POPL '06: Conference record of the 33rd ACM SIGPLAN-SIGACT symposium
	on Principles of programming languages},
  year = {2006},
  pages = {115--126},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We describe a novel method for verifying programs that manipulate
	linked lists, based on two new predicates that characterize reachability
	of heap cells. These predicates allow reasoning about both acyclic
	and cyclic lists uniformly with equal ease. The crucial insight behind
	our approach is that a circular list invariably contains a distinguished
	head cell that provides a handle on the list. This observation suggests
	a programming methodology that requires the heap of the program at
	each step to be well-founded, i.e., for any field f in the program,
	every sequence u.f, u.f.f,... contains at least one head cell. We
	believe that our methodology captures the most common idiom of programming
	with linked data structures. We enforce our methodology by automatically
	instrumenting the program with updates to two auxiliary variables
	representing these predicates and adding assertions in terms of these
	auxiliary variables.To prove program properties and the instrumented
	assertions, we provide a first-order axiomatization of our two predicates.
	We also introduce a novel induction principle made possible by the
	well-foundedness of the heap. We use our induction principle to derive
	from two basic axioms a small set of additional first-order axioms
	that are useful for proving the correctness of several programs.We
	have implemented our method in a tool and used it to verify the correctness
	of a variety of nontrivial programs manipulating both acyclic and
	cyclic singly-linked lists and doubly-linked lists. We also demonstrate
	the use of indexed predicate abstraction to automatically synthesize
	loop invariants for these examples.},
  comment = {CSE590p},
  doi = {http://doi.acm.org/10.1145/1111037.1111048},
  isbn = {1-59593-027-2},
  location = {Charleston, South Carolina, USA},
  owner = {blerner},
  pdf = {Lahiri2006.pdf},
  timestamp = {2006.01.09}
}

@ARTICLE{Lalonde1997,
  author = {Paul Lalonde},
  title = {A Wavelet Representation of Reflectance Functions},
  journal = {IEEE Transactions on Visualization and Computer Graphics},
  year = {1997},
  volume = {3},
  pages = {329--336},
  number = {4},
  owner = {blerner},
  pdf = {Lalonde1997.pdf},
  timestamp = {2007.07.03},
  url = {citeseer.ist.psu.edu/lalonde97wavelet.html}
}

@ARTICLE{Lamport1994,
  author = {Leslie Lamport},
  title = {The temporal logic of actions},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {1994},
  volume = {16},
  pages = {872--923},
  number = {3},
  abstract = {The temporal logic of actions (TLA) is a logic for specifying and
	reasoning about concurrent systems. Systems and their properties
	are represented in the same logic, so the assertion that a system
	meets its specification and the assertion that one system implements
	another are both expressed by logical implication. TLA is very simple;
	its syntax and complete formal semantics are summarized in about
	a page. Yet, TLA is not just a logician's toy; it is extremely powerful,
	both in principle and in practice. This report introduces TLA and
	describes how it is used to specify and verify concurrent algorithms.
	The use of TLA to specify and reason about open systems will be described
	elsewhere.},
  address = {New York, NY, USA},
  comment = {CS428},
  doi = {http://doi.acm.org/10.1145/177492.177726},
  issn = {0164-0925},
  owner = {blerner},
  pdf = {Lamport1994.pdf},
  publisher = {ACM Press},
  timestamp = {2005.11.12}
}

@ARTICLE{Landi1992,
  author = {William Landi},
  title = {Undecidability of static analysis},
  journal = {ACM Letters on Programming Languages and Systems},
  year = {1992},
  volume = {1},
  pages = {323--337},
  number = {4},
  month = dec,
  abstract = {Static analysis of programs is indispensable to any software tool,
	environment, or system that requires compile-time information about
	the semantics of programs. With the emergence of languages like C
	and LISP, static analysis of programs with dynamic storage and recursive
	data structures has become a field of active research. Such analysis
	is difficult, and the static-analysis community has recognized the
	need for simplifying assumptions and approximate solutions. However,
	even under the common simplifying assumptions, such analyses are
	harder than previously recognized. Two fundamental static-analysis
	problems are {\em may alias} and {\em must alias}. The former is
	not recursive (is undecidable), and the latter is not recursively
	enumerable (is uncomputable), even when all paths are executable
	in the program being analyzed for languages with if statements, loops,
	dynamic storage, and recursive data structures.},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/161494.161501},
  issn = {1057-4514},
  keywords = {languages, theory},
  owner = {blerner},
  pdf = {Landi1992.pdf},
  timestamp = {2005.11.12}
}

@BOOK{Larus2006,
  title = {Transactional Memory},
  publisher = {Morgan\&Claypool},
  year = {2006},
  editor = {Mark D. Hill},
  author = {Larus,James R. and Rajwar,Ravi},
  volume = {1},
  number = {1},
  pages = {1-226},
  series = {Synthesis Lectures on Computer Architecture},
  abstract = {The advent of multicore processors has renewed interest in the idea
	of incorporating transactions into the programming model used to
	write parallel programs. This approach, known as transactional memory,
	offers an alternative, and hopefully better, way to coordinate concurrent
	threads. The ACI (atomicity, consistency, isolation) properties of
	transactions provide a foundation to ensure that concurrent reads
	and writes of shared data do not produce inconsistent or incorrect
	results. At a higher level, a computation wrapped in a transaction
	executes atomically – either it completes successfully and commits
	its result in its entirety or it aborts. In addition, isolation ensures
	the transaction produces the same result as if no other transactions
	were executing concurrently. Although transactions are not a parallel
	programming panacea, they shift much of the burden of synchronizing
	and coordinating parallel computations from a programmer to a compiler,
	runtime system, and hardware. The challenge for the system implementers
	is to build an efficient transactional memory infrastructure. This
	book presents an overview of the state of the art in the design and
	implementation of transactional memory systems, as of early summer
	2006.},
  doi = {http://dx.doi.org/10.2200/S00070ED1V01Y200611CAC002},
  eprint = {http://www.morganclaypool.com/doi/pdf/10.2200/S00070ED1V01Y200611CAC002},
  journal = {Synthesis Lectures on Computer Architecture},
  owner = {blerner},
  pdf = {Larus2006.pdf},
  timestamp = {2007.01.05}
}

@INPROCEEDINGS{Lattner2005,
  author = {Chris Lattner and Vikram Adve},
  title = {Automatic pool allocation: improving performance by controlling data
	structure layout in the heap},
  booktitle = {PLDI '05: Proceedings of the 2005 ACM SIGPLAN conference on Programming
	language design and implementation},
  year = {2005},
  pages = {129--142},
  address = {New York, NY, USA},
  publisher =                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
