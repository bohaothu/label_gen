@book{Apt-Olderog91,
author = {Apt, Krzysztof R and Olderog, Ernst R\"{u}diger},
keywords = {Book,Program Verification,Verification},
mendeley-tags = {Book,Program Verification,Verification},
publisher = {Springer-Verlag},
title = {{Verification of Sequential and Concurrent Programs}},
type = {Book},
year = {1991}
}
@inproceedings{Bakewell-Plump-Runciman04b,
abstract = {Graph reduction specifications (GRSs) are a powerful new method for specifying classes of pointer data structures (shapes). They cover important shapes, like various forms of balanced trees, that cannot be handled by existing methods. This paper formally defines GRSs as graph reduction systems with a signature restriction and an accepting graph. We are mainly interested in PGRSs — polynomially-terminating GRSs whose graph languages are closed under reduction and have a polynomial membership test. We investigate the power of the PGRS framework by presenting example specifications and by considering its language closure properties: PGRS languages are closed under intersection; not closed under union (unless we drop the closedness restriction and exclude languages with the empty graph); and not closed under complement. Our practical investigation presents example PGRSs including cyclic lists, trees, balanced trees and red-black trees. In each case we try to make the PGRS as simple as possible where simpler means fewer rules, simpler termination and closure proofs and fewer non-terminals. We show how to prove the correctness of a PGRS and give methods for demonstrating that a given shape cannot be specified by a PGRS with certain simplicity properties.},
author = {Bakewell, Adam and Plump, Detlef and Runciman, Colin},
file = {:usr/cposkitt/local/mendeley\_documents/Bakewell et al - Specifying Pointer Structures by Graph Reduction.pdf:pdf;:usr/cposkitt/local/mendeley\_documents/Bakewell et al - Specifying Pointer Structures by Graph Reduction.pdf:pdf},
keywords = {GRS,Graph formalisms,Graph grammars,Graph transformation,PGRS,Pointers,TGRS},
mendeley-tags = {GRS,Graph formalisms,Graph grammars,Graph transformation,PGRS,Pointers,TGRS},
pages = {30--44},
publisher = {Springer-Verlag},
title = {{Specifying Pointer Structures by Graph Reduction}},
type = {Conference proceedings (article)},
volume = {3062},
year = {2004}
}
@misc{Bakewell-Plump-Runciman03a,
annote = {48 pages

        

        

        

      },
author = {Bakewell, Adam and Plump, Detlef and Runciman, Colin},
file = {:usr/cposkitt/local/mendeley\_documents/Bakewell et al - Technical Report - Specifying Pointer Structures by Graph Reduction.pdf:pdf},
institution = {University of York},
keywords = {GRS,Graph Formalisms,Graph Grammars,Graph Transformation,PGRS,Pointers,TGRS},
mendeley-tags = {GRS,Graph Formalisms,Graph Grammars,Graph Transformation,PGRS,Pointers,TGRS},
number = {YCS-2003-367},
title = {{Specifying Pointer Structures by Graph Reduction}},
type = {Technical report},
year = {2003}
}
@article{Baldan-Corradin-Koenig08a,
abstract = {A framework for the verification of infinite-state graph transformation systems},
author = {Baldan, Paolo and Corradini, Andrea and K\"{o}nig, Barbara},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Baldan, Corradini, K\"{o}nig - 2008 - A framework for the verification of infinite-state graph transformation systems(3).pdf:pdf},
journal = {Information and Computation},
keywords = {Abstraction,Category theory,Graph transformation,Petri nets,Verification},
mendeley-tags = {Abstraction,Category theory,Graph transformation,Petri nets,Verification},
number = {7},
pages = {869--907},
title = {{A framework for the verification of infinite-state graph transformation systems}},
type = {Journal article},
volume = {206},
year = {2008}
}
@book{Bertot-Casteran04a,
author = {Bertot, Yves and Cast\'{e}ran, Pierre},
keywords = {Book,Coq,Theorem proving},
mendeley-tags = {Book,Coq,Theorem proving},
publisher = {Springer-Verlag},
series = {Texts in Theoretical Computer Science},
title = {{Interactive Theorem Proving and Program Development}},
type = {Book},
year = {2004}
}
@inproceedings{Boronat-Heckel-Meseguer09a,
abstract = {Model transformations are used in model-driven develop- ment for mechanizing the interoperability and integration among mod- eling languages. Due to the graph-theoretic nature of models, the theory of graph transformation systems and its technological support provide a convenient environment for formalizing and verifying model transfor- mations, which can then be used for defining the semantics of model- based domain-specific languages. In this paper, we present an approach for formalizing and verifying QVT-like transformations that reuses the main concepts of graph transformation systems. Specifically, we formal- ize model transformations as theories in rewriting logic, so that Maude’s reachability analysis and model checking features can be used for ver- ifying them. This approach also provides a new perspective on graph transformation systems, where their formal semantics is given in rewrit- ing logic. All the ideas presented are implemented in MOMENT2. In this way, we can define formal model transformations in the EclipseModeling Framework (EMF) and we can verify them in Maude. We use a model of a distributed mutual exclusion algorithm to illustrate the approach.},
author = {Boronat, Artur and Heckel, Reiko and Meseguer, Jos\'{e}},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Boronat, Heckel, Meseguer - 2009 - Rewriting Logic Semantics and Verification of Model Transformations(3).pdf:pdf},
keywords = {Graph transformation,LTL model checking,MOF,Maude,Model transformation,QVT,Reachability analysis,Rewriting logic},
mendeley-tags = {Graph transformation,LTL model checking,MOF,Maude,Model transformation,QVT,Reachability analysis,Rewriting logic},
pages = {18--33},
publisher = {Springer-Verlag},
title = {{Rewriting Logic Semantics and Verification of Model Transformations}},
type = {Conference proceedings (article)},
volume = {5503},
year = {2009}
}
@book{Chlipala2009,
author = {Chlipala, Adam},
file = {:usr/cposkitt/local/mendeley\_documents/Chlipala - Certified Programming with Dependent Types.pdf:pdf},
keywords = {Book,Coq},
mendeley-tags = {Book,Coq},
title = {{Certified Programming with Dependent Types}},
url = {http://adam.chlipala.net/cpdt/},
year = {2009}
}
@book{Clarke-Grumberg-Peled99a,
author = {Clarke, Orna Grumberg Edmund M and Peled, Doron A},
keywords = {Book,Model checking},
mendeley-tags = {Book,Model checking},
publisher = {The MIT Press},
title = {{Model Checking}},
type = {Book},
year = {1999}
}
@book{Courcelle,
author = {Courcelle, Bruno},
file = {::;::;:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Courcelle - Unknown - Graph Algebras and Monadic Second-Order Logic(7).pdf:pdf},
keywords = {FOL,Graph algebras,Graph formalisms,MSOL,SOL},
mendeley-tags = {FOL,Graph algebras,Graph formalisms,MSOL,SOL},
publisher = {Cambridge University Press, (in preparation)},
title = {{Graph Algebras and Monadic Second-Order Logic}},
type = {Unpublished work},
url = {http://www.labri.fr/perso/courcell/ActSci.html}
}
@inbook{Cou90,
author = {Courcelle, Bruno},
chapter = {5},
editor = {van Leeuwen, Jan},
keywords = {Book section,FOL,Graph formalisms,Graph rewriting,MSOL,SOL},
mendeley-tags = {Book section,FOL,Graph formalisms,Graph rewriting,MSOL,SOL},
publisher = {Elsevier},
title = {{Graph Rewriting: An Algebraic and Logic Approach}},
type = {Book part (with own title)},
volume = {B},
year = {1990}
}
@inproceedings{Courcelle08a,
abstract = {Graph structure is a flexible concept covering many different types of graph properties. Hierarchical decompositions yielding the notions of tree-width and clique-width, expressed by terms written with appropriate graph operations and associated with Monadic Second-order Logic are important tools for the construction of Fixed-Parameter Tractable algorithms and also for the extension of methods and results of Formal Language Theory to the description of sets of finite graphs. This informal overview presents the main definitions, results and open problems and tries to answer some frequently asked questions.},
author = {Courcelle, Bruno},
file = {::},
keywords = {Graph formalisms,MSOL},
mendeley-tags = {Graph formalisms,MSOL},
pages = {1--13},
publisher = {Springer-Verlag},
title = {{Graph Structure and Monadic Second-Order Logic: Language Theoretical Aspects}},
type = {Conference proceedings (article)},
year = {2008}
}
@inbook{Courcelle1997,
address = {River Edge, NJ, USA},
author = {Courcelle, Bruno},
booktitle = {Handbook of Graph Grammars},
chapter = {5},
isbn = {98-102288-48},
keywords = {FOL,Forbidden configurations,Graph grammars,Graph properties,Graph transformation,MSOL,SOL},
mendeley-tags = {FOL,Forbidden configurations,Graph grammars,Graph properties,Graph transformation,MSOL,SOL},
pages = {313--400},
publisher = {World Scientific Publishing Co., Inc.},
title = {{The expression of graph properties and graph transformations in monadic second-order logic}},
year = {1997}
}
@inbook{Courcelle1997a,
author = {Courcelle, Bruno},
booktitle = {Descriptive complexity and finite models},
chapter = {2},
editor = {Kolaitis, Immerman And},
file = {:usr/cposkitt/local/mendeley\_documents/Courcelle - On the expression of graph properties in some fragments of monadic second-order logic.pdf:pdf},
keywords = {Graph properties,MSOL,SOL},
mendeley-tags = {Graph properties,MSOL,SOL},
pages = {33--62},
publisher = {DIMACS Series in Discrete Mathematics and Theoretical Computer Sciences},
title = {{On the Expression of Graph Properties in some Fragments of Monadic Second-Order Logic}},
year = {1997}
}
@inproceedings{Dodds2009,
abstract = {Hyperedge-replacement grammars and separation-logic formulas both define classes of graph-like structures. In this paper, we relate the different formalisms by effectively translating restricted hyperedge-replacement grammars into formulas of a fragment of separation-logic with recursive predicates, and vice versa. The translations preserve the classes of specified graphs, and hence the two approaches are of equivalent power. It follows that our fragment of separation-logic inherits properties of hyperedge-replacement grammars, such as inexpressibility results. We also show that several operators of full separation logic cannot be expressed using hyperedge replacement.},
author = {Dodds, Mike and Plump, Detlef},
booktitle = {Proceedings of the Doctoral Symposium at the International Conference on Graph Transformation (ICGT 2008)},
file = {:usr/cposkitt/local/mendeley\_documents/Dodds and Plump - From hyperedge replacement to separation logic and back.pdf:pdf},
keywords = {Graph grammars,Graph transformation,Heaps,Hyperedge replacement,Program Verification,Separation logic,graph grammars,graph transformation,hyperedge replacement,program verification,separation logic},
mendeley-tags = {Graph grammars,Graph transformation,Heaps,Hyperedge replacement,Program Verification,Separation logic},
title = {{From Hyperedge Replacement to Separation Logic and Back}},
volume = {16},
year = {2009}
}
@inbook{Drewes1997,
author = {Drewes, Frank and Kreowski, Hans-J\"{o}rg and Habel, Annegret},
booktitle = {Handbook of Graph Grammars},
keywords = {Graph grammars,Hyperedge replacement},
mendeley-tags = {Graph grammars,Hyperedge replacement},
pages = {95--162},
title = {{Hyperedge Replacement, Graph Grammars}},
year = {1997}
}
@incollection{Ehrig1979,
author = {Ehrig, Hartmut},
booktitle = {Graph-Grammars and Their Application to Computer Science and Biology},
chapter = {1},
doi = {10.1007/BFb0025714},
keywords = {Graph grammars,Survey},
mendeley-tags = {Graph grammars,Survey},
pages = {1--69},
series = {Lecture Notes in Computer Science},
title = {{Introduction to the algebraic theory of graph grammars (a survey)}},
url = {http://dx.doi.org/10.1007/BFb0025714},
year = {1979}
}
@book{Ehrig2006,
author = {Ehrig, Hartmut and Ehrig, Karsten and Prange, Ulrike and Taentzer, Gabriele},
keywords = {Book,Category theory,Graph transformation},
mendeley-tags = {Book,Category theory,Graph transformation},
publisher = {Springer},
title = {{Fundamentals of Algebraic Graph Transformation}},
type = {Book},
year = {2006}
}
@incollection{Ehrig-Habel-Lambers10a,
author = {Ehrig, Hartmut and Habel, Annegret and Lambers, Leen},
booktitle = {Manipulation of Graphs, Algebras and Pictures: Essays Dedicated to Hans-J\"{o}rg Kreowski on the Occasion of His 60th Birthday},
editor = {Drewes, Frank and Habel, Annegret and Hoffmann, Berthold and Plump, Detlef},
file = {:usr/cposkitt/local/mendeley\_documents/Ehrig et al - Parallelism and Concurrency Theorems for Rules with Nested Application Conditions.pdf:pdf},
keywords = {Application conditions,Weak adhesive high-level replacement categories},
mendeley-tags = {Application conditions,Weak adhesive high-level replacement categories},
series = {Electronic Communications of the EASST},
title = {{Parallelism and Concurrency Theorems for Rules with Nested Application Conditions}},
volume = {26},
year = {2010}
}
@inproceedings{Gottlob2000,
abstract = {Fagin's (1974) theorem, the first important result of descriptive complexity, asserts that a property of graphs is in NP if and only if it is definable by an existential second-order formula. We study the complexity of evaluating existential second-order formulas that belong to prefix classes of existential second-order logic, where a prefix class is the collection of all existential second-order and the first-order quantifiers obey a certain quantifier pattern. We completely characterize the computation complexity of prefix classes of existential second-order logic in three different contexts: over directed graphs; over undirected graphs with self-loops; and over undirected graphs without self-loops. Our main result is that in each of these three contexts a dichotomy holds, i.e., each prefix class of existential second-order logic either contains sentences that can express NP-complete problems or each of its sentences expresses a polynomial-time solvable problem. Although the boundary of the dichotomy coincides for the first two cases, it changes, as one move to undirected graphs without self-loops.},
address = {Washington, DC, USA},
author = {Gottlob, G and Kolaitis, P G and Schwentick, T},
booktitle = {FOCS '00: Proceedings of the 41st Annual Symposium on Foundations of Computer Science},
isbn = {0-7695-0850-2},
keywords = {Graph formalisms,SOL},
mendeley-tags = {Graph formalisms,SOL},
pages = {664+},
publisher = {IEEE Computer Society},
title = {{Existential second-order logic over graphs: charting the tractability frontier}},
url = {http://portal.acm.org/citation.cfm?id=796598},
year = {2000}
}
@article{citeulike:6056648,
author = {Grohe, Martin},
editor = {Flum},
file = {:usr/cposkitt/local/mendeley\_documents/Grohe - Logic, Graphs, and Algorithms.pdf:pdf},
journal = {Logic and Automata – History and Perspectives},
keywords = {Complexity theory,SOL},
mendeley-tags = {Complexity theory,SOL},
publisher = {Amsterdam University Press},
title = {{Logic, Graphs, and Algorithms}},
year = {2007}
}
@article{Habel2009,
abstract = {In this paper we introduce the notions of nested constraints and application conditions, short nested conditions. For a category associated with a graphical representation such as graphs, conditions are a graphical and intuitive, yet precise, formalism that is well suited to describing structural properties. We show that nested graph conditions are expressively equivalent to first-order graph formulas. A part of the proof includes transformations between two satisfiability notions of conditions, namely \&lt;private-char\&gt;\&lt;inline-graphic mime-subtype="gif" xlink="S0960129508007202\_char1"/>\&lt;/private-char\&gt;-satisfiability and \&lt;private-char\&gt;\&lt;inline-graphic mime-subtype="gif" xlink="S0960129508007202\_char2"/>\&lt;/private-char\&gt;-satisfiability. We consider a number of transformations on conditions that can be composed to construct constraint-guaranteeing and constraint-preserving application conditions, weakest preconditions and strongest postconditions. The restriction of rule applications by conditions can be used to correct transformation systems by pruning transitions leading to states violating given constraints. Weakest preconditions and strongest postconditions can be used to verify the correctness of transformation systems with respect to pre-and postconditions.},
author = {Habel, Annegret and Pennemann, Karl-Heinz},
doi = {10.1017/S0960129508007202},
file = {:usr/cposkitt/local/mendeley\_documents/Habel and Pennemann - Correctness of high-level transformation systems relative to nested conditions.pdf:pdf},
issn = {0960-1295},
journal = {Mathematical. Structures in Comp. Sci.},
keywords = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
mendeley-tags = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
number = {2},
pages = {245--296},
publisher = {Cambridge University Press},
title = {{Correctness of high-level transformation systems relative to nested conditions}},
type = {Journal article},
url = {http://portal.acm.org/citation.cfm?id=1552070},
volume = {19},
year = {2009}
}
@inbook{HabelPennemann2005,
abstract = {Constraints and application conditions are most important for transformation systems in a large variety of application areas. In this paper, we extend the notion of constraints and application conditions to nested ones and show that nested constraints can be successively transformed into nested right and left application conditions.},
author = {Habel, Annegret and Pennemann, Karl-Heinz},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Habel, Pennemann - 2005 - Nested Constraints and Application Conditions for High-Level Structures(3).pdf:pdf},
keywords = {Application conditions,Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
mendeley-tags = {Application conditions,Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
pages = {293--308},
title = {{Nested Constraints and Application Conditions for High-Level Structures}},
type = {Book part (with own title)},
url = {http://www.springerlink.com/content/n743g9609b6yfyqx},
year = {2005}
}
@inproceedings{Habel-Pennemann-Rensink06a,
author = {Habel, Annegret and Pennemann, Karl-Heinz and Rensink, Arend},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Habel, Pennemann, Rensink - 2006 - Weakest Preconditions for High-Level Programs(3).pdf:pdf},
keywords = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
mendeley-tags = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
pages = {445--460},
publisher = {Springer-Verlag},
title = {{Weakest Preconditions for High-Level Programs}},
type = {Conference proceedings (article)},
volume = {4178},
year = {2006}
}
@inbook{Habel2001,
abstract = {We identify a set of programming constructs ensuring that a programming language based on graph transformation is computationally complete. These constructs are (1) nondeterministic application of a set of graph transformation rules, (2) sequential composition and (3) iteration. This language is minimal in that omitting either sequential composition or iteration results in a computationally incomplete language. By computational completeness we refer to the ability to compute every computable partial function on labelled graphs. Our completeness proof is based on graph transformation programs which encode arbitrary graphs as strings, simulate Turing machines on these strings, and decode the resulting strings back into graphs.},
author = {Habel, Annegret and Plump, Detlef},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Habel, Plump - 2001 - Computational Completeness of Programming Languages Based on Graph Transformation(3).pdf:pdf},
keywords = {Completeness proof,Graph programs,Turing machines},
mendeley-tags = {Completeness proof,Graph programs,Turing machines},
title = {{Computational Completeness of Programming Languages Based on Graph Transformation}},
type = {Book part (with own title)},
url = {http://www.springerlink.com/content/bgb26erewwfq8p4p},
year = {2001}
}
@inproceedings{Habel2002,
abstract = {The traditional double-pushout approach to graph transformation does not allow to change node labels in an arbitrary context.
  We propose a simple solution to this problem, namely to use rules with partially labelled interface graphs and to match rules
  injectively. In [8] we have shown that injective matching makes the double-pushout approach more expressive, and here we further generalise
  that approach. Besides solving the relabelling problem, our framework allows to write rules with partially labelled left-hand
  sides which are equivalent to (possibly infinite) sets of rules in the traditional setting. Unlike previous work on rules
  with partially labelled graphs, we do not need any labelling condition on matching morphisms, nor do we exclude node merging
  rules.},
address = {Berlin, Heidelberg},
author = {Habel, Annegret and Plump, Detlef},
booktitle = {ICGT 2002},
doi = {10.1007/3-540-45832-8},
file = {:usr/cposkitt/local/mendeley\_documents/Habel and Plump - Relabelling in Graph Transformation.pdf:pdf},
isbn = {978-3-540-44310-0},
pages = {135--147},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Relabelling in Graph Transformation}},
url = {http://www.springerlink.com/content/wwnljmhhgdk65nt0},
volume = {2505},
year = {2002}
}
@inproceedings{HabelRadke2010,
author = {Habel, Annegret and Radke, Hendrik},
booktitle = {Electronic Communications of the EASST},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Habel, Radke - 2010 - Expressiveness of graph conditions with variables(3).pdf:pdf},
keywords = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,HR graph conditions,Hyperedge replacement,MSOL,Nested conditions,SOL,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
mendeley-tags = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,HR graph conditions,Hyperedge replacement,MSOL,Nested conditions,SOL,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
title = {{Expressiveness of graph conditions with variables}},
year = {2010}
}
@book{Harary1969,
author = {Harary, Frank},
keywords = {Book,Graph theory},
mendeley-tags = {Book,Graph theory},
publisher = {Addison-Wesley},
title = {{Graph Theory}},
year = {1969}
}
@book{Hein2002,
author = {Hein, James L.},
edition = {2nd},
keywords = {Computability,Logic},
mendeley-tags = {Computability,Logic},
publisher = {Jones and Bartlett Publishers, Inc.},
title = {{Discrete Structures, Logic, and Computability}},
year = {2002}
}
@article{Koch2005,
abstract = {Graph-based specification formalisms for access control (AC) policies combine the advantages of an intuitive visual framework with a rigorous semantical foundation that allows the detailed comparison of different policy models. A security policy framework specifies a set of (constructive) rules to build the system states and sets of positive and negative (declarative) constraints to specify wanted and unwanted substates. Several models for AC (e.g. role-based, lattice-based or an access control list) can be specified in this framework. The framework is used for an accurate analysis of the interaction between policies and of the behavior of their integration with respect to the problem of inconsistent policies. Using formal properties of graph transformations, it is possible to systematically detect inconsistencies between constraints, between rules and between a rule and a constraint and lay the foundation for their resolutions.},
author = {Koch, M and Mancini, L and Parisipresicce, F},
doi = {10.1016/j.jcss.2004.11.002},
file = {:usr/cposkitt/local/mendeley\_documents/Koch and Mancini - Graph-based specification of access control policies.pdf:pdf},
issn = {00220000},
journal = {Journal of Computer and System Sciences},
keywords = {Graph formalisms,Graph transformation,Security policy,access control,conflict detection,consistency,graph transformation,graphical constraints,policy,security},
mendeley-tags = {Graph formalisms,Graph transformation,Security policy},
number = {1},
pages = {1--33},
title = {{Graph-based specification of access control policies}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S002200000400145X},
volume = {71},
year = {2005}
}
@book{Martin2002,
author = {Martin, John},
edition = {3rd},
keywords = {Computability,Logic},
mendeley-tags = {Computability,Logic},
publisher = {McGraw-Hill},
title = {{Introduction to Languages and the Theory of Computation}},
year = {2002}
}
@book{Nielson-Nielson07a,
author = {Nielson, Hanne Riis and Nielson, Flemming},
keywords = {Book,Semantics,Verification},
mendeley-tags = {Book,Semantics,Verification},
publisher = {Springer-Verlag},
title = {{Semantics with Applications: An Appetizer}},
type = {Book},
year = {2007}
}
@inproceedings{Orejas2008,
author = {Orejas, Fernando and Ehrig, Hartmut and Prange, Ulrike},
booktitle = {FASE 2008},
file = {:usr/cposkitt/local/mendeley\_documents/Orejas et al - A logic of graph constraints.pdf:pdf},
keywords = {Graph transformation,Logic,Nested conditions},
mendeley-tags = {Graph transformation,Logic,Nested conditions},
pages = {179--198},
title = {{A Logic of Graph Constraints}},
year = {2008}
}
@inbook{Orejas-Wirsing09a,
abstract = {Model transformation is one of the key notions in the model-driven engineering approach to software development. Most work in this area concen- trates on designing methods and tools for defining or implementing transforma- tions, on defining interesting specific classes of transformations, or on proving properties about given transformations, like confluence or termination. However little attention has been paid to the verification of transformations. In this sense, the aim of this work is, on one hand, to clarify what means to verify a model transformation and, on the other, to propose a specific approach for proving the correctness of transformations. More precisely, we use some general patterns to describe both the transformation and the properties that we may want to verify. Then, we provide amethod for proving the correctness of a given transformation.},
author = {Orejas, Fernando and Wirsing, Martin},
editor = {Palsberg, Jens},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Orejas, Wirsing - 2009 - On the Specification and Verification of Model Transformations(3).pdf:pdf},
keywords = {Correctness proof,Graph transformation,Model transformation,Verification},
mendeley-tags = {Correctness proof,Graph transformation,Model transformation,Verification},
pages = {140--161},
publisher = {Springer-Verlag},
title = {{On the Specification and Verification of Model Transformations}},
type = {Book part (with own title)},
volume = {5700},
year = {2009}
}
@phdthesis{citeulike:6335570,
author = {Pennemann, Karl-Heinz},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Pennemann - 2009 - Development of Correct Graph Transformation Systems(3).pdf:pdf},
keywords = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Thesis,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
mendeley-tags = {Category theory,FOL,Graph formalisms,Graph programs,Graph transformation,Nested conditions,Thesis,Verification,Weak adhesive high-level replacement categories,Weakest preconditions},
month = {May},
school = {University of Oldenburg},
title = {{Development of Correct Graph Transformation Systems}},
year = {2009}
}
@inproceedings{Pennemann08a,
abstract = {The tautology problem is the problem to prove the validity of statements. In this paper, we present a calculus for this undecidable problem on graphical conditions, prove its soundness, investigate the necessity of each deduction rule, and discuss practical aspects concerning an implementation. As we use the framework of weak adhesive HLR categories, the calculus is applicable to a number of replacement capable structures, such as Petri-Nets, graphs or hypergraphs.},
author = {Pennemann, Karl-Heinz},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Pennemann - 2008 - Resolution-Like Theorem Proving for High-Level Conditions(3).pdf:pdf},
keywords = {Category theory,FOL,First-order tautology problem,Graph formalisms,Graph transformation,Nested conditions,Resolution,Theorem proving,Weak adhesive high-level replacement categories},
mendeley-tags = {Category theory,FOL,First-order tautology problem,Graph formalisms,Graph transformation,Nested conditions,Resolution,Theorem proving,Weak adhesive high-level replacement categories},
pages = {289--304},
publisher = {Springer-Verlag},
title = {{Resolution-Like Theorem Proving for High-Level Conditions}},
type = {Conference proceedings (article)},
volume = {5214},
year = {2008}
}
@unpublished{Plump,
abstract = {GP (for Graph Programs) is a rule-based, nondeterministic programming language for solving graph problems at a high level of abstraction, freeing programmers from handling low-level data structures. The core of GP consists of four constructs: single-step application of a set of conditional graph-transformation rules, sequential composition, branching and iteration. This paper gives an overview on the GP project. We introduce the language by discussing a sequence of small programming case studies, formally explain conditional rule schemata which are the building blocks of programs, and present a semantics for
GP in the style of structural operational semantics. A special feature of the semantics is how it uses the notion of finitely failing programs to define powerful branching and iteration commands. We also describe GPs prototype implementation.},
author = {Plump, Detlef},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Plump - Unknown - The Graph Programming Language GP(3).pdf:pdf},
keywords = {GP,Graph programs,Graph transformation,Overview,Semantics},
mendeley-tags = {GP,Graph programs,Graph transformation,Overview,Semantics},
title = {{The Graph Programming Language GP}},
type = {Unpublished work}
}
@inproceedings{Plump-Steinert09a,
annote = {To appear},
author = {Plump, Detlef and Steinert, Sandra},
booktitle = {Proc. Rule-Based Programming (RULE 2009)},
file = {:usr/cposkitt/local/mendeley\_documents/Plump and Steinert - The Semantics of Graph Programs.pdf:pdf},
keywords = {GP,Graph programs,Graph transformation,Semantics},
mendeley-tags = {GP,Graph programs,Graph transformation,Semantics},
series = {Electronic Proceedings in Theoretical Computer Science},
title = {{The Semantics of Graph Programs}}
}
@inbook{Rensink08a,
abstract = {In this paper we present the philosophy behind the GROOVE project, in which graph transformation is used as a modelling formalism on top of which a model checking approach to software verification is being built. We describe the basic formalism, the current state of the project, and (current and future) challenges.},
author = {Rensink, Arend},
file = {::},
keywords = {GROOVE,Graph transformation,Model checking,Modelling formalism},
mendeley-tags = {GROOVE,Graph transformation,Model checking,Modelling formalism},
pages = {114--132},
publisher = {Springer-Verlag},
title = {{Explicit State Model Checking for Graph Grammars}},
type = {Book part (with own title)},
volume = {5065},
year = {2008}
}
@misc{Rensink2004,
abstract = {We show how edge-labelled graphs can be used to represent first-order logic formulae. This gives rise to recursively nested structures, in which each level of nesting corresponds to the negation of a set of existentials. The model is a direct generalisation of the negative application conditions used in graph rewriting, which count a single level of nesting and are thereby shown to correspond to the fragment \$\backslash exists \backslash neg \backslash exists\$ of first-order logic. Vice versa, this generalisation may be used to strengthen the notion of application conditions. We then proceed to show how these nested models may be flattened to (sets of) plain graphs, by allowing some structure on the labels. The resulting formulae-as-graphs may form the basis of a unification of the theories of graph transformation and predicate transformation.},
author = {Rensink, Arend},
booktitle = {Graph Transformations},
file = {:usr/cposkitt/local/mendeley\_documents/Rensink - Representing First-Order Logic Using Graphs.pdf:pdf},
keywords = {FOL,Graph formalisms},
mendeley-tags = {FOL,Graph formalisms},
pages = {187--190},
title = {{Representing First-Order Logic Using Graphs}},
url = {http://www.springerlink.com/content/ac063g2bhfp99xcw},
year = {2004}
}
@inproceedings{Rensink-Schmidt-Varro04a,
abstract = {Model checking is increasingly popular for hardware and, more recently, software verification. In this paper we describe two dif- ferent approaches to extend the benefits of model checking to systems whose behavior is specified by graph transformation systems. One ap- proach is to encode the graphs into the fixed state vectors and the trans- formation rules into guarded commands that modify these state vectors appropriately to enjoy all the benefits of the years of experience incorpo- rated in existing model checking tools. The other approach is to simulate the graph production rules directly and build the state space directly from the resultant graphs and derivations. This avoids the preprocessing phase, and makes additional abstraction techniques available to handle symmetries and dynamic allocation. In this paper we compare these approaches on the basis of three case studies elaborated in both of them, and we evaluate the results. Our conclusion is that the first approach outperforms the second if the dynamic and/or symmetric nature of the problem under analysis is limited, while the second shows its superiority for inherently dynamic and symmetric problems.},
author = {Rensink, Arend and Schmidt, \'{A}kos and Varr\'{o}, D\'{a}niel},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Rensink, Schmidt, Varr\'{o} - 2004 - Model Checking Graph Transformations A Comparison of Two Approaches(3).pdf:pdf},
keywords = {Graph transformation,Logic properties,Model checking,Semantics},
mendeley-tags = {Graph transformation,Logic properties,Model checking,Semantics},
pages = {226--241},
publisher = {Springer-Verlag},
title = {{Model Checking Graph Transformations: A Comparison of Two Approaches}},
type = {Conference proceedings (article)},
volume = {3256},
year = {2004}
}
@book{Reynolds98a,
author = {Reynolds, John C},
keywords = {Book,Verification},
mendeley-tags = {Book,Verification},
publisher = {Cambridge University Press},
title = {{Theories of Programming Languages}},
type = {Book},
year = {1998}
}
@article{Reynolds,
abstract = {In joint work with Peter O’Hearn and others, based on early ideas of Burstall, we have developed an extension of Hoare logic that permits reasoning about low-level impera- tive programs that use shared mutable data structure. The simple imperative programming language is ex- tended with commands (not expressions) for accessing and modifying shared structures, and for explicit allocation and deallocation of storage. Assertions are extended by intro- ducing a “separating conjunction” that asserts that its sub- formulas hold for disjoint parts of the heap, and a closely related “separating implication”. Coupled with the induc- tive definition of predicates on abstract data structures, this extension permits the concise and flexible description of structures with controlled sharing. In this paper, we will survey the current development of this program logic, including extensions that permit unre- stricted address arithmetic, dynamically allocated arrays, and recursive procedures. We will also discuss promising future directions.},
author = {Reynolds, John C},
doi = {10.1109/LICS.2002.1029817},
file = {::},
isbn = {0-7695-1483-9},
journal = {Proceedings 17th Annual IEEE Symposium on Logic in Computer Science},
keywords = {Hoare logic,Separation logic},
mendeley-tags = {Hoare logic,Separation logic},
number = {1},
pages = {55--74},
publisher = {IEEE Comput. Soc},
title = {{Separation logic: a logic for shared mutable data structures}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1029817},
volume = {1}
}
@article{Ohearn,
abstract = {We describe an extension of Hoare’s logic for reasoning about programs that alter data structures. We consider a low-level storage model based on a heap with associated lookup, update, allocation and deallocation operations, and unrestricted address arithmetic. The asser- tion language is based on a possible worlds model of the logic of bunched implications, and includes spatial conjunction and implication connec- tives alongside those of classical logic. Heap operations are axiomatized using what we call the “small axioms”, each of which mentions only those cells accessed by a particular command. Through these and a number of examples we show that the formalism supports local reasoning: A speci- fication and proof can concentrate on only those cells in memory that a program accesses. This paper builds on earlier work by Burstall, Reynolds, Ishtiaq and O'Hearn on reasoning about data structures.},
author = {Reynolds, John C and O'hearn, P W and Yang, H},
file = {:usr/cposkitt/local/mendeley\_documents/O'Hearn et al - Local Reasoning about Programs that Alter Data Structures.pdf:pdf},
journal = {In L. Fribourg, editor, Computer Science Logic, volume 2142 of Lecture Notes in Computer Science},
keywords = {Hoare logic,Separation logic},
mendeley-tags = {Hoare logic,Separation logic},
pages = {1--19},
title = {{Local reasoning about programs that alter data structures}},
volume = {pages}
}
@article{Robinson1965,
author = {Robinson, J A},
doi = {10.1145/321250.321253},
file = {:usr/cposkitt/local/mendeley\_documents/Robinson - A Machine-Oriented Logic Based on the Resolution Principle.pdf:pdf},
issn = {0268-1145},
journal = {J. ACM},
keywords = {FOL,Resolution,Theorem proving},
mendeley-tags = {FOL,Resolution,Theorem proving},
month = {April},
number = {1},
pages = {23--41},
title = {{A Machine-Oriented Logic Based on the Resolution Principle}},
volume = {12},
year = {1965}
}
@phdthesis{Steinert2007,
author = {Steinert, Sandra},
file = {:usr/cposkitt/local/mendeley\_documents/steinert.pdf:pdf},
keywords = {GP,GP+,Graph programs,Graph transformation,Planarity testing,Semantics,Thesis},
mendeley-tags = {GP,GP+,Graph programs,Graph transformation,Planarity testing,Semantics,Thesis},
publisher = {Springer},
school = {The University of York},
title = {{The Graph Programming Language GP}},
url = {http://www.cs.york.ac.uk/ftpdir/reports/2007/YCST/15/YCST-2007-15.pdf},
year = {2007}
}
@article{Stockmeyer1976,
abstract = {The polynomial-time hierarchy is that subrecursive analog of the Kleene arithmetical hierarchy in which deterministic (nondeterministic) polynomial time plays the role of recursive (recursively enumerable) time. Known properties of the polynomial-time hierarchy are summarized. A word problem which is complete in the second stage of the hierarchy is exhibited. In the analogy between the polynomial-time hierarchy and the arithmetical hierarchy, the first order theory of equality plays the role of elementary arithmetic (as the $\omega$-jump of the hierarchy). The problem of deciding validity in the theory of equality is shown to be complete in polynomial-space, and close upper and lower bounds on the space complexity of this problem are established.},
author = {Stockmeyer, L},
doi = {10.1016/0304-3975(76)90061-X},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Stockmeyer - 1976 - The polynomial-time hierarchy(3).pdf:pdf},
issn = {03043975},
journal = {Theoretical Computer Science},
keywords = {PH,Polynomial hierarchy,SOL},
mendeley-tags = {PH,Polynomial hierarchy,SOL},
month = {October},
number = {1},
pages = {1--22},
title = {{The polynomial-time hierarchy}},
url = {http://dx.doi.org/10.1016/0304-3975(76)90061-X},
volume = {3},
year = {1976}
}
@article{Uesu78a,
author = {Uesu, Tadahiro},
file = {:usr/cposkitt/local/mendeley\_documents/Tadahiro Uesu - A System of Graph Grammars Which Generates All Recursively Enumerable Sets of Labelled Graphs.pdf:pdf},
journal = {Tsukuba Journal of Mathematics},
keywords = {Graph grammars},
mendeley-tags = {Graph grammars},
pages = {11--26},
title = {{A System of Graph Grammars which Generates all Recursively Enumerable Sets of Labelled Graphs}},
type = {Journal article},
volume = {2},
year = {1978}
}
@misc{Varro2002,
abstract = {Graph transformation has recently become more and more popular as a general, rule-based visual specification paradigm to formally capture the operational semantics of modeling languages based on metamodeling techniques as demonstrated by benchmark applications focusing on the formal treatment of the Unified Modeling Language (UML). In the paper, we enable model checking-based symbolic verification for such modeling languages by providing a meta-level transformation of well-formed model instances into SAL specifications. We also discuss several optimizations in the translation process that makes our approach efficient and independent of the SAL framework.},
author = {Varro, Daniel and Varr\'{o}, D\'{a}niel},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Varro, Varr\'{o} - 2002 - Towards Symbolic Analysis of Visual Modeling Languages(2).pdf:pdf},
keywords = {Graph transformation,Metamodelling,Model checking,Verification},
mendeley-tags = {Graph transformation,Metamodelling,Model checking,Verification},
title = {{Towards Symbolic Analysis of Visual Modeling Languages}},
type = {Electronic citation},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.19.1448},
year = {2002}
}
@article{Varro2004,
abstract = {Graph transformation has recently become more and more popular as a general, rule-based visual specification paradigm to formally capture (a) requirements or behavior of user models (on the model-level), and (b) the operational semantics of modeling languages (on the meta-level) as demonstrated by benchmark applications around the Unified Modeling Language (UML). The current paper focuses on the model checking-based automated formal verification of graph transformation systems used either on the model-level or meta-level. We present a general translation that inputs (i) a metamodel of an arbitrary visual modeling language, (ii) a set of graph transformation rules that defines a formal operational semantics for the language, and (iii) an arbitrary well-formed model instance of the language and generates a transitions system (TS) that serve as the underlying mathematical specification formalism of various model checker tools. The main theoretical benefit of our approach is an optimization technique that projects only the dynamic parts of the graph transformation system into the target transition system, which results in a drastical reduction in the state space. The main practical benefit is the use of existing back-end model checker tools, which directly provides formal verification facilities (without additional efforts required to implement an analysis tool) for many practical applications captured in a very high-level visual notation. The practical feasibility of the approach is demonstrated by modeling and analyzing the well-known verification benchmark of dining philosophers both on the model and meta-level.},
author = {Varr\'{o}, D\'{a}niel},
doi = {10.1007/s10270-003-0050-x},
file = {:usr/cposkitt/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Varr\'{o} - 2004 - Automated formal verification of visual modeling languages by model checking(2).pdf:pdf},
issn = {1619-1366},
journal = {Software and Systems Modeling},
keywords = {Graph transformation,Metamodelling,Model checking,Verification},
mendeley-tags = {Graph transformation,Metamodelling,Model checking,Verification},
month = {May},
number = {2},
pages = {85--113},
title = {{Automated formal verification of visual modeling languages by model checking}},
type = {Journal article},
url = {http://www.springerlink.com/content/7j8k1h7lkh2p181d},
volume = {3},
year = {2004}
}
@book{Wilson1985,
author = {Wilson, Robin J},
keywords = {Book,Graph theory},
mendeley-tags = {Book,Graph theory},
publisher = {Longman Scientific $\backslash$$\backslash$verb1\&1 Technical},
title = {{Introduction to Graph Theory}},
year = {1985}
}
