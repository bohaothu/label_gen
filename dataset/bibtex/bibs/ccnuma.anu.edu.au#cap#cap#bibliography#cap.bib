@inproceedings{PBMN92,
   author = {Peter Bailey and Malcolm Newey},
   booktitle = {Proceedings of the ACM SIGPLAN Workshop on ML and its Applications},
   pages = {163--168},
   title = {Implementing {ML} on the {F}ujitsu {AP1000}},
   keywords = {ML functional language paraML},
   month = jun,
   year = 1992
}

@inproceedings{PBMN92a,
   author = {Peter Bailey and Malcolm Newey},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Design and Implementation of Extensions to {ML} for Functional Programming on the {F}ujitsu {AP1000}},
   keywords = {ML functional language paraML},
   month = nov,
   year = 1992
}

@inproceedings{PBMN93,
   author = {Peter Bailey and Malcolm Newey},
   editor = {Gopal Gupta and George Mohay and Rodney Topor},
   booktitle = {Proceedings of the Sixteenth Australian Computer Science Conference},
   pages = {387--396},
   title = {An Extension of {ML} for Distributed Memory Multicomputers},
   keywords = {ML functional language paraML},
   month = feb,
   year = 1993
}

@article{PBMN93a,
   author = {Peter Bailey and Malcolm Newey},
   address = {Boulder, Colorado, USA},
   journal = {Workshop on Languages, Compilers, and Run-Time Environments for Distributed Memory Multiprocessors ACM SIGPLAN Notices},
   number = {1},
   pages = {59--63},
   title = {Implementing {ML} on Distributed Memory Multiprocessors},
   keywords = {ML functional language paraML},
   volume = {28},
   month = jan,
   year = 1993
}

@article{SB93,
   author = {Steve Ball},
   address = {Sebastopol, CA, USA},
   editor = {Adrian Nye},
   journal = {The X Resource},
   volume = 5,
   pages = {167--181},
   publisher = {O'Reilly \& Associates, Inc},
   title = {Distributed Memory Multicomputers As {X} Clients},
   keywords = {X graphics},
   month = jan # { 18 },
   year = 1993
}

@inproceedings{TB91,
   author = {T. Bossomaier},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {E1--E11},
   title = {Data Parallelism on {MIMD} Machines},
   keywords = {data parallel},
   month = nov,
   year = 1991
}

@inproceedings{TB90,
   author = {Terry Bossomaier},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {Towards a Uniform Software Environment for Local Memory Parallel Computers},
   month = nov # { 19--20},
   year = 1990,
   keywords = {software environment CrOS Express}
}

@inproceedings{RPB91,
   author = {R. P. Brent},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {G1--G13},
   title = {The {LINPACK} Benchmark on the {AP1000}: Preliminary Report},
   keywords = {LINPACK linear algebra numeric},
   month = nov,
   year = 1991
}

@inproceedings{RPBPES92,
   author = {Richard P. Brent and Peter E. Strazdins},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Implementation of the {BLAS} Level 3 and {LINPACK} benchmark on the {AP1000}},
   keywords = {LINPACK linear algebra numeric BLAS},
   month = nov,
   year = 1992
}

@article{RPBPES92a,
   author = {Richard P. Brent and Peter E. Strazdins},
   journal = {TR-CS-92-14},
   title = {Implementation of the {BLAS} Level 3 and {LINPACK} benchmark on the {AP1000}},
   keywords = {LINPACK linear algebra numeric BLAS},
   month = oct,
   year = 1992
}

@inproceedings{BMB91,
   author = {B. M. Broom},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {R1--R7},
   title = {Implementation and Performance of the Acacia File System},
   keywords = {parallel file system Acacia},
   month = nov,
   year = 1991
}

@inproceedings{BMB93,
   author = {Bradley M. Broom},
   editor = {Gopal Gupta George Mohay Rodney Topor},
   booktitle = {Proceedings of the Sixteenth Australian Computer Science Conference},
   pages = {501--512},
   title = {A Synchronous File Server for Distributed File Systems},
   keywords = {parallel file system Acacia},
   month = feb,
   year = 1993
}

@techreport{BMB93a,
   author = {Bradley M. Broom},
   number = {TR-CS-93-08},
   title = {User-mode Per-process Names Spaces for the {AP1000} File System},
   institution = {Australian National University},
   keywords = {parallel file system Acacia},
   month = sep,
   year = 1993
}

@techreport{BMBPB93,
   author = {Bradley M. Broom and Peter Bailey},
   number = {TR-CS-93-09},
   title = {{RPC} Protocols},
   keywords = {RPC},
   institution = {Australian National University},
   month = nov,
   year = 1993
}

@techreport{BMBPB93a,
   author = {Bradley M. Broom and Peter Bailey},
   number = {TR-CS-93-10},
   title = {File Cache},
   keywords = {parallel file system Acacia},
   institution = {Australian National University},
   month = nov,
   year = 1993
}

@techreport{PB93,
   author = {Peter Bailey},
   number = {TR-CS-93-11},
   title = {Data Parallelism in {paraML}},
   institution = {Australian National University},
   keywords = {ML paraML data parallel},
   month = dec,
   year = 1993
}

@techreport{BBZRPB93,
   author = {B. B. Zhou and R. P. Brent},
   number = {TR-CS-93-12},
   title = {Parallel Implementation of {QRD} Algorithm on the Fujitsu {AP1000}},
   institution = {Australian National University},
   keywords = {QRD},
   month = dec,
   year = 1993
}

@techreport{ACPS94,
   author = {Adam Czezowski and Peter Strazdins},
   number = {TR-CS-94-03},
   title = {Optimisations for the Memory Hierarchy of a Singular Value Decomposition Algorithm Implemented on the {MIMD} Architecture},
   institution = {Australian National University},
   keywords = {linear algebra numeric},
   month = feb,
   year = 1994,
   postscript = {ACPS94.ps.gz}
}

@techreport{PB94,
   author = {Peter Bailey},
   number = {TR-CS-94-04},
   title = {{ParaML} Programming Manual},
   keywords = {paraML ML functional language},
   institution = {Australian National University},
   month = feb,
   year = 1994
}

@inproceedings{BMBRC90,
   author = {Bradley M. Broom and Robert Cohen},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {Acacia: A Distributed, Parallel File System for the {CAP-II}},
   keywords = {parallel file system Acacia},
   month = nov # { 19--20},
   year = 1990,
}

@inproceedings{RCBM91,
   author = {R. Cohen and B. Molinari},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {T1--T10},
   title = {Implementation of {C-Linda} for the {AP1000}},
   keywords = {Linda parallel language},
   month = nov,
   year = 1991
}

@inproceedings{RC92,
   author = {Robert Cohen},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Optimising {Linda} Implementations for Distributed Memory Multicomputers},
   keywords = {Linda parallel language},
   month = nov,
   year = 1992
}

@techreport{BCPM92,
   author = {Brian Corrie and Paul Mackerras},
   number = {TR-CS-92-11},
   title = {Parallel Volume Rendering and Data Coherence},
   keywords = {parallel volume rendering visualisation visualization},
   institution = {Australian National University},
   month = aug,
   year = 1992,
   postscript = {BCPM92.ps.gz},
   abstract = {
Many scientific and engineering disciplines, through physical
measurements or computational simulations, generate large scale
three-dimensional data sets. Both the physical size 
and the computational resources needed to render these data sets
present a challenge to current rendering architectures and techniques.
 
The Fujitsu AP1000 has the memory capacity and the processing speed
to render large three-dimensional data sets at interactive or
near-interactive speeds. A parallel version of a volume renderer has been
implemented using a ray-casting technique on this architecture.
The two key issues in implementing this technique on a distributed
memory, MIMD machine such as the AP1000 are the {\em work}
and {\em data distribution}. To perform the data distribution, a
{\em distributed virtual memory} for volume data is used.
The importance of utilizing the {\em data coherence} that is inherent
in volume data is demonstrated through the analysis of several case studies.
}
}

@inproceedings{BCPM92a,
   author = {Brian Corrie and Paul Mackerras},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Parallel Volume Rendering and Data Coherence on the {Fujitsu} {AP1000}},
   keywords = {parallel volume rendering visualisation visualization},
   month = nov,
   year = 1992
}

@techreport{BCPM93b,
   author = {Brian Corrie and Paul Mackerras},
   number = {TR-CS-93-02},
   title = {Data Shader Language and Interface Specification},
   keywords = {parallel volume rendering visualisation visualization},
   institution = {Australian National University},
   month = jun,
   year = 1993,
   postscript = {BCPM93b.ps.gz},
   abstract = {
The process of visualizing a scientific data set benefits from an
extensive knowledge of the domain in which the data set is created. Because
an in-depth knowledge of all scientific domains is not available to the
creator of a visualization system, a flexible and extensible system is
essential in providing a productive tool to the scientist. One approach
to providing this flexibility is through a {\em shading language} that
enables users to write programmable {\em data shaders} that determine how
scientific data sets are rendered.
 
This paper describes the implementation of such a shading system. The
system consists of two parts, a {\em shader library} and a {\em shader
compiler}. The shader library does not provide a shading model directly,
but instead provides a means of loading and binding externally
created shaders to a rendering engine which uses the library. The shader
compiler is used to compile a shader description, written in the shading
language, into a form that the shader library can load. The shader library
has been used in both a ray-tracing geometric renderer and a ray-casting
volume renderer. 
}
}

@inproceedings{ACPES91,
   author = {A. Czezowski and P. E. Strazdins},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {J1--J12},
   title = {Singular Value Computation on the {AP1000}},
   keywords = {linear algebra numeric},
   month = nov,
   year = 1991
}

@inproceedings{DH91,
   author = {David Hawking},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {S1--S8},
   title = {High Speed Search of Large Text Bases on the {Fujitsu} {AP1000}},
   keywords = {text retrieval},
   month = nov,
   year = 1991
}

@inproceedings{DH92,
   author = {David Hawking},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {{PADDY's} Progress (Further Experiments in Free-Text Retrieval on the {AP1000})},
   keywords = {text retrieval},
   month = nov,
   year = 1992,
   postscript = {DH92.ps.gz}
}

@inproceedings{CWJPM90,
   author = {C. W. Johnson and P. Mackerras},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {A {SPMD} Monitor/Debugger for the Fujitsu Cellular Array Processor},
   keywords = {parallel debugger},
   month = nov # { 19--20},
   year = 1990,
}

@inproceedings{CWJPM91,
   author = {C. W. Johnson and P. Mackerras},
   booktitle = {Proceedings of Australian Software Engineering Conference},
   title = {Design of a Replay Debugger for a Large Cellular Array Processor},
   keywords = {parallel debugger},
   year = {1991},
   postscript = {CWJPM91.ps.gz}
}

@inproceedings{CWJPM91a,
   author = {C. W. Johnson and P. Mackerras},
   title = {Architecture of an Extensible Parallel Debugger},
   booktitle = {Proceedings of the 1991 International Conference on Parallel Processing},
   keywords = {parallel debugger},
   pages = {262--263},
   month = aug,
   year = 1991,
   postscript = {CWJPM91a.ps.gz}
}

@inproceedings{CWJPBTDWMZ91,
   author = {C. W. Johnson and P. B. Thistlewaite and D. Walsh and M. Zellner},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {C1--C15},
   title = {Developing Monitoring and Debugging Tools for the {AP1000} Array Multiprocessor},
   keywords = {parallel debugger},
   month = nov,
   year = 1991
}

@techreport{CJPM91,
   author = {Chris Johnson and Paul Mackerras},
   number = {TR-CS-91-08},
   title = {Architecture of an Extensible Parallel Debugger},
   keywords = {parallel debugger},
   institution = {Australian National University},
   year = 1991
}

@techreport{CJPM91a,
   author = {Chris Johnson and Paul Mackerras},
   number = {TR-CS-91-07},
   title = {Design of a Replay Debugger for a Large Cellular Array Processor},
   keywords = {parallel debugger},
   institution = {Australian National University},
   year = 1991
}

@inproceedings{BFLBMB92,
   author = {Berin F. Lautenbach and Bradley M. Broom},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {A parallel filesystem for the {AP1000}},
   month = nov,
   year = 1992
}

@inproceedings{ARLTB90,
   author = {Adrian R. Loeff and Terry Bossomaier},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {Parallel Computation of the Hausdorff Distance Between Sets Using {CASIM}},
   month = nov # { 19--20},
   year = 1990,
   keywords = {application hausdorff numeric}
}

@inproceedings{PM91,
   author = {P. Mackerras},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {Q1--Q9},
   title = {Scientific Visualization Algorithms on the {AP1000}},
   keywords = {parallel volume rendering visualisation visualization},
   month = nov,
   year = 1991
}

@techreport{PM92,
   author = {Paul Mackerras},
   number = {TR-CS-92-10},
   title = {A Fast Parallel Marching-Cubes Implementation on the {Fujitsu} {AP1000}},
   keywords = {parallel volume rendering visualisation visualization},
   institution = {Australian National University},
   month = aug,
   year = 1992
}

@inproceedings{PM92a,
   author = {Paul Mackerras},
   booktitle = {Proceedings of the First Annual Users' Meeting of {Fujitsu} Parallel Computing Research Facilities},
   title = {A Fast Parallel Marching-Cubes Implementation on the {Fujitsu} {AP1000}},
   keywords = {parallel volume rendering visualisation visualization},
   month = nov,
   year = 1992
}

@inproceedings{KMBDMK91,
   author = {K. Malysiak and B. D. McKay},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {X1--X10},
   title = {Combinatorial Optimisation on the {AP1000}},
   keywords = {combinatorial},
   month = nov,
   year =  1991
}

@inproceedings{GMPT91,
   author = {G. Michael and P. Tang},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {D1--D11},
   title = {Parallel Loop Code Generation for the {AP1000}},
   keywords = {compiler automatic parallel code generation},
   month = nov,
   year =  1991
}

@inproceedings{GMBMB92,
   author = {Gerald Mutisya and Bradley M. Broom},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Distributed file caching for the {AP1000}},
   keywords = {parallel file system Acacia},
   month = nov,
   year =  1992
}

@inproceedings{MCN90,
   author = {Malcolm C. Newey},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {Towards a {CAP} Implementation of {ML}},
   month = nov # { 19--20},
   year = 1990,
   keywords = {software environment languages ML paraML}
}

@inproceedings{PESRPB91,
   author = {P. E. Strazdins and R. P. Brent},
   booktitle = {Proceedings of the Second Fujitsu-ANU CAP Workshop},
   pages = {H1--H17},
   title = {The Implementation of {BLAS} level 3 on the {AP1000}: Preliminary Report},
   keywords = {BLAS linear algebra numeric},
   month = nov,
   year =  1991
}

@inproceedings{PESRPB90,
   author = {Peter E. Strazdins and Richard P. Brent},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {Implementing {BLAS} Level 3 on the {CAP-II}},
   month = nov # { 19--20},
   year = 1990,
   keywords = {software environment BLAS numeric linear algebra}
}

@techreport{PT92,
   author = {Peiyi Tang},
   number = {TR-CS-92-09},
   title = {Chain-Based Scheduling: Part I - Loop Transformations and Code Generation},
   institution = {Australian National University},
   keywords = {automatic code generation},
   month = jun,
   year =  1992
}

@techreport{PT92a,
   author = {Peiyi Tang},
   number = {TR-CS-92-15},
   title = {Exact Side Effects for Interprocedural Dependence Analysis},
   keywords = {automatic code generation},
   institution = {Australian National University},
   month = nov,
   year =  1992
}

@inproceedings{PT92b,
   author = {Peiyi Tang},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Chain-Based Scheduling: Part I - Loop Tansformations and Code Generation},
   keywords = {automatic code generation},
   month = nov,
   year =  1992
}

@inproceedings{PT92c,
   author = {Peiyi Tang},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Exact Side Effects for Interprocedural Dependence Analysis},
   keywords = {automatic code generation},
   month = nov,
   year =  1992
}

@inproceedings{PT93,
   author = {Peiyi Tang},
   booktitle = {Proceedings of the ACM International Conference on Supercomputing},
   title = {Exact Side Effects for Interprocedural Dependence Analysis},
   keywords = {automatic code generation},
   month = jul,
   year =  1993
}

@inproceedings{PTGM90,
   author = {Peiyi Tang and Gavin Michael},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {Task Partitioning and Scheduling of Nested Loops for Multicomputers},
   month = nov # { 19--20},
   year = 1990,
   keywords = {software environment compilers partitioning scheduling}
}

@inproceedings{PTGM91,
   author = {Peiyi Tang and Gavin Michael},
   booktitle = {Proceedings of the 1991 International Conference on Parallel Processing},
   pages = {234--246},
   title = {Chain-Based Partitioning and Scheduling of Nested Loops for Multicomputers},
   keywords = {automatic code generation},
   month = aug,
   year =  1991
}

@article{PBTCWJ93,
   author = {P. B. Thistlewaite and C. W. Johnson},
   journal = {Fujitsu Scientific and Technical Journal},
   number = {1},
   pages = {32--40},
   title = {Towards Debugging and Analysis Tools for Kilo-Processor Computers},
   keywords = {debugger parallel},
   volume = {29},
   month = mar,
   year =  1993
}

@techreport{ATRPB93,
   author = {Andrew Tridgell and Richard P. Brent},
   number = {TR-CS-93-01},
   title = {An Implementation of a General-Purpose Sorting Parallel Sorting Algorithm},
   institution = {Australian National University},
   keywords = {algorithm parallel sorting},
   month = feb,
   year =  1993
}

@techreport{ATBBZRPB93,
   author = {Andrew Tridgell and B. B. Zhou and Richard P. Brent},
   number = {TR-CS-93-06},
   title = {Efficient Implementation of Sorting Algorithms on Asynchronous {MIMD} Machines},
   keywords = {algorithm parallel sorting},
   institution = {Australian National University},
   month = may,
   year = 1993
}

@techreport{DWBMBPB92,
   author = {David Walsh and Bradley M. Broom and Peter Bailey},
   number = {TR-CS-92-16},
   title = {Message Domains: Efficient Support for Layered Message Passing Software},
   keywords = {message passing},
   institution = {Australian National University},
   month = nov,
   year =  1992
}

@inproceedings{DWBMBPB92a,
   author = {David Walsh and Bradley M. Broom and Peter Bailey},
   booktitle = {Proceedings of the First Annual Users' Meeting of Fujitsu Parallel Computing Research Facilities},
   title = {Message domains: efficient support for layered message-passing software},
   keywords = {message passing},
   month = nov,
   year =  1992
}

@techreport{MZ92,
   author = {Markus Zellner},
   number = {TR-CS-92-04},
   title = {Porting Programs from the {iPSC/860} to the {AP1000}},
   keywords = {porting iPSC/860},
   institution = {Australian National University},
   month = apr,
   year =  1992
}

@inproceedings{MZBM90,
   author = {Markus Zellner and Brian Molinari},
   address = {Kawasaki},
   booktitle = {Proceedings CAP workshop 1990},
   publisher = {Fujitsu Research laboratories},
   title = {{CAP-Linda}: A multi-computer implementation of {Linda}},
   month = nov # { 19--20},
   year = 1990,
   keywords = {software environment Linda languages}
}

@inproceedings{GMDWPT93,
   author = {Gavin Michael and David Walsh and Peiyi Tang},
   booktitle = {Second Parallel Computing Workshop},
   title = {Stride Collective Communication for the {Fujitsu} {AP1000}},
   keywords = {collective communication},
   address = {Kawasaki, Japan},
   month = nov,
   year = 1993
}

@inproceedings{BMB93b,
   author = {Bradley M. Broom},
   booktitle = {Second Parallel Computing Workshop},
   title = {Performance Measurement of the {Acacia} Parallel File System for the {AP1000} Multicomputer},
   keywords = {parallel file system Acacia},
   address = {Kawasaki, Japan},
   month = nov,
   year = 1993
}

@inproceedings{RK93,
   author = {Raju Karia},
   booktitle = {Second Parallel Computing Workshop},
   title = {Data Distributed Volume Rendering on the {Fujitsu} {AP1000}},
   keywords = {parallel volume rendering visualisation visualization},
   address = {Kawasaki, Japan},
   month = nov,
   year = 1993
}

@inproceedings{RPBACMHPESBBZ93,
   author = {Richard P. Brent and A. Czezowski and Marcus Hegland and Peter E. Strazdins and B. B. Zhou},
   booktitle = {Second Parallel Computing Workshop},
   title = {Linear Algebra Research on the {AP1000}},
   keywords = {linear algebra numeric},
   address = {Kawasaki, Japan},
   month = nov,
   year = 1993
}

@inproceedings{DHPB93,
   author = {David Hawking and Peter Bailey},
   booktitle = {Second Parallel Computing Workshop},
   title = {Towards a Practical Information Retrieval System for the {Fujitsu} {AP1000}},
   keywords = {text retrieval},
   address = {Kawasaki, Japan},
   month = nov,
   year = 1993,
   postscript = {DHPB93.ps.gz}
}

@inproceedings{RK94,
   author = {Raju Karia},
   booktitle = {Scalable High Performance Computing Conference},
   title = {Load Balancing of Parallel Volume Rendering with Scattered Decomposition},
   keywords = {parallel volume rendering visualisation visualization},
   address = {Knoxville, Tennessee},
   month = may,
   year = 1994
}


@inproceedings{CSM94,
   author = {Chris S. McDonald},
   booktitle = {2nd Australian Conference on Parallel and Real-time Systems},
   title = {Compile-time Analysis and Code Generation of {Joyce/Linda} on Varying Parallel Architectures},
   address = {Melbourne, Australia},
   month = jul,
   year = 1994
}

@inproceedings{PTJNZ94,
   author = {Peiyi Tang and John N. Zigman},
   booktitle = {1994 ACM International Conference on Supercomputing},
   title = {Reducing Data Communication Overhead for Doacross Loop Nests},
   month = jul,
   year = 1994
}

@inproceedings{PBMNDSRS94,
   author = {Peter Bailey and Malcolm Newey and David Sitsky and Robin Stanton},
   booktitle = {CONPAR '94},
   title = {Supporting Coarse and Fine Grained Parallelism in an Extension of {ML}},
   month = sep,
   year = 1994
}

@InProceedings{PMBC97,
  author	= {Paul Mackerras and Brian Corrie},
  title		= {Index Bit Permutations for Automatic Data Redistribution},
  booktitle	= {Proceedings of the Visualization '97 Parallel Rendering 
Symposium},
  keywords = {parallel volume rendering visualisation visualization},
  year		= 1997,
  address	= {Phoenix, Arizona},
  month		= oct,
  copyheld	= {no},
  postscript    = {PMBC97.ps.gz},
  abstract	= {
  PISTON is a machine independent software framework for developing
  scientific applications on parallel computers.  It presents a
  consistent data-parallel distributed memory model across a wide
  range of architectures.  It has been implemented on MIMD, SIMD, and
  SMP architectures.
 
  In this paper we describe PISTON's implementation of Index Bit
  Permutations (IBP) as a means of performing automatic regular data
  redistributions.  A theoretical analysis of IBPs is derived and the
  predicted performance is compared with the actual performance of an
  IBP implementation on the Fujitsu AP1000.  A detailed examination of
  the performance of IBPs on two common data redistributions is
  compared to the performance of hand-coded implementations of the
  same data redistributions in order to determine the effectiveness of
  IBPs.  Based on this analysis, we generalize to describe what
  architectural features of a MIMD machine impact on the performance
  of IBPs and show that they are an efficient means of implementing
  regular data redistributions on MIMD parallel architectures.  }
}

@InProceedings{BCPM96,
  author	= {Brian Corrie and Paul Mackerras},
  title		= {Performance of {PISTON} on the {AP1000}},
  booktitle	= {Proceedings of the Sixth Fujitsu International Parallel 
Compunting Workshop},
  keywords = {parallel volume rendering visualisation visualization},
  year		= 1996,
  address	= {Fujitsu Laboratories, Kawasaki, Japan},
  month		= nov,
  postscript    = {BCPM96.ps.gz}
}

@article{PMBC94,
  author	= {Paul Mackerras and Brian Corrie},
  title		= {Exploiting Data Coherence to Improve Parallel Volume Rendering},
  keywords = {parallel volume rendering visualisation visualization},
  journal	= {IEEE Parallel and Distributed Technology},
  volume = 2,
  number = 4,
  year		= 1994,
  abstract	= {
PISTON is a machine independent software framework for developing
scientific applications on parallel computers.  It presents a
consistent data-parallel distributed memory model across a wide range
of architectures.  It has been implemented on the Fujitsu AP1000 as
well as on SIMD and SMP machines.
 
This paper briefly describes the implementation of PISTON on the
AP1000 and presents timing results and analysis for that
implementation.  Overheads such as the time taken for data
redistribution and for negotiation of data type and layout are
presented for an example terrain rendering application originally
written to run under PISTON on the MasPar MP-1.  The results identify
areas in which the performance of PISTON on the AP1000 could be
optimized.
}
}

@InProceedings{BCPM93a,
  author	= {Brian Corrie and Paul Mackerras},
  title		= {Data Shaders},
  booktitle	= {Proceedings of Visualization '93},
  keywords = {parallel volume rendering visualisation visualization},
  publisher     = {IEEE Computer Society Press},
  year		= 1993,
  address	= {San Jose, California},
  month		= oct # { 25--29},
  postscript    = {BCPM93a.ps.gz},
  abstract	= {
The process of visualizing a scientific data set requires an extensive
knowledge of the domain in which the data set is created. Because an
in-depth knowledge of all scientific domains is not available to the creator
of visualization software, a flexible and extensible visualization system
is essential in providing a productive tool to the scientist.
 
This paper presents a shading language, based on the RenderMan
shading language, that extends the shading model used to
render volume data sets. Data shaders, written in this
shading language, give the users of a volume rendering system a means
of specifying how a volume data set is to be rendered.
This flexibility is useful both as a visualization tool in the scientific
community and as a research tool in the visualization community.}
}

@InProceedings{BCPM93,
  author	= {Brian Corrie and Paul Mackerras},
  title		= {Parallel Volume Rendering and Data Coherence},
  keywords = {parallel volume rendering visualisation visualization},
  booktitle	= {Proceedings of the Visualization '93 Parallel Rendering 
Symposium},
  publisher     = {ACM SIGGRAPH},
  year		= 1993,
  address	= {San Jose, California},
  month		= oct # { 25--26},
  postscript    = {BCPM93.ps.gz},
  abstract	= {
The two key issues in implementing a parallel ray-casting volume
renderer are the work distribution and the data distribution.  We have
implemented such a renderer on the Fujitsu AP1000 using an adaptive
image-space subdivision algorithm based on the worker-farm paradigm
for the work distribution, and a distributed virtual memory,
implemented in software, to provide the data distribution.
Measurements show that this scheme works efficiently and effectively
utilizes the {\em data coherence} that is inherent in volume
data.
}
}

@article{PMBC93,
  author = {Paul Mackerras and Brian Corrie},
  title = {Visualizing 3-Dimensional Data on the {AP1000}},
  keywords = {parallel volume rendering visualisation visualization},
  journal = {Fujitsu Scientific and Technical Journal},
  volume = 29,
  number = 1,
  pages = {50--60},
  year = 1993,
  month	= mar,
  abstract = {
Recent advances in computer technology have made it feasible for
scientists and engineers to work with sampled data representing the
variation of physical quantities throughout a 3-dimensional volume.
The AP1000 has the memory capacity and processing speed to handle
large 3-dimensional data sets and generate images from these data sets
at interactive or near-interactive rates.  We have implemented
parallel versions for the AP1000 of two basic techniques for visualizing
3-dimensional scalar data sets: volume rendering and isosurface
generation.  The key issues in parallelizing these algorithms are the
data distribution and work distribution.  This paper describes the
distribution methods used and the tradeoffs involved, and presents
results obtained with example data sets.}
}

@InProceedings{BCDSPM97,
  author = {Brian Corrie and David Sitsky and Paul Mackerras},
  title = {Integrating High Performance Computing with Virtual Environments},
  booktitle = {Proceedings of the Seventh Parallel Computing Workshop},
  keywords = {parallel volume rendering visualisation visualization virtual environments},
  publisher = {Department of Computer Science, Australian National University},
  year = 1997,
  address = {Canberra, Australia},
  month	= sep,
  postscript = {BCDSPM97.ps.gz},
  abstract = { 
  High performance computing has become accepted as a tool that can be
  used to solve many large scale computational problems. Because of
  the complexity of the problems associated with high performance
  computing, visualization of the output of high performance computing
  applications has always been an important factor in providing a
  complete problem solving environment for the high performance
  computing user. As visualization technology advances, it is
  important to consider what impacts those advances will have on the
  integration of high performance computing and visualization.
  
  Virtual environments are the most recent, and arguably the most
  powerful, visualization environments in use today.  In this paper we
  analyze the current state of the research of integrating
  visualization, and in particular virtual environments, with high
  performance computing. We also present a framework for implementing
  such an environment and report on the status of its implementation
  at the Australian National University.
}
}

@TECHREPORT{PBDH96,
    AUTHOR	= {Peter Bailey and David Hawking},
    TITLE	= {A Parallel Architecture For Query Processing 
                        over a Terabyte of Text},  
    INSTITUTION = {Department of Computer Science, Australian National
                  University},
    NUMBER	= {TR-CS-96-04},
    YEAR	= {1996},
    postscript  = {PBDH96.ps.gz},   
    keywords    = {text retrieval}, 
    abstract    = {
The Parallel Document Retrieval Engine (PADRE) has previously
demonstrated that full text scanning methods supported by parallel
hardware permit powerful query constructors and rapid response to
changing document collections.  Extensions to PADRE have been designed
and implemented which make use of parallel secondary storage to allow
each procesing node to handle data up to 32 times the size of its
primary memory.  Using the largest purchasable machine on which PADRE
currently runs, these increase the maximum possible collection size to
one terabyte.  This paper addresses the practicality of achieving this
limit and the extent to which the performance, responsiveness,
functionality and scalability of the full text scanning PADRE are
preserved in the extended version.
}
}

@INPROCEEDINGS{DH94,
    BOOKTITLE   = {Proceedings of the Third Fujitsu Parallel Computing
                  Workshop},
    AUTHOR 	= {David Hawking},
    TITLE 	= {{PADRE} --- A Parallel Document Retrieval Engine},
    NOTE 	= {paper P2-C},
    ADDRESS	= {Kawasaki, Japan},
    MONTH 	= {November},
    YEAR 	= {1994},
    postscript  = {DH94.ps.gz},
    keywords    = {text retrieval}, 
    abstract    = {
Developments in text retrieval on the AP1000 since last year's PCW are
reported.  The software, now called PADRE, has been entered in the
competition associated with the 1994 Text Retrieval Conference
(TREC-3). PADRE is now  capable of document relevance estimation and
ranking, and supports data loading from and dumping to the Fujitsu
Local Filesystem.  A new load balancing operation has been devised and
implemented and improved techniques for handling cell-program error conditions
have been adopted.  Experiments have been successfully carried out on
document collections exceeding 1.5 million documents and 5 gigabytes of
data.  Performance results are presented.
}
}

@INPROCEEDINGS{DHPT94,
    EDITOR	= {D. K. Harman},
    BOOKTITLE	= {Proceedings of the Third Text Retrieval Conference 
                    ({TREC}-3)},
    PUBLISHER	= {U.S. National Institute of Standards and Technology},
    ADDRESS	= {Gaithersburg, MD},
    NOTE	= {NIST special publication 500-225},
    MONTH 	= {November},
    YEAR 	= {1994},
    AUTHOR 	= {David Hawking and Paul Thistlewaite},
    TITLE 	= {Searching for Meaning with the help of a {PADRE}},
    keywords    = {text retrieval}, 
    PAGES 	= {257-267},
    abstract    = {
Full-text scanning offers significant advantages over other methods of
document retrieval but is normally too slow for use on large
collections.  The Fujitsu AP1000 parallel distributed-memory machine
has been used to reduce the time penalty for full-text scanning to
acceptable interactive levels.  The query language for the retrieval 
software (called PADRE) is described herein and differences between PADRE
and traditional systems are highlighted.  The advantages of the full-text
scanning in broader retrieval contexts are outlined. TREC 
precision-recall results are discussed and timings are reported.
}
}

@TECHREPORT{DH95,
    AUTHOR	= {David Hawking},
    TITLE	= {The Design and Implementation of a Parallel
                  Document Retrieval Engine},  
    INSTITUTION = {Department of Computer Science, Australian National
                  University},
    NUMBER	= {TR-CS-95-08},
    postscript  = {DH95.ps.gz},
    YEAR	= {1995},
    keywords    = {text retrieval}, 
    ANNOTE      = {Thesis},
    abstract    = {
Document retrieval as traditionally formulated is an inherently
parallel task because the document collection can be divided into N
sub-collections each of which may be searched independently.  Document
retrieval software can potentially exploit the power and capacity of a
large-scale parallel machine to improve speed, to extend the size of
the largest collection which can be processed, to respond quickly to
changes in the document collection and/or to increase the power and
expressivity of the retrieval query language.  This paper includes
discussion of the issues involved in the design of a practical parallel
document retrieval engine for a distributed-memory multicomputer and a
description of the implementation of PADRE, a retrieval engine for the
Fujitsu AP1000.  Performance results are presented and scope of 
applicability of the techniques is discussed.
}
}

@MANUAL{DHPB96,
    AUTHOR	= {David Hawking and Peter Bailey},
    TITLE	= {{PADRE} v. 2.4 User Manual},
    URL 	= {http://cap.anu.edu.au/cap/projects/text_retrieval},
    YEAR        = {1996},
    keywords    = {text retrieval}, 
    ORGANIZATION= {Department of Computer Science, Australian National
                  University},

}

@INPROCEEDINGS{DHPT95,
    EDITOR	= {D. K. Harman},
    BOOKTITLE	= {Proceedings of the Fourth Text Retrieval Conference 
			({TREC}-4)},
    PUBLISHER	= {U.S. National Institute of Standards and Technology},
    ADDRESS	= {Gaithersburg, MD},
    MONTH 	= {November},
    YEAR 	= {1995},
    AUTHOR 	= {David Hawking and Paul Thistlewaite},
    TITLE 	= {Proximity Operators - So Near And Yet So Far},
    keywords    = {text retrieval}, 
    PAGES 	= {131-143},
    abstract    = {
Testing of the hypothesis that good precision-recall performance can be
based entirely on proximity relationships is a focus of current TREC
work at ANU.  PADRE's ``Z-mode'' method (based on proximity spans) of scoring
relevance has been shown to produce reasonable results for hand-crafted
queries in the Adhoc section.  It is capable of producing equally good
results in database merging and routing contexts due to its
independence from collection statistics.  Further work is needed to
determine whether Z-mode is capable of achieving top-flight results.
A new approach to automatic query generation designed to work with the 
shorter TREC-4 queries produced reasonable results relative to other groups
but fell short of expectations based on training performance.  
Investigation of causes is still under way.
}
}

@INPROCEEDINGS{DHPBDC96,
    BOOKTITLE   = {Proceedings of the Australian Document Computing Symposium},
    AUTHOR 	= {D. Hawking and P. Bailey and D. Campbell},
    TITLE 	= {A Parallel Document Retrieval Server for the World
                  Wide Web},
    PAGES 	= {73-78},
    YEAR	= {1996},
    ADDRESS	= {Melbourne, Australia},
    MONTH 	= {March},
    keywords    = {text retrieval}, 
    postscript  = {DHPBDC96.ps.gz},
    abstract    = {
An architecture is proposed which enables the Parallel Document
Retrieval Engine ({\small PADRE}), running on a single-user Fujitsu AP1000
multicomputer, to operate as an information server on the World Wide
Web.  The advantages and disadvantages of a distributed memory parallel
machine for this purpose are discussed and the likely applicability to
different types of parallel machine is considered.  Ideas for a range
of types of remote query-generation client are outlined and
measurements of query processing speed are reported, shedding some
light on potential load handling capacity of this parallel server.
}
}

@INPROCEEDINGS{DH96a,
    BOOKTITLE   = {Proceedings of the 1996 International Conference On
                   Parallel and Distributed Processing Techniques and 
                   Applications},
    PUBLISHER   = {CSREA, Athens, Georgia},
    ADDRESS     = {Sunnyvale, California},
    AUTHOR 	= {David Hawking},
    TITLE 	= {Document Retrieval Performance on Parallel Systems},
    PAGES 	= {1354--1365},
    MONTH       = {August}, 
    keywords    = {text retrieval}, 
    YEAR	= {1996},

    abstract    = {
The problem of efficiently retrieving and ranking documents
from a huge collection according to their relevance to a research
topic is addressed.  A broad class of queries is defined and,
based on previous work, a parallel system architecture capable of handling 
them is proposed.  The time cost of the steps involved
in query processing is analysed and the space 
requirements of the data structures used are outlined.  The result is a
model, characterised by parameters which can be derived from machine 
configuration information and some simple empirical measurements, 
from which collection capacities and likely
query processing rates may be determined for given hardware
configurations.  The performance of a prototype implementation for 
a 128 node machine 
is analysed in terms of the model and conclusions are drawn on
the relative importance of I/O and CPU 
parallelism.
}
}

@INPROCEEDINGS{DH96b,
    BOOKTITLE   = {Proceedings of the Sixth Parallel Computing Workshop},
    AUTHOR 	= {David Hawking},
    TITLE 	= {Document Retrieval in {OCR}-Scanned Text},
    PAGES 	= {},
    YEAR	= {1996},
    NOTE 	= {paper P2-F},
    ADDRESS	= {Kawasaki, Japan},
    MONTH 	= {November},
    keywords    = {text retrieval}, 
    postscript  = {DH96b.ps.gz},
    abstract    = {
The use of a document retrieval system (PADRE) for the Fujitsu AP1000
in processing known-item search queries over OCR-scanned documents is reported.
Retrieval performance of an initial set of queries is shown to deteriorate
significantly over scanned data with a character error rate of 5\%.  A
preprocessor is used to augment queries with terms which can be derived
from original terms using characteristic substitutions observed to occur
in a sample of the scanned text.  This  technique is shown to markedly
improve performance over the degraded data.
}
}

@INPROCEEDINGS{HawkingThistlewaiteBailey96,
    EDITOR	= {D. K. Harman},
    BOOKTITLE	= {Proceedings of the Fifth Text Retrieval Conference 
			({TREC}-5)},
    PUBLISHER	= {U.S. National Institute of Standards and Technology},
    ADDRESS	= {Gaithersburg, MD},
    MONTH 	= {November},
    YEAR 	= {1996},
    AUTHOR 	= {David Hawking and Paul Thistlewaite and Peter Bailey},
    keywords    = {text retrieval}, 
    TITLE 	= {{ANU/ACSys} {TREC-5} Experiments},
    abstract    = {

A number of experiments conducted within the framework of the TREC-5
conference and using the Parallel Document Retrieval Engine (PADRE) 
are reported.  Several of the experiments involve the use of
distance-based relevance scoring (spans).  This scoring method is shown to 
be capable of very good precision-recall performance, provided that good
queries can be generated.  Semi-automatic methods for refining
manually-generated span queries are described and evaluated in the 
context of the adhoc retrieval task.
Span queries are also applied to processing a larger (4.5 gigabyte) 
collection, to retrieval over OCR-corrupted data and to a database merging
task.  Lightweight probe
queries are shown to be an effective method for identifying promising
information servers in the context of the latter task.
New techniques for automatically
generating more conventional weighted-term queries from short topic 
descriptions have also been devised and are evaluated.  
}
}



@Article{DH97a,
  author = 	 {David Hawking},
  title = 	 {A Distributed-Memory Algorithm for Lexicon Building},
  journal = 	 {Journal of Parallel and Distributed Computing},
  year = 	 {1997?},
  volume = 	 {?},
  number = 	 {?},
  month = 	 {?},
  pages = 	 {?},
    keywords    = {text retrieval}, 
  note = 	 {In press.},
    abstract    = {
A parallel algorithm for preparing word frequency concordances over two
specified sets of documents from a collection is presented.  Good parallel
efficiency is demonstrated on a 128-node distributed memory machine using sets
whose combined size exceeds one gigabyte.  
It is demonstrated that efficiency is heavily influenced by hashing and
communication strategies.  A two-stage hashing algorithm is proposed to
reduce communication overhead.  Ways of increasing capacity are
considered and the applicability of the algorithm to other text-processing
functions such as index and symbol-table building is outlined.
}
}


@InProceedings{DH97b,
  author = 	 {David Hawking},
  title = 	 {Scalable Text Retrieval for Large Digital Libraries},
  booktitle = 	 {Proceedings of the First European Conference on Digital Libraries},
  editor = 	 {Carol Peters and Costatino Thanos},
  volume = 	 {1324},
  series = 	 {Lecture Notes in Computer Science},
  year = 	 {1997},
  publisher =    {Springer},
  address = 	 {Pisa, Italy},
    keywords    = {text retrieval}, 
  month = 	 {September},
  pages = 	 {127--146},
    abstract    = {
It is argued that digital libraries of the future will contain
terabyte-scale collections of digital text and that full-text
searching techniques will be required to operate over collections
of this magnitude.  Algorithms expected to be capable of scaling 
to these data sizes using clusters of modern workstations are described.
First, basic indexing and retrieval algorithms
operating at performance levels comparable to other leading systems
over gigabytes of
text on a single workstation are presented.  Next, simple mechanisms for
extending query processing capacity to much greater collection sizes
are presented, to tens of gigabytes for single workstations and 
to terabytes for clusters of such
workstations.  Query-processing efficiency on a single workstation 
is shown to deteriorate dramatically when data size is increased above a
certain multiple of physical memory size.
By contrast, the number of clustered workstations necessary
to maintain a constant level of service increases
linearly with increasing data size.  Experiments using clusters of up
to 16 workstations are reported.  A non-replicated 20 gigabyte
collection was indexed in just over 5 hours using a ten workstation
cluster and scalability results are presented for query processing
over replicated collections of up to 102
gigabytes.
}
}

   
@InProceedings{DH97d,
  author = 	 {David Hawking},
  title = 	 {{PADRE} for {COW}s},
  booktitle = 	 {Proceedings of the Seventh Parallel Computing Workshop},
  editor = 	 {Paul Mackerras},
  year = 	 {1997},
  publisher =    {Department of Computer Science, ANU},
  address = 	 {Canberra, Australia},
  month = 	 {September},
    keywords    = {text retrieval}, 
  NOTE 	=        {paper P1-B},
    abstract    = {
Earlier work with the Parallel Document Retrieval Engine was oriented
toward parallel machines such as the AP1000, characterised by 
many nodes, few disks, small memory per node (by current standards), 
single-user operation and high communication performance, relative to 
node computational power.  
 
Present generation parallel machines are much more like clusters of
workstations (COWs).  There are typically fewer nodes but each is
more powerful, runs a multi-user operating system, supports more
memory and connects to at least one local disk.  In general, COWs 
are characterised by poorer network performance.
 
PADRE has been redesigned to operate in the COW environment.
Indexing and retrieval algorithms and user-interface have been
totally replaced, along with the PADRE model of parallelism. PADRE97
minimises communication and synchronisation in order to improve
scalability on high-latency clusters.  Results are presented to show
that the new design has achieved its objectives.
 
}
}


@InProceedings{SMBRBS96,
  author	= {Stephen M. Blackburn and Robin B. Stanton},
  title		= {Multicomputer object stores: {T}he {M}ulticomputer {T}exas
		  experiment},
  booktitle	= {Seventh International Workshop on Persistent Object Systems},
  editor	= {Richard Connor and Scott Nettles},
  year		= 1996,
  pages		= {250--262},
  publisher	= {Morgan Kaufmann},
  address	= {Cape May, NJ, U.S.A.},
  month		= may # { 29--31},
  isbn		= {ISBN 1-55860-379-447-2},
  url		= {http://cs.anu.edu.au/people/Steve.Blackburn/research/dtex.html}
		  ,
  copyheld	= {yes},
  postscript    = {SMBRBS96.ps.gz},
  keywords      = {object stores persistent persistance},
  abstract	= {The paper is about design of object stores for distributed
		  memory computers. Problems of distribution within such
		  stores are described through the design of Distributed
		  Texas, a system derived from the Texas store
		  \cite{singhal92} and implemented on a scalable
		  multicomputer (a Fujitsu AP1000). Problems discussed
		  include creating a single image of an object space across
		  multicomputer architectures, tradeoffs between page-based
		  and object-based granularity, the distribution of store
		  level services and the management of concurrency and
		  persistance within those distributed services. Problems of
		  building layered software on multicomputers pervade these
		  issues. Preliminary scalability performance figures for
		  Distributed Texas are also presented.}
}

@InProceedings{SMBSJGSRBSCWJ97,
  author	= {Stephen M. Blackburn and Stephan J. G. Scheuerl and Robin
		  B. Stanton and Christopher W. Johnson},
  title		= {Recovery and page coherency for a scalable multicomputer
		  object store},
  editor	= {Hesham El-Rewini and Yale N Patt},
  booktitle	= {30th Hawaii International Conference on System Sciences},
  pages		= {523--532},
  year		= 1997,
  address	= {Hawaii, U.S.A.},
  month		= jan # { 7--10},
  url		= {http://cs.anu.edu.au/~Steve.Blackburn},
  copyheld	= {yes},
  keywords      = {object stores persistent persistance},
  postscript    = {SMBSJGSRBSCWJ97.ps.gz},
  abstract	= {This paper presents scalable algorithms for recovery and
		  page coherency in multicomputer object stores. Recovery and
		  coherency are central to object store engineering and
		  distributed memory multicomputers are fundamental to
		  scalable computation. Efficient recovery is implemented
		  through a combination of local logging and a localisation
		  of the transactional workspace model. A vector of update
		  counts is used to efficiently represent global time. The
		  algorithms have been successfully implemented and tested on
		  a 128 node Fujitsu AP1000 distributed memory multicomputer.
		  The paper presents performance results which indicate good
		  performance and scalability for these algorithms under a
		  range of situations. The work is seen as a step in the
		  continuing development of high performance multicomputer
		  object stores.}
}

@InProceedings{SMBRBS97b,
  author	= {Stephen M Blackburn and Robin B Stanton},
  title		= {The Transactional Object Cache as a Basis for Persistent
		  {J}ava System Construction},
  booktitle	= {Second International Workshop on Persistence and Java},
  editor	= {Mick Jordan and Ron Morrison and Malcolm Atkinson},
  year		= 1997,
  address	= {Half Moon Bay, CA, U.S.A.},
  month		= aug # { 13--15},
  postscript    = {SMBRBS97b.ps.gz},
  keywords      = {object stores persistent persistance},
  abstract	= {The promise of Java as the vehicle for widely used,
		  industrial strength orthogonally persistent systems places
		  a renewed emphasis on implementation technologies for
		  orthogonally persistent systems. The implementation of such
		  systems has been held back by a number of factors,
		  including a breadth of technologies spanning database and
		  programming language research domains, and difficulty in
		  capitalizing on the fruits of the mainstream database
		  research community. In this paper we present PSI---a
		  practical storage abstraction that separates database and
		  programming language concerns and facilitates the adoption
		  of mainstream transactional storage technology within
		  orthogonally persistent systems. We argue for PSI as the
		  basis for persistent Java system construction with
		  particular reference to how it might be applied to PJama0
		  [Atkinson96].}
}

@PhDThesis{SMB97,
  author	= {Stephen M Blackburn},
  title		= {Persistent Store Interface: A foundation for scalable
		  persistent system design},
  school	= {Australian National University},
  year		= 1997,
  address	= {Canberra, Australia},
  url           = {http://cs.anu.edu.au/~Steve.Blackburn},
  month		= jul,
  postscript    = {SMB97.ps.gz},
  keywords      = {object stores persistent persistance},
  abstract	= {The subject of this thesis is scalability and persistence.
		  A convergence of computing and communications technologies
		  has lead to the `information explosion'. Demand for
		  information has grown at an unprecedented pace, placing
		  pressure on the scalability of information servers. At the
		  same time there has been a revolution in switching
		  technology which has seen the once exotic tightly coupled
		  distributed memory computer become widely available through
		  commodity components. These two developments in computing
		  and communications technologies come together, the former
		  bringing with it the challenge of constructing systems
		  capable of scaling to address the spiraling demand for
		  information, and the latter offering a scalable hardware
		  architecture upon which such systems can be based. The most
		  elegant approach to persistent data management lies in the
		  use of orthogonal persistence. Orthogonally persistent
		  programming languages bring together the disparate concerns
		  of programming languages and databases by making the
		  persistence of data a property orthogonal to all others.
		  However, while users are presented with a unified view of
		  the concerns, implementers of orthogonally persistent
		  programming languages must confront the disparity head-on.
		  The quest to design efficient, scalable, orthogonally
		  persistent systems represents a bringing together of the
		  challenge of constructing systems capable of scaling with
		  the challenge of constructing orthogonally persistent
		  systems. This raises the deeper question as to whether
		  there exists a generalized framework for scalable
		  persistent system design. The framework will bring together
		  the fundamental concerns of concurrency, replication,
		  coherency, latency, and stability. The major result in this
		  thesis is the description of such a framework. The
		  fundamental concerns are met through a reference
		  architecture based on caching, atomicity, and a layered
		  software architecture. The framework has been realized in
		  the form of the Persistent Store Interface (PSI). The
		  effectiveness of PSI for scalable persistent system
		  construction is demonstrated through a number of
		  experiments with PSI prototypes, both stand-alone and
		  distributed. In addition, two supporting experiments are
		  described, one examining the issues of designing scalable
		  stores that present users with a single store image and the
		  other examining mechanisms for scalable coherency and
		  recovery. The development of a generalized and practical
		  framework for scalable persistent system design in this
		  thesis gives cause for optimism that orthogonal persistence
		  will play an important role in the future of scalable
		  information management.}
}

@InProceedings{SMBRBS97c,
  author	= {Stephen M Blackburn and Robin B Stanton},
  title		= {Scalable Transactional Cache Coherency: Towards Scalable
		  Persistent Systems},
  booktitle	= {Proceedings of the Seventh International Parallel Computing
		  Workshop},
  editor	= {Paul Mackerras},
  year		= 1997,
  publisher	= {Australian National University},
  address	= {Canberra, Australia},
  month		= sep # { 25--26},
  postscript    = {SMBRBS97c.ps.gz},
  keywords      = {object stores persistent persistance},
  abstract	= {his paper reports on the development of a scalable storage
		  layer to be used as a foundation for the development of
		  scalable persistent programming environments and
		  object-oriented databases. We identify the challenges
		  associated with the construction of such a storage layer
		  and report on progress in each of these areas. Detailed
		  results of recent experiments on scalable transactional
		  cache coherency are presented.}
}

@Article{RPBPES93,
	author="~R.~P.~Brent and ~P.~E.~Strazdins",
        title={Implementation of {BLAS} {L}evel 3 and {LINPACK} {B}enchmark on the {AP1000}},
        keywords = {numeric linear algebra},
	journal="Fujitsu Scientific and Technical Journal", 
	volume=29,
	number=1,
        month=mar,
	year=1993,
	pages="61--70"
}


@INPROCEEDINGS{PES95,
	author="~P.~E.~Strazdins",
	title={Matrix {F}actorization using {D}istributed {P}anels on the
                        {F}ujitsu {AP}1000.},
	booktitle="IEEE First International Conference on
               Algorithms And Architectures for Parallel Processing (ICA3PP-95)",
        keywords = {numeric linear algebra},
	address="Brisbane",
	pages="263--73", 
	month="April",
	year=1995,
        postscript={PES95.ps.gz}
}

@INPROCEEDINGS{PES94,
	author="~P.~E.~Strazdins",
        title={Prototyping {P}arallel {LAPACK} using {B}lock-{C}yclic
               {D}istributed {BLAS}},
        keywords = {numeric linear algebra},
        booktitle="Proceedings of the Fourth Parallel Computing Workshop",
        address="Kawasaki", 
	month="November",
        note="paper P1-R1",
	year="1994",
        postscript={PES94.ps.gz}
}                        

@INPROCEEDINGS{PES96,
   author="~P.~E.~Strazdins",
   title={A {H}igh {P}erformance, {P}ortable {D}istributed {BLAS} {I}mplementation},
   booktitle="Proceedings of the Sixth Parallel Computing Workshop",
        keywords = {numeric linear algebra},
        address="Kawasaki", 
	month="November",
	year="1996",
        note = "paper P2-K1",
        postscript={PES96.ps.gz}
}

@INPROCEEDINGS{PES97a,
   author="~P.~E.~Strazdins",
   title={Load Balance and Communication Tradeoffs in
                Parallel Matrix Factorization}, 
   booktitle="Proceedings of the Seventh International Parallel Computing Workshop",
   publisher="Australian National University", 
        keywords = {numeric linear algebra},
        address="Canberra", 
	month="September",
	year="1997",
        note = "paper P1-Q1",
}

@INPROCEEDINGS{PES97b,
   author="~P.~E.~Strazdins",
   title={Reducing {S}oftware {O}verheads in {P}arallel {L}inear {A}lgebra {L}ibraries},
   booktitle="The 4th Annual Australasian Conference on  
        Parallel And Real-Time Systems",
        keywords = {numeric linear algebra},
        address="Newcastle Australia", 
	month="September",
	pubkisher="Springer",
	year="1997",
	pages="73--84",
        postscript={PES97b.ps.gz}
}

@INPROCEEDINGS{PESHK96,
   author="~P.~E.~Strazdins and ~H.~Koesmarno",
   title={A {H}igh {P}erformance {V}ersion of {P}arallel {LAPACK}:
          {P}reliminary {R}eport},
        keywords = {numeric linear algebra},
   booktitle="Proceedings of the Sixth Parallel Computing Workshop",
        address="Kawasaki",
        month="November",
        year="1996",
        note="paper P2-J1",
        postscript={PESHK96.ps.gz}
}

@inproceedings{ATDW95,
   author = {Andrew Tridgell and David Walsh},
   title = {The {HiDIOS} Filesystem},
   keywords = {parallel file system HiDIOS},
   booktitle = {Proceedings of the Fourth International Parallel Computing Workshop},
   publisher = {Fujitsu Parallel Computing Research Centre, Imperial College},
   address = {London, UK},
   pages = {53--63},
   month = sep # {25-26},
   year = {1995},
   postscript = {ATDW95.ps.gz},
   abstract = {
This paper describes the design and implementation of version 1.0 of the HiDIOS
parallel file system for the AP1000 multicomputer.  A brief justification is
given for the central design decisions along with initial performance results.

}
}   


@inproceedings{ATDW97,
   author = {Andrew Tridgell and David Walsh},
   title = {The {HiDIOS2} Parallel File System on the {AP1000+}},
   keywords = {parallel file system HiDIOS},
   booktitle = {Proceedings of the Seventh Fujitsu Parallel Computing Workshop},
   editor = {Paul Mackerras},
   publisher = {Department of Computer Science, Australian National University},
   address = {Canberra, Australia},
   NOTE = {paper P1-W},
   month = sep # {25-27},
   year = {1997},
   postscript = {ATDW97.ps.gz},
   abstract = {
The HiDIOS2 filesystem is an extended version of the HiDIOS filesystem 
developed for the Fujitsu AP1000 parallel computer.  The HiDIOS2 filesystem 
runs on the AP1000+ under the AP/Linux operating system.

This paper describes the design of the HiDIOS2 filesystem along with some
experiments in implementing a fast NFS system using a simple bypass NFS
technique.

}
}   


@techreport{ATPMDSDW96a,
   author = {Andrew Tridgell and Paul Mackerras and David Sitsky and David Walsh},
   number = {TR-CS-96-07},
   title = {{AP/Linux} - Initial Implementation},
   institution = { Australian National University},
   month = may,
   year = {1996},
   postscript = {ATPMDSDW96a.ps.gz},
   abstract = { 
The AP1000+ is a distributed-memory parallel computer based
on SuperSPARC processors, which incorporates message-passing hardware
which can be accessed safely from user mode.  We are in the process of
porting the Linux kernel to this machine and extending it to support
execution of parallel programs.  This report outlines the motivation
and background of this effort, and describes the current status and
future directions for the work.  The reader may also refer to our WWW
page at http://cap.anu.edu.au/cap/projects/linux for up to date
information on the progress of the port.  
}   
}

@inproceedings{ATPMDSDW96b,
   author = {Andrew Tridgell and Paul Mackerras and David Sitsky and David Walsh},
   title = {{AP/Linux} - A modern {OS} for the {AP1000+}},
   booktitle = {Proceedings of the Sixth Parallel Computing Workshop},
   publisher = {Fujitsu Parallel Computing Research Facilities, Fujitsu Laboratories LTD.},
   address = {Kawasaki, Japan},
   NOTE = {paper P2-C},
   month = nov # {12--13},
   year = 1996,
   postscript = {ATPMDSDW96b.ps.gz},
   abstract = {
AP/Linux is an ongoing effort to develop a new operating system
environment for the Fujitsu AP1000+ and successor machines.  Based on
the popular Linux operating system, AP/Linux provides modern operating
system capabilities, such as virtual memory and multi-user support, as
well as efficient communication facilities for parallel programs.
Users can develop parallel programs using MPI or the CellOS-compatible
APlib library.
 
This paper describes the progress achieved thus far in developing the
system, and presents results from some simple parallel benchmark
programs showing that there is no loss of performance for parallel
programs running under AP/Linux, compared with the standard CellOS
environment. 

}  
}

@inproceedings{DW97,
   author = {David Walsh},
   title = {Parallel Process Management on the {AP1000+} under {AP/Linux}},
   booktitle = {Proceedings of the Seventh Fujitsu Parallel Computing Workshop},
   editor = {Paul Mackerras},
   publisher = {Australian National University},
   address = {Canberra, Australia},

   NOTE = {paper P1-V},
   month = sep # {25-26},
   year = {1997},
   postscript = {DW97.ps.gz},
   abstract = {
This paper discusses tools and mechanisms developed for running parallel 
applications on the AP1000+ under AP/Linux. The main themes considered are the 
architecture of the parallel process management programs, and how they enable 
greater flexibility in configuring parallel applications over the AP1000+
cells.  How these mechanisms enable dynamic partitioning and load balancing 
for multiple users is considered, as well as how message passing is implemented
to allow optimised global reduction operators within a multi-user
environment.
}
}

@InProceedings{DS95,
  author	= "David Sitsky",
  title		= "Implementing {MPI} using Interrupts and Remote Copying for
		  the {AP}1000/{AP}1000+",
  keywords      = {message passing},
  booktitle	= "Proceedings of the Fourth Parallel Computing Workshop",
  year		= 1995,
  publisher     = {FPRC, Imperial College},
  address	= "London, UK",
  month		= sep # { 25--26},
  pages         = {323--333},
  postscript    = {DS95.ps.gz},
  abstract      = {
This paper documents an experimental MPI library which has been built
for both the AP1000 \cite{ap1000} and AP1000+ machines.  Although the
previous implementation of MPI produced messaging performance that was
almost identical to using CellOS calls, the library contained a number
of unsatisfactory features.  These features will be identified, and a
new communication mechanism will be described which uses interrupts
and the {\tt get} communication call, which provides true nonblocking
and noncopying communication.  A performance comparison between the
new library and an equivalent CellOS program for a ping-pong benchmark
will be presented, followed by an analysis of the results.  For the
sake of brevity, only the standard sending mode is described here.
}
}

@InProceedings{DSDWCJ94,
  author	= "David Sitsky and David Walsh and Chris Johnson",
  title		= "An Efficient Implementation of the Message Passing
		  Interface ({MPI}) on the {F}ujitsu {AP}1000",
  keywords      = {message passing},
  editor	= "Mitsuo Ishii",
  booktitle	= "Proceedings of the Third Parallel Computing Workshop",
  year		= 1994,
  publisher	= "Fujitsu Laboratories Ltd.",
  address	= "Kawasaki, Japan",
  month		= nov,
  note          = "paper P1-L",
  postscript    = {DSDWCJ94.ps.gz},
  abstract      = {
The message passing interface standard released in April 1994
by the MPI Forum defines a set of message passing primitives for
multicomputers and clustered systems.  The standard provides a large
collection of functions, with the aim of providing efficient
implementations, source code portability and support for the development of
parallel libraries.  In this paper, we describe the implementation and
performance of MPI on the Fujitsu AP1000.
 
To produce an efficient implementation, the existing operating system
had to be modified to better support MPI operations.
These modifications are discussed, along with the hardware operations
that were utilised.  A {\em selective broadcast} operation was developed
which provided efficient implementations of many of the collective
routines regardless of group size.  The performance of MPI and
CellOS point-to-point and broadcast operations are compared,
along with benchmarks of some of the MPI collective routines.
}
}

@inproceedings{DSDWCJ95,
  author        = "David Sitsky and David Walsh and Chris Johnson",
  title         = "The implementation and performance of the {MPI} message
                   passing interface on the {Fujitsu AP1000} multicomputer",
  keywords      = {message passing},
  booktitle     = "Australian Computer Science Conference (ACSC'95)",
  year          = 1995,
  month         = jan,
  postscript    = {DSDWCJ95.ps.gz},
  abstract      = {
MPI is the new standard which defines a set of message passing
operations for multicomputers and clustered systems.  In comparison to
other popular message passing systems, MPI provides a richer
collection of functions, allowing efficient implementations,
portability and excellent support for the development of parallel
libraries.  In this paper, we describe the implementation and
performance of MPI on the Fujitsu AP1000 multicomputer.
 
To produce an efficient implementation, the operating system on the
AP1000 had to be modified to better support MPI.  These modifications
are presented, along with the hardware operations that were utilised.
A selective broadcast operation was developed from the modifications
which allowed very efficient group-wide broadcast.  The performance of
the implementation in comparison to native AP1000 calls is presented
with benchmarks of the collective routines implemented using the
selective broadcast operation.  
} 
}

@techreport{DS94,
  author        = "David Sitsky",
  title         = "Implementation of {MPI} on the {Fujitsu} {AP1000}: Technical details",
  number        = {TR-CS-94-08},
  keywords      = {message passing},
  institution   = { Australian National University},
  month         = sep,
  year          = 1994,
  postscript    = {DS94.ps.gz}
}


@InProceedings{DSPMATDW96,
  author	= {David Sitsky and Paul Mackerras and Andrew Tridgell and
		  David Walsh},
  title		= {Implementing {MPI} under {AP/L}inux},
  booktitle	= {MPI Developer's Conference},
  keywords      = {message passing},
  year		= 1996,
  month		= jul,
  address       = {Notre Dame, IN, USA},
  copyheld	= {yes},
  postscript    = {DSPMATDW96.ps.gz},
  abstract      = {
A preliminary MPI library has been implemented for the Fujitsu AP1000+
multicomputer running the AP/Linux operating system.  Under this
environment, parallel programs may be dedicated to a fixed partition,
or a number of parallel programs may share a partition.  Therefore,
the MPI library has been constructed so that messaging operations can
be driven by polling and/or interrupt techniques.  It has been found
that polling works well when a single parallel program is running on a
given partition, and that interrupt-driven communication makes far
better use of the machine when multiple parallel programs are
executing.  Gang scheduling of multiple parallel programs which use
polling was found to be relatively ineffective.
}
}

@InProceedings{DSKH96a,
  author	= {David Sitsky and Kenichi Hayashi},
  title		= {Implementing {MPI} for the {Fujitsu AP1000/AP1000+} using
		  Polling, Interrupts and Remote Copying},
  booktitle	= {Joint Symposium on Parallel Processing 1996 (JSPP'96)},
  keywords      = {message passing},
  editor	= {Nobuo Saito},
  year		= {1996},
  address	= {Tokyo, Japan},
  month		= jun # { 18--20},
  pages		= {177--184},
  copyheld	= {yes},
  abstract      = {
A complete implementation of MPI for the Fujitsu AP1000 and AP1000+
machines is presented.  The library can employ a number of different
mechanisms in implementing the basic send and receive message passing
operations.  The method of detecting the arrival of new messages at an
MPI process can be realized through interrupt-driven and polling
techniques.  Transferring message data is achieved by either sending
the message data directly to the receiver ``in-place'', or using a
rendezvous method which allows the use of a fast noncopying nonblocking
remote-fetching operation.
 
The MPI library exhibits good performance compared to the native
message passing library, and allows the user to decide at runtime
which mechanisms will be used in order to achieve the best performance
on a per-application basis.
}
}

@inproceedings{DSKH96b,
  author = "David Sitsky and Kenichi Hayashi",
  title = "An {MPI} Library which uses Polling, Interrupts and Remote
           Copying for the {F}ujitsu {AP1000+}",
  booktitle = "International Symposium on Parallel Architectures,
               Algorithms, and Networks (ISPAN'96)",
  year = 1996,
  keywords      = {message passing},
  address = {Beijing, China},
  publisher = "IEEE",
  month = jun # { 12--14},
  postscript = {DSKH96b.ps.gz},
  abstract = {
A complete implementation of MPI for the Fujitsu AP1000+ is
presented.  The library can employ a number of different mechanisms in
implementing the send and receive message passing operations.  The
method of detecting the arrival of new messages can be realized
through interrupt-driven and polling techniques.  Transferring message
data is achieved by either sending the message data directly to the
receiver ``in-place'', or using a rendezvous method which allows the
use of a fast noncopying nonblocking remote-fetching operation.
 
The MPI library exhibits good performance compared to the native
message passing library, and allows the user to decide at runtime
which mechanisms will be used in order to achieve the best performance
on a per-application basis.
}
}

@inproceedings{DSPM97,
  author = "David Sitsky and Paul Mackerras",
  title = "System Developments on the {Fujitsu} {AP3000}",
  editor = "Paul Mackerras",
  keywords      = {message passing MPI},
  booktitle = "Proceedings of the Seventh Parallel Computing Workshop",
  year = 1997,
  publisher = "Australian National University",
  address = "Canberra, Australia",
  month = sep # { 25--26},
  note = "paper P1-X",
  postscript = {DSPM97.ps.gz},
  abstract = {
AP/Linux on the AP1000+ has proven to be a valuable parallel computing
environment, supporting both parallel operating systems research and
parallel applications which require modern operating system
capabilities.  This environment has been ported to the AP3000 machine,
which required porting the Linux operating system to the UltraSPARC
and developing a device driver for the APnet network device.  In
addition, MPI libraries based on MPICH were constructed for both Linux
and Solaris.  The two systems have quite different communication
architectures.  This paper will highlight these system developments
and will provide some performance analysis.
}
}

@inproceedings{PMDS95,
  author = "Paul Mackerras and David Sitsky",
  title = "A Parallel {TCP/IP} Protocol Implementation",
  booktitle = "Proceedings of Parallel and Real-Time Systems",
  year = 1995,
  month = oct,
  address = "Fremantle, Australia",
  postscript = {PMDS95.ps.gz},
  abstract = {
This paper describes an implementation of TCP/IP in which the
processing is distributed over several processors in the Fujitsu
AP1000.  With our implementation, programs running on the AP1000 cells
can establish socket connections with other hosts and transmit or
receive data at rates of up to 9 MB/s over the FDDI interface.  In
contrast, an implementation where all the processing was performed on
a single cell achieved a throughput of 3--4 MB/s.  Our
implementation is based on the TCP/IP implementation in the BSD-4.4
software release, and uses Berkeley-style sockets as the application
interface.
} 
}

@InProceedings{CWJSFWK96,
  author	= {C. W. Johnson and S. Fenwick and W. Keating},
  title		= {Experience with Benchmark Applications on the {AP}1000
		  {H}erod Object Store},
  booktitle	= {Proceedings of the Sixth International Parallel Computing
		  Workshop},
  editor	= {M. Ishii},
  year		= 1996,
  month		= nov # { 12--13},
  organization	= {Fujitsu Ltd.},
  address	= {Kawasaki, Japan},
  pages		= {P1-T},
  keywords      = {persistent persistance object stores},
  copyheld	= {yes}
}

@techreport{SFCJ97,
  author        = "Stephan Fenwick and Chris Johnson",
  title         = "{HeROD} flavoured oct-trees: scientific computation with a 
                   multicomputer persistent object store",
  number        = {TR-CS-97-04},
  institution   = { Australian National University},
  month         = feb,
  year          = 1997,
  keywords      = {persistent persistance object stores},
  abstract      = {
Using a persistent multicomputer object store should greatly simplify
the writing of distributed memory parallel programs operating on
irregular, object-structured data, by removing from the programmer the
burden of managing data referencing, distribution and coherency. We
explore the development of such a program using the HeROD persistent
multicomputer object store, in a computational science
application. The computational code is part of the tree-code algorithm
for the N-body problem. A number of solutions to the difficulties of
combining flat transactions and cooperating parallel processes are
explored, in both the application programming domain and the
persistent store design. Actual performance measures of the
implementation on a 128-processor multicomputer are reported, with
scalability comparisons for a range of processor configurations
(exploring sensitivity to the client-server balance) and program
implementation strategies, particularly by varying transaction size.
}
}

@InProceedings{CWJJXYRBS95,
  author	= {C. W. Johnson and J. X. Yu and R. B. Stanton},
  title		= {Architecture of a high-performance persistent object
		  store.},
  booktitle	= {Proceedings of the Fourth International Parallel Computing
		  Workshop},
  editor	= {J. Darlington},
  year		= 1995,
  organization	= {Fujitsu Ltd.},
  address	= {London, U.K.},
  month		= sep # { 25--26},
  pages		= {297--306},
  keywords      = {persistent persistance object stores},
  copyheld	= {yes}
}

@InProceedings{CJDW93,
  author        = "Chris Johnson and David Walsh",
  title         = "Porting the {PVM} distributed computing environment to the 
                   {Fujitsu} {AP1000}",
  booktitle     = "Proceedings of the Second International Parallel Computing
		   Workshop",
  keywords      = {message passing},
  year          = 1993,
  month         = nov,
  address       = {Kawasaki, Japan},
  postscript    = {CJDW93.ps.gz}
}

@InProceedings{PM94,
  author        = "Paul Mackerras",
  title         = "A High-Speed Network Interface for the {AP1000}",
  keywords      = {FDDI TCP/IP network},
  editor	= "Mitsuo Ishii",
  booktitle	= "Proceedings of the Third Parallel Computing Workshop",
  year		= 1994,
  publisher	= "Fujitsu Laboratories Ltd.",
  address	= "Kawasaki, Japan",
  month		= nov,
  note          = "paper P1-N",
  postscript    = "PM94.ps.gz"
}  
  
@inproceedings{KSDW98,
   author = {Kuniyasu Suzaki and David Walsh},
   title = {Implementing the combination of time sharing and space sharing
            on {AP/Linux}},
   booktitle = {Proceedings of the 4th Workshop of Job Scheduling Strategies
          (to appear in Lecture Notes of Computer Science, Springer)},
   editor = {Dror Feitelson and Larry Rudolph},
   publisher = {Springer},
   address = {Orlando, FL, USA},
   NOTE = {},
   month = Mar # { 30},
   year = {1998},
   postscript = {KSDW98.ps.gz},
   abstract = {
We report the implementation of a scheduling method which combines
time sharing and space sharing on AP/Linux.  To run many tasks
simultaneously on a parallel computer, the parallel computer system
needs a partitioning algorithm that can partition processors for
incoming tasks.  However, a typical problem for the algorithm is a
blockade situation, which causes low processor utilization and slow
response.  To avoid such a situation, we present a Time Sharing System
(TSS) scheme that uses a partitioning algorithm.  In this paper we
state the implementation design of our TSS on a real parallel
computer, the Fujitsu AP1000+. The design is based on the parallel
operating system, AP/Linux. We report our current implementation and
the performance.  
} 
}

@inproceedings{DWBZCJKS98,
  author = {D. Walsh and B. B. Zhou and C. Johnson and K. Suzaki},
  title = {The {Implementation} of a {Scalable Gang Scheduling Scheme} on the {AP1000+}},
  booktitle = {Proceedings of the Eighth Parallel Computing Workshop},
  publisher = {School of Computing, National University of Singapore},
  address = {Singapore},
  NOTE = {paper P1-G},
  pages = {83--88},
  month = sep # {7--8},
  year = 1998,
  postscript = {DWBZCJKS98.ps.gz},
  abstract = {
Some disadvantages associated with conventional gang scheduling
are that it is not scalable and that space-sharing policies are not
easily incorporated to enhance the efficiency of resource utilisation
due to the centralised control and the frequent signal-broadcasting 
across the processors.
This paper describes an effective and scalable
gang scheduling scheme and its implementation on
the Fujitsu AP1000+.
}}

@inproceedings{KSBCPM98,
   author = {Kent Skinner and Brian Corrie and Paul Mackerras},
   title = {Parallel {V}olume {R}endering in the {AVS} {F}ramework},
   booktitle = {Proceedings of the Eighth Parallel Computing Workshop},
   publisher = {National University of Singapore},
   address = {Singapore},
   NOTE = {paper P2-D},
   pages = {239--243},
   month = sep # {7--8},
   year = 1998,
   postscript = {KSBCPM98.ps.gz},
   abstract = {
This paper discusses our experiences using the Advanced Visualization
System (AVS) for parallel volume rendering. AVS is an extensive,
sophisticated and widely used scientific visualization package which
allows users to build networks of modules (either built-in or user
supplied) to process and render their data.  However, AVS does not
provide any support for modules to execute as parallel programs.
 
We have ported our stand-alone parallel volume renderer,
\texttt{cap\_vol}, to
run as an AVS module called \texttt{avs\_vol}.  The module is structured
in two
parts: a front-end which interfaces to the AVS system, and a separate
back-end process which runs in parallel and performs the volume
rendering.  In this paper, we discuss some of the issues and problems
in the design and implementation of \texttt{avs\_vol}.

}  
}


@inproceedings{KSPSBBZ98,
   author = {Kent Skinner and Peter Strazdins and Bing Bing Zhou},
   title = {Development of a {S}parse {D}irect {LLT} {S}olver for the
            {F}ujitsu {AP3000}},
   booktitle = {Proceedings of the Eighth Parallel Computing Workshop},
   publisher = {National University of Singapore},
   address = {Singapore},
   NOTE = {paper P1-F},
   pages = {77-81},
   month = sep # {7--8},
   year = 1998,
   postscript = {KSPSBBZ98.ps.gz},
   abstract = {
Efficient parallel algorithms for Sparse Direct LLT Solvers are complex
and involve many tradeoffs.  In this paper, we compare the performance
of
two sparse matrix solvers, a parallel one called~PSPASES and a
sequential
one called~DRSPSL,
on a (virtual) AP3000, which is UltraSPARC-based.  
An overview of the algorithms and software structure of the two solvers
will be given, together with an analysis on the suitability of both for
machines such as the AP3000.  DRSPSL's performance compares favorably
on a 2-node virtual AP3000.  An outline of how to parallelise DRSPSL
will 
then be presented.
}  
}

@inproceedings{PS98,
        author = {Peter E. Strazdins},
        title = {Transporting {D}istributed {BLAS} to the
                {F}ujitsu {AP}3000 and {VPP}-300},
        booktitle = {Proceedings of the Eighth Parallel Computing Workshop},
        publisher = {School of Computing, National University of Singapore},
        address = {Singapore},
        NOTE = {paper P1-E},
        month = sep # {7--8},
        pages = {69--76},
        year = 1998,
        postscript = {PS98.ps.gz},
  abstract = {
The  DBLAS Distributed BLAS Library is a portable version of parallel
BLAS that has been highly tuned for the Fujitsu AP1000 and AP+.  In this
paper, we describe performance enhancements made for two very different
high performance distributed memory platforms, the Fujitsu AP3000 and
the Fujitsu VPP-300.
 
Even with the provision of highly tuned (vendor-supplied) serial BLAS
implementations, attention must be given to cell computation speed
issues, since serial BLAS does not supply a local matrix transpose
routine (which is needed in many places), nor does it supply routines to
adequately handle the triangular matrices which arise in the parallel
context.  We will describe the differing principles used on the
UltraSPARC and VPP-300 nodes to optimise memory access patterns for the
local matrix transpose operation and the large matrix multiply.  The
former uses partitioning methods which can yield a factor of 3-4
improvement of naive methods.  The latter simultaneously optimizes usage
of two levels of cache and the TLB, and out-performs the BLAS from the
Sun Performance Library 1.2 by at least 15\% on an 170 MHz UltraSPARC I.
We will also give comparisons between the other functions in our version
of UltraSPARC-tuned BLAS and the Performance Library 1.2.
 
Unlike the AP1000 and AP+, the AP3000 and VPP-300 must simulate row or
column broadcasts using point-to-point messages.  Also, their
communication latencies to floating point speeds are much higher, and
stride communication is not available.  We describe and evaluate methods
used in the DBLAS spread and reduce communication primitives to minimize
communication costs for these machines.  These include the use of
pipelined broadcasts, and ring-shift methods for spread and reduce
operations with multiple sources, both of which are significantly
superior to binary tree based methods. }

}

@inproceedings{DSPM98,
        author = {David Sitsky and Paul Mackerras},
        title = {A {High-Performance} {Message-Passing} {L}ibrary for
                 the {AP3000}},
        booktitle = {Proceedings of the Eighth Parallel Computing Workshop},
        publisher = {School of Computing, National University of Singapore},
        address = {Singapore},
        NOTE = {paper P2-E},
        month = sep # {7--8},
        pages = {245--251},
        year = 1998,
        postscript = {DSPM98.ps.gz},
  abstract = {
This paper describes the design of LWSLT, a robust, portable,
high-performance message-passing library for the AP3000.  LWSLT
provides the basic communications facilities in Fujitsu's forthcoming
MPI2 product for the AP3000.  In addition to the standard message send
and receive functions, LWSLT supports advanced features such as dynamic
process creation.
 
A key feature of the design of LWSLT is its modular architecture, which
permits it to employ a variety of different communication mechanisms,
without compromising performance.  These mechanisms are encapsulated
in software modules called "transports".  The current implementation
supports three transports: {\tt tcpip}, {\tt shm}, and {\tt apnet},
which use TCP/IP
sockets, System V shared memory segments, and the AP3000 AP-Net
respectively.  All three can be used simultaneously in the one
parallel program, with the library choosing the most appropriate
transport to use between each pair of parallel processes.  Performance
measurements show that each transport achieves good performance in the
context of the speed of its communication mechanism.
}
}
